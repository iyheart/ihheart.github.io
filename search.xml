<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>markdown语法</title>
      <link href="/2024/01/28/markdown%E8%AF%AD%E6%B3%95/"/>
      <url>/2024/01/28/markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#一级标题</span></span><br><span class="line"><span class="section">##二级标题</span></span><br><span class="line"><span class="section">###三级标题</span></span><br><span class="line"><span class="section">####四级标题</span></span><br><span class="line"><span class="section">#####五级标题</span></span><br><span class="line"><span class="section">######六级标题</span></span><br></pre></td></tr></table></figure><ul><li>效果：</li></ul><p><img src="/2024/01/28/markdown%E8%AF%AD%E6%B3%95/img/markdown%E8%AF%AD%E6%B3%95/93452d6ce8e62e3d813b7dd96835f03484917a8f.png"></p><h1 id="无序列表（-、-、-）"><a href="#无序列表（-、-、-）" class="headerlink" title="无序列表（-、+、*）"></a>无序列表（-、+、*）</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 文本</span><br><span class="line"><span class="bullet">+</span> 文本</span><br><span class="line"><span class="bullet">*</span> 文本</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><p><img src="/2024/01/28/markdown%E8%AF%AD%E6%B3%95/img/markdown%E8%AF%AD%E6%B3%95/2024-01-28-13-10-35-image.png"></p><h1 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 文本</span><br><span class="line"><span class="bullet">2.</span> 文本</span><br><span class="line"><span class="bullet">3.</span> 文本</span><br></pre></td></tr></table></figure><ul><li>效果</li></ul><ol><li>文本</li><li>文本</li><li>文本</li></ol><h1 id="链接和图片"><a href="#链接和图片" class="headerlink" title="链接和图片"></a>链接和图片</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">图片：![<span class="string">星空</span>](<span class="link">../img/markdown语法/33376abe47b216cc96bd5b4073861dd96de22335.jpg</span>)</span><br><span class="line">链接：[<span class="string">百度</span>](<span class="link">https://www.baidu.com/</span>)</span><br></pre></td></tr></table></figure><ul><li><p>效果</p><ul><li><p>图片</p><p><img src="/2024/01/28/markdown%E8%AF%AD%E6%B3%95/img/markdown%E8%AF%AD%E6%B3%95/33376abe47b216cc96bd5b4073861dd96de22335.jpg"></p></li><li><p>链接</p></li></ul><p><a href="https://www.baidu.com/">百度</a></p></li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 这是一段引用，  </span></span><br></pre></td></tr></table></figure><h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客优化--butterfly主题</title>
      <link href="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
      <url>/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="Butterfly的一些建议"><a href="#Butterfly的一些建议" class="headerlink" title="Butterfly的一些建议"></a>Butterfly的一些建议</h1><ul><li>本建议来着Butterfly主题的开发者</li></ul><ol><li><p>不要把个人需要的文件&#x2F;图片放在主题source文件夹里，因为在升级主题的过程中，可能会把文件覆盖删除了。<br>在Hexo根目录的source文件夹里，创建一个文件夹来放置个人文件&#x2F;图片。<br>引用文件直接为&#x2F;文件夹名称&#x2F;文件名</p></li><li></li></ol><h1 id="导航栏-nav"><a href="#导航栏-nav" class="headerlink" title="导航栏(nav)"></a>导航栏(nav)</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/%E5%AF%BC%E8%88%AA%E6%A0%8F.png"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/56eb0e63d6744fce86462740766ae2e8.png" alt="image-20230807205821105"></p><ul><li>导航栏的位置如下</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/%E5%8D%9A%E5%AE%A2%E5%AF%BC%E8%88%AA%E6%A0%8F.png"></p><h2 id="logo"><a href="#logo" class="headerlink" title="logo"></a>logo</h2><ul><li>logo所控制的是上图导航栏左边的图片</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/%E5%8D%9A%E5%AE%A2%E5%AF%BC%E8%88%AA%E6%A0%8Flogo.png"></p><ul><li>添加图片后的logo，博客效果如下</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/logo%E4%BF%AE%E6%94%B9.png"></p><h2 id="display-title"><a href="#display-title" class="headerlink" title="display_title"></a>display_title</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125093303961.png" alt="image-20240125093303961"></p><ul><li>这里如果填True就会显示：iyheart的博客</li><li>这里如果填false就没有iyheart的博客，只有单单一个logo的图片</li></ul><h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h2><ul><li>填true导航栏就会被固定</li><li>填false导航栏在下滑的时候会消失</li></ul><h1 id="目录（menu）"><a href="#目录（menu）" class="headerlink" title="目录（menu）"></a>目录（menu）</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/%E8%8F%9C%E5%8D%95.png"></p><ul><li>目录的内容下图右上角的东西</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125150910386.png" alt="image-20240125150910386"></p><h1 id="代码相关"><a href="#代码相关" class="headerlink" title="代码相关"></a>代码相关</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125151508690.png" alt="image-20240125151508690"></p><ul><li>此部分是用来设置博客上代码块的部分</li></ul><h2 id="theme代码颜色主题"><a href="#theme代码颜色主题" class="headerlink" title="theme代码颜色主题"></a>theme代码颜色主题</h2><h3 id="darker-黑色主题"><a href="#darker-黑色主题" class="headerlink" title="darker(黑色主题)"></a>darker(黑色主题)</h3><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125152500428.png" alt="image-20240125152500428"></p><h3 id="pale-night-苍夜主题"><a href="#pale-night-苍夜主题" class="headerlink" title="pale night(苍夜主题)"></a>pale night(苍夜主题)</h3><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125152546634.png" alt="image-20240125152546634"></p><h3 id="light（浅色主题）"><a href="#light（浅色主题）" class="headerlink" title="light（浅色主题）"></a>light（浅色主题）</h3><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125152647662.png" alt="image-20240125152647662"></p><h3 id="ocean（海洋主题）"><a href="#ocean（海洋主题）" class="headerlink" title="ocean（海洋主题）"></a>ocean（海洋主题）</h3><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125152814932.png" alt="image-20240125152814932"></p><h3 id="mac（苹果黑色系统主题）"><a href="#mac（苹果黑色系统主题）" class="headerlink" title="mac（苹果黑色系统主题）"></a>mac（苹果黑色系统主题）</h3><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125152842567.png" alt="image-20240125152842567"></p><h3 id="mac-light（苹果系统浅色主题）"><a href="#mac-light（苹果系统浅色主题）" class="headerlink" title="mac light（苹果系统浅色主题）"></a>mac light（苹果系统浅色主题）</h3><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125152911052.png" alt="image-20240125152911052"></p><h3 id="false（不加主题）"><a href="#false（不加主题）" class="headerlink" title="false（不加主题）"></a>false（不加主题）</h3><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125152942734.png" alt="image-20240125152942734"></p><h3 id="自定义代码块主题"><a href="#自定义代码块主题" class="headerlink" title="自定义代码块主题"></a>自定义代码块主题</h3><h2 id="copy代码复制"><a href="#copy代码复制" class="headerlink" title="copy代码复制"></a>copy代码复制</h2><ul><li>true是允许复制代码</li><li>false是不允许复制代码（下图不会出现红色框的图标）</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/%E4%BB%A3%E7%A0%81%E5%A4%8D%E5%88%B6.png"></p><ul><li>这个功能有点鸡肋，因为使用false，还可以用复制，只是不能一键复制</li></ul><h2 id="lang代码语言"><a href="#lang代码语言" class="headerlink" title="lang代码语言"></a>lang代码语言</h2><ul><li>true会显示代码的语言</li><li>false则不会显示代码的语言（下图红色框框起来了）</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/%E4%BB%A3%E7%A0%81%E8%AF%AD%E8%A8%80.png"></p><h2 id="shrink代码收缩"><a href="#shrink代码收缩" class="headerlink" title="shrink代码收缩"></a>shrink代码收缩</h2><ul><li>true一开始会自动收缩代码（图标位置下图所示）</li><li>false不会自动收缩代码，可以手动收缩</li><li>none则没有收缩代码的功能</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/%E4%BB%A3%E7%A0%81%E6%94%B6%E7%BC%A9.png"></p><h2 id="height-limit代码高度限制"><a href="#height-limit代码高度限制" class="headerlink" title="height_limit代码高度限制"></a>height_limit代码高度限制</h2><ul><li>false会直接展示全部代码</li><li>填写数字会展示指定长度的代码</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/%E4%BB%A3%E7%A0%81%E7%BC%A9%E8%BF%9B2.png"></p><ul><li>点击红色框部分会展示全部代码</li></ul><h2 id="code-word-wrap-横向滚动条"><a href="#code-word-wrap-横向滚动条" class="headerlink" title="code_word_wrap(横向滚动条)"></a>code_word_wrap(横向滚动条)</h2><ul><li>有时一行的代码过长，这就会出现滚动条</li><li>true是关闭滚动条</li><li>flase是打开滚动条</li></ul><h1 id="社交部分"><a href="#社交部分" class="headerlink" title="社交部分"></a>社交部分</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125155931637.png" alt="image-20240125155931637"></p><p>格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">icon:</span> <span class="string">link</span> <span class="string">||</span> <span class="string">the</span> <span class="string">description</span> <span class="string">||</span> <span class="string">color</span></span><br><span class="line"><span class="comment">#icon图片，其格式要fab fas格式（html的图标代码）</span></span><br><span class="line"><span class="comment">#link是链接部分，点击图标会自动进入相应网站</span></span><br><span class="line"><span class="comment">#the description是描述部分，将鼠标放置在图片上会出现名称</span></span><br><span class="line"><span class="comment">#color是颜色部分</span></span><br><span class="line"><span class="comment">#该部分涉及到CSS、html等知识</span></span><br></pre></td></tr></table></figure><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125155914323.png"></p><h1 id="图片设置"><a href="#图片设置" class="headerlink" title="图片设置"></a>图片设置</h1><ul><li>可以利用http协议的方式，将网址输入到代码里面，打开博客的时候主机去服务器寻找和拉取图片</li><li></li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125162534859.png" alt="image-20240125162534859"></p><h2 id="网站图标"><a href="#网站图标" class="headerlink" title="网站图标"></a>网站图标</h2><ul><li>控制网页的图标</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125162814267.png" alt="image-20240125162814267"></p><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><ul><li>effect部分会控制图像转圈</li><li>true为使用，图像会一直转圈</li><li>false为不使用，图像静止不动</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125162852319.png" alt="image-20240125162852319"></p><h2 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/%E9%A1%B6%E9%83%A8%E5%9B%BE%E4%BB%A3%E7%A0%81.png"></p><h3 id="顶部图介绍"><a href="#顶部图介绍" class="headerlink" title="顶部图介绍"></a>顶部图介绍</h3><p>顶部图就是一进入博客的会出现在页面顶部的背景</p><p>![屏幕截图 2024-01-24 140230](博客优化&#x2F;屏幕截图 2024-01-24 140230.png)</p><p>顶部图包括：主页顶部图、分类页顶部图、友情链接顶部图、博客文章内部的顶部图等等</p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240124140622731.png" alt="image-20240124140622731"></p><h3 id="寻找顶部图"><a href="#寻找顶部图" class="headerlink" title="寻找顶部图"></a>寻找顶部图</h3><ul><li>可以上网寻找一些jpg、png、gif等格式的图片</li><li>还可以去一些应用中寻找图片，比如wallpaper</li></ul><h3 id="使用链接配置顶部图"><a href="#使用链接配置顶部图" class="headerlink" title="使用链接配置顶部图"></a>使用链接配置顶部图</h3><ul><li>在网站上随便搜索图片</li><li>复制图片地址</li><li>将地址复制到顶部图源码上，如图所示</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125095544033.png" alt="image-20240125095544033"></p><ul><li>注意：复制的地址前面要保持2个空格的位置，要不然格式会出问题。</li></ul><h3 id="使用图床配置顶部图"><a href="#使用图床配置顶部图" class="headerlink" title="使用图床配置顶部图"></a>使用图床配置顶部图</h3><ul><li>图床是互联网存储图片的空间，作为一个人的云端图片链接</li><li>大部分人写博客都用markdown，而<code>markdown</code>的图片是通过链接的方式进行传输的的，因此，如果是在本电脑上直接嵌入的文件没办法在网络上访问（除非你把电脑长时间开机并且开放~极其危险）。</li><li>并且在上传一些图片时，网页会进行压缩处理，导致图片的质量损失，为确保清晰度，建议搭建一个图床。</li></ul><h3 id="利用picgo-github搭建图床"><a href="#利用picgo-github搭建图床" class="headerlink" title="利用picgo+github搭建图床"></a>利用picgo+github搭建图床</h3><ul><li>去github上搜索picgo</li><li>点击如图所示的项目</li><li>下载源代码</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125214413548.png" alt="image-20240125214413548"></p><ul><li>下载之后，打开该界面</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125215633746.png" alt="image-20240125215633746"></p><ul><li>新建一个仓库存放图片资源<ul><li>名字和描述随便</li><li>必须是Public，否则无法访问</li><li>选Add a README file</li></ul></li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125215815240.png" alt="image-20240125215815240"></p><ul><li>配置picgo<ul><li>点击图床设置选项</li><li>点击右边的加号</li></ul></li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125220113423.png" alt="image-20240125220113423"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125220155217.png" alt="image-20240125220155217"></p><ul><li><p>图床配置名：随便名字</p></li><li><p>仓库名</p><ul><li>github图标右边的，复制粘贴时要注意斜杠（&#x2F;）左右两边各有一个空格</li></ul></li><li><p>分支名填：main</p></li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125220300408.png" alt="image-20240125220300408"></p><ul><li><p>Taken</p><ul><li><p>获取Taken：Taken在github仓库的设置里</p></li><li><p>在设置左边的选项寻找Developer Setting（开发者设置）</p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125220905104.png" alt="image-20240125220905104"></p></li><li><p>出现personal access token</p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125221125538.png" alt="image-20240125221125538"></p></li><li><p>选择Tokens（classic）: Note随便写、Expiration30day(有效期30天)（过期要及时更换新的Token）、repo打勾</p></li><li><p>点击生成Token，复制进去</p></li></ul></li><li><p>设定自定义域名：<a href="https://cdn.jsdelivr.net/gh/%E3%80%90iyheart/tuchuang%EF%BC%88%E8%BF%99%E9%87%8C%E8%B7%9F%E7%9A%84%E6%98%AF%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BB%93%E5%BA%93%E5%90%8D%EF%BC%89%E3%80%91">https://cdn.jsdelivr.net/gh/【iyheart/tuchuang（这里跟的是自己的仓库名）】</a></p></li><li><p>配置完成！</p></li></ul><h3 id="配置标签页和分类页的顶部图"><a href="#配置标签页和分类页的顶部图" class="headerlink" title="配置标签页和分类页的顶部图"></a>配置标签页和分类页的顶部图</h3><ul><li>要去相关文件配置</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126103332782.png" alt="image-20240126103332782"></p><ul><li>这是tags文件里面的内容，点开该文件</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126103421342.png" alt="image-20240126103421342"></p><ul><li>配置如图</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126103609550.png" alt="image-20240126103609550"></p><h1 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h1><ul><li>在文章的front-matter中添加sticky: 1属性来把这篇文章置顶。数值越大，置顶的优先级越大</li></ul><h1 id="文章的封面"><a href="#文章的封面" class="headerlink" title="文章的封面"></a>文章的封面</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126162950065.png" alt="image-20240126162950065"></p><ul><li>对于90、91、92行代码，如果不想要展示文章的封面，那么就直接把true改为false即可</li><li>对于position来说，设置为both就封面展示一左一右，left封面都展示在左边，对于right封面都展示在右边</li><li>default_cover设置默认的封面，当你没有指定每个博客的封面时，就会改为默认图片<ul><li>默认图片可以设置多张，随即选取一张图片做完封面</li></ul></li><li>如果要配置单个博客的封面就必须到博客里面去配置</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126164037291.png"></p><p>这里注意如果当个博客只设置了封面和没有设置顶部图，那么顶部图的图片就会与封面图片相同</p><h1 id="替换无法显示的图片"><a href="#替换无法显示的图片" class="headerlink" title="替换无法显示的图片"></a>替换无法显示的图片</h1><h1 id="404页面和图片"><a href="#404页面和图片" class="headerlink" title="404页面和图片"></a>404页面和图片</h1><ul><li>比较简单</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126164907380.png" alt="image-20240126164907380"></p><h1 id="文章页相关配置"><a href="#文章页相关配置" class="headerlink" title="文章页相关配置"></a>文章页相关配置</h1><ul><li>该部分是关于博客主页和每个博客文章的一些设置</li><li>这里面的相对时间是几分钟前，几天前，几个月前</li><li>明确时间就是xxxx年xx月xx日</li></ul><h2 id="主页配置"><a href="#主页配置" class="headerlink" title="主页配置"></a>主页配置</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126180055560.png" alt="image-20240126180055560"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/314a043cdab443f0685e39d82d1149cb_hexo-theme-butterfly-docs-page-meta.png" alt="314a043cdab443f0685e39d82d1149cb_hexo-theme-butterfly-docs-page-meta"></p><h2 id="文章页配置"><a href="#文章页配置" class="headerlink" title="文章页配置"></a>文章页配置</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126180121028.png" alt="image-20240126180121028"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/7a7cf74fafb834d392966dc82808f6d9_hexo-theme-butterfly-doc-post-info.png" alt="7a7cf74fafb834d392966dc82808f6d9_hexo-theme-butterfly-doc-post-info"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/8deedee26ffdad6b12173c1fbaa4edfd_hexo-theme-butterfly-doc-post-tag.png" alt="8deedee26ffdad6b12173c1fbaa4edfd_hexo-theme-butterfly-doc-post-tag"></p><h2 id="主页文章节选（自动节选或者文章页描述）"><a href="#主页文章节选（自动节选或者文章页描述）" class="headerlink" title="主页文章节选（自动节选或者文章页描述）"></a>主页文章节选（自动节选或者文章页描述）</h2><p>四种节选方式</p><ul><li>description：在每个md文档中进行节选</li><li>auto_excerpt: 只显示自动节选</li><li>false：不显示文章内容</li><li>both: 优先选择description节选，如果没有，则显示自动节选内容</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126182011869.png" alt="image-20240126182011869"></p><ul><li>先配置文章节选的行数和长度<ul><li>method表示节选的方式，有1、2、3、false四个选项分别对应上面四个</li><li>length表示节选的长度（不太清楚是一共节选还是每行节选）</li><li>这里就按照原来的method 3   length 500</li></ul></li></ul><h2 id="页面锚点"><a href="#页面锚点" class="headerlink" title="页面锚点"></a>页面锚点</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126194230022.png" alt="image-20240126194230022"></p><ul><li>转发博客给朋友时，如果没有锚点，朋友要重头开始看</li><li>如果有锚点，朋友点进去的博客位置就是你转发给他时，你所正在阅读的文章位置</li></ul><h2 id="图片描述"><a href="#图片描述" class="headerlink" title="图片描述"></a>图片描述</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126195510186.png" alt="代码"></p><ul><li>图片描述是在md文档中写入图片的名称，在博客中会显示出图片名称</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126195610334.png" alt="image-20240126195610334"></p><ul><li>上图写的代码位置就是图片名称</li><li>下图为示例展示</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126195649561.png" alt="image-20240126195649561"></p><h2 id="文章的复制"><a href="#文章的复制" class="headerlink" title="文章的复制"></a>文章的复制</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126200000140.png" alt="image-20240126200000140"></p><ul><li><p>第一个enable表示能否复制博客的内容</p></li><li><p>第二个enable（copyright下面的）：表示复制后是否会自动加上版权信息</p></li><li><p>limit_count: 复制字数限制，复制的内容大于该数时会加上版权信息</p></li></ul><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126185704170.png" alt="image-20240126185704170"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126185536387.png" alt="image-20240126185536387"></p><ul><li>post：文章页是否显示TOC</li><li>page：普通页面是否显示TOC</li><li>number：是否显示章节数</li><li>expand：是否展开TOC</li><li>style_simple: 简洁模式（侧边栏只显示TOC，只对文章页有效）<ul><li>简洁模式是只显示一级标题，和当前一级标题里面的小标题</li><li>不会显示其他一级标题的小标题</li></ul></li><li>scroll_percent：是否显示滚动进度百分比</li><li>该目录还可以单独为一个文章设置，在md文档中设置</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126193654028.png" alt="image-20240126193654028"></p><h2 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126182744154.png" alt="image-20240126182744154"></p><ul><li>这里只需要修改enabl即可，true展示文章版权这一块，false不展示版权</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126182835195.png" alt="image-20240126182835195"></p><ul><li><p>decode是转码：默认对网址进行解码，以至于如果是中文网址，会被解码，可设置true来显示中文网址（上图的版权声明就是没有解码的网址）</p></li><li><p>下图是有解码的网址</p></li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126183154696.png" alt="image-20240126183154696"></p><ul><li>如果是转载的文章那么就在md文档中如下操作</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126183339420.png" alt="image-20240126183339420"></p><ul><li>对文章单独设置版权信息需要再md文档单独设置</li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copyright<span class="emphasis">_author: xxxx</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href: https://xxxxxx.com</span></span><br><span class="line"><span class="emphasis">copyright_</span>url: https://xxxxxx.com</span><br><span class="line">copyright<span class="emphasis">_info: 此文章版權歸xxxxx所有，如有轉載，請註明來自原作者</span></span><br></pre></td></tr></table></figure><h2 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126185111844.png" alt="image-20240126185111844"></p><ul><li>如果要开启打赏功能就在enable那么写true</li><li>然后是图片二维码、文本，安装上图格式写即可</li></ul><h2 id="文章的编辑"><a href="#文章的编辑" class="headerlink" title="文章的编辑"></a>文章的编辑</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126194905247.png" alt="image-20240126194905247"></p><ul><li>对应静态博客没啥用</li></ul><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126193906263.png" alt="image-20240126193906263"></p><ul><li>根具相同的tag在博客的结尾推送其他文章</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126194057064.png" alt="image-20240126194057064"></p><h2 id="文章的分页"><a href="#文章的分页" class="headerlink" title="文章的分页"></a>文章的分页</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126195028387.png" alt="image-20240126195028387"></p><ul><li>用处不大</li></ul><h2 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126194518955.png" alt="image-20240126194518955"></p><ul><li>下图为具体配置</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126194734637.png" alt="image-20240126194734637"></p><ul><li>下图为具体情况</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126194816420.png" alt="image-20240126194816420"></p><h1 id="Footer设置"><a href="#Footer设置" class="headerlink" title="Footer设置"></a>Footer设置</h1><ul><li>Footer设置是在博客页的最底部</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126202233306.png" alt="image-20240126202233306"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126202305544.png" alt="image-20240126202305544"></p><ul><li><p>since：是从哪一年开始使用博客</p></li><li><p>custom_text: 可以自定义文本，也可以写html代码</p></li><li><p>copyright: 是否展示主题和框架</p></li></ul><h1 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126202505644.png" alt="image-20240126202505644"></p><ul><li>这个位置是侧边栏</li></ul><h1 id="右下角按钮"><a href="#右下角按钮" class="headerlink" title="右下角按钮"></a>右下角按钮</h1><h2 id="主要按钮"><a href="#主要按钮" class="headerlink" title="主要按钮"></a>主要按钮</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126203015943.png" alt="image-20240126203015943"></p><h2 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126203223053.png" alt="image-20240126203223053"></p><h2 id="亮暗设置"><a href="#亮暗设置" class="headerlink" title="亮暗设置"></a>亮暗设置</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126203301531.png" alt="image-20240126203301531"></p><h2 id="滚轮进度设置"><a href="#滚轮进度设置" class="headerlink" title="滚轮进度设置"></a>滚轮进度设置</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240126203349976.png" alt="image-20240126203349976"></p><h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125201546370.png" alt="image-20240125201546370"></p><ul><li>数学公式有俩种格式</li><li>MathJax格式<ul><li>enable是能否使用该格式的公式，true是能，false是不能</li><li>per_page是否每页都使用该格式的公式，true是每页都使用，false是每页不自动使用，需要手动添加</li></ul></li><li>KaTeX格式<ul><li>enable是能否使用该格式的公式，true是能，false是不能</li><li>per_page是否每页都使用该格式的公式，true是每页都使用，false是每页不自动使用，需要手动添加</li><li>hide_scrollbar隐藏滚动条</li></ul></li></ul><h1 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127095517898.png" alt="image-20240127095517898"></p><ul><li><p>Algolia搜索</p></li><li><p>本地搜索</p></li><li><p>DocSearch搜索</p></li><li><p>需要安装插件(这里用本地搜索的配置)</p><ul><li>输入指令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127100402474.png" alt="image-20240127100402474"></p><ul><li>在_config.yml文件中配置如下</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127102257749.png" alt="image-20240127102257749"></p></li></ul><h1 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127095331190.png" alt="image-20240127095331190"></p><ul><li>效果如下图右下角</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127095426677.png" alt="image-20240127095426677"></p><h1 id="评论功能"><a href="#评论功能" class="headerlink" title="评论功能"></a>评论功能</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125205057872.png" alt="image-20240125205057872"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125205122393.png" alt="image-20240125205122393"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125205137600.png" alt="image-20240125205137600"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240125205157954.png" alt="image-20240125205157954"></p><ul><li>有多种评论平台可以选择</li><li>在选择好要搭建的评论平台后先配置代码行410的use：平台<ul><li>例如：use: Livere   (注意冒号和L之间有一个空格)</li></ul></li></ul><h1 id="在线聊天"><a href="#在线聊天" class="headerlink" title="在线聊天"></a>在线聊天</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127095120000.png" alt="image-20240127095120000"></p><ul><li>很少用，基本上用不上</li></ul><h1 id="分析功能"><a href="#分析功能" class="headerlink" title="分析功能"></a>分析功能</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127103133136.png" alt="image-20240127103133136"></p><h1 id="广告设置"><a href="#广告设置" class="headerlink" title="广告设置"></a>广告设置</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127130636418.png" alt="image-20240127130636418"></p><h1 id="网站验证"><a href="#网站验证" class="headerlink" title="网站验证"></a>网站验证</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127102841050.png" alt="image-20240127102841050"></p><h1 id="网站美化"><a href="#网站美化" class="headerlink" title="网站美化"></a>网站美化</h1><h2 id="自定义主题色"><a href="#自定义主题色" class="headerlink" title="自定义主题色"></a>自定义主题色</h2><ul><li>默认显示为白色，可设置图片或者颜色</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127131137564.png" alt="image-20240127131137564"></p><h2 id="顶部图显示设置"><a href="#顶部图显示设置" class="headerlink" title="顶部图显示设置"></a>顶部图显示设置</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127131420377.png" alt="image-20240127131420377"></p><ul><li>默认是全屏</li><li>可以自定义顶部图大小，在index_top_img_height中设置</li></ul><h2 id="UI设置"><a href="#UI设置" class="headerlink" title="UI设置"></a>UI设置</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127131435137.png" alt="image-20240127131435137"></p><h2 id="文字对齐设置"><a href="#文字对齐设置" class="headerlink" title="文字对齐设置"></a>文字对齐设置</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127131510390.png" alt="image-20240127131510390"></p><h2 id="网站背景设置"><a href="#网站背景设置" class="headerlink" title="网站背景设置"></a>网站背景设置</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127131541454.png" alt="image-20240127131541454"></p><ul><li>可以为背景设置颜色形式：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;<span class="selector-id">#F90</span>&quot;</span><br></pre></td></tr></table></figure><ul><li>也可以为背景设置一张图片,形式：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url(http://xxxxxx.com/xxx.jpg)</span><br></pre></td></tr></table></figure><h2 id="Footer背景"><a href="#Footer背景" class="headerlink" title="Footer背景"></a>Footer背景</h2><ul><li>底部背景</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127131611153.png" alt="image-20240127131611153"></p><ul><li>footer_bg所配置的值</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127150458446.png" alt="image-20240127150458446"></p><h2 id="右下角按钮美化"><a href="#右下角按钮美化" class="headerlink" title="右下角按钮美化"></a>右下角按钮美化</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127131642019.png" alt="image-20240127131642019"></p><h2 id="页面进入效果"><a href="#页面进入效果" class="headerlink" title="页面进入效果"></a>页面进入效果</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127131701772.png" alt="image-20240127131701772"></p><h2 id="打字效果"><a href="#打字效果" class="headerlink" title="打字效果"></a>打字效果</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127131715387.png" alt="image-20240127131715387"></p><h2 id="背景特效"><a href="#背景特效" class="headerlink" title="背景特效"></a>背景特效</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127131841203.png" alt="image-20240127131841203"></p><h2 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127132159681.png" alt="image-20240127132159681"></p><h2 id="网站页面美化"><a href="#网站页面美化" class="headerlink" title="网站页面美化"></a>网站页面美化</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127132907170.png" alt="image-20240127132907170"></p><h2 id="自定义字体和字体大小"><a href="#自定义字体和字体大小" class="headerlink" title="自定义字体和字体大小"></a>自定义字体和字体大小</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127134844106.png" alt="image-20240127134844106"></p><h3 id="全局字体"><a href="#全局字体" class="headerlink" title="全局字体"></a>全局字体</h3><h3 id="Blog标题字体"><a href="#Blog标题字体" class="headerlink" title="Blog标题字体"></a>Blog标题字体</h3><h2 id="网站副标题"><a href="#网站副标题" class="headerlink" title="网站副标题"></a>网站副标题</h2><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127134953670.png" alt="image-20240127134953670"></p><ul><li>enable是否使用副标题</li><li>effect是否开启效果</li><li>typed_option选择打字的方式<ul><li>source可以选择false、1、2、3</li></ul></li><li>sub副标题的内容</li></ul><h2 id="加载动画"><a href="#加载动画" class="headerlink" title="加载动画"></a>加载动画</h2><ul><li>想用就用，如果使用可能会稍微影响效率</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127135215144.png" alt="image-20240127135215144"></p><ul><li>将enable中false改为true即可</li></ul><h1 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127135236323.png" alt="image-20240127135236323"></p><ul><li>先安装插件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br><span class="line">#or</span><br><span class="line">yarn add hexo-wordcount</span><br></pre></td></tr></table></figure><ul><li>在enable中将false改为true即可</li></ul><h1 id="图片大图查看模式"><a href="#图片大图查看模式" class="headerlink" title="图片大图查看模式"></a>图片大图查看模式</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127135313901.png" alt="image-20240127135313901"></p><ul><li>一般用fancybox,设置为true即可</li></ul><h1 id="标签外挂"><a href="#标签外挂" class="headerlink" title="标签外挂"></a>标签外挂</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127135358917.png" alt="image-20240127135358917"></p><h1 id="Pjax"><a href="#Pjax" class="headerlink" title="Pjax"></a>Pjax</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127135633107.png" alt="image-20240127135633107"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127155523672.png" alt="image-20240127155523672"></p><h1 id="音乐插件aplayerInject"><a href="#音乐插件aplayerInject" class="headerlink" title="音乐插件aplayerInject"></a>音乐插件aplayerInject</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127141930907.png" alt="image-20240127141930907"></p><h1 id="弹窗设置Snackbar"><a href="#弹窗设置Snackbar" class="headerlink" title="弹窗设置Snackbar"></a>弹窗设置Snackbar</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127141951114.png" alt="image-20240127141951114"></p><h1 id="预加载prefetch"><a href="#预加载prefetch" class="headerlink" title="预加载prefetch"></a>预加载prefetch</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127142013959.png" alt="image-20240127142013959"></p><ul><li>建议打开</li></ul><h1 id="pangu"><a href="#pangu" class="headerlink" title="pangu"></a>pangu</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127142021939.png" alt="image-20240127142021939"></p><ul><li>在中文、英文、数字之间自动加上空格</li><li>凭喜好打开</li><li>field有两种参数site（全站生效）post（只在文章页生效）</li></ul><h1 id="图片懒加载Lazyload"><a href="#图片懒加载Lazyload" class="headerlink" title="图片懒加载Lazyload"></a>图片懒加载Lazyload</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127142027598.png" alt="image-20240127142027598"></p><h1 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127142035191.png" alt="image-20240127142035191"></p><h1 id="Open-Graph-meta"><a href="#Open-Graph-meta" class="headerlink" title="Open_Graph_meta"></a>Open_Graph_meta</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127142042263.png" alt="image-20240127142042263"></p><h1 id="CSS前缀"><a href="#CSS前缀" class="headerlink" title="CSS前缀"></a>CSS前缀</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127142048232.png" alt="image-20240127142048232"></p><h1 id="inject插入代码自定义样式"><a href="#inject插入代码自定义样式" class="headerlink" title="inject插入代码自定义样式"></a>inject插入代码自定义样式</h1><ul><li>这一部分要求要有CSS基础</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127142055015.png" alt="image-20240127142055015"></p><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127155655724.png" alt="image-20240127155655724"></p><ul><li><p>在source文件夹下新建一个文件夹，名字任取</p></li><li><p>在该新建的文件夹下创建一个后缀为.css文本</p></li><li><p>在代码行里面引入文件</p></li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/img/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/2024-01-29-09-50-09-image.png"></p><ul><li><p>在href里面引入&#x2F;新建文件夹名称&#x2F;新建文本.css</p></li><li><p>hexo clean + hexo g +hexo s</p></li><li><p>打开本地博客，右键点击审查元素</p></li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/img/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/2024-01-29-09-54-28-image.png"></p><ul><li>找到class或者id，双引号里面的内容</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/img/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/2024-01-29-09-56-31-image.png"></p><ul><li>在新建的.css文档中如此编写</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/img/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/2024-01-29-09-58-59-image.png"></p><h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/image-20240127142146867.png" alt="image-20240127142146867"></p><h1 id="代码压缩（Gulp）"><a href="#代码压缩（Gulp）" class="headerlink" title="代码压缩（Gulp）"></a>代码压缩（Gulp）</h1><ul><li>Gulp是一款自动化构建的工具，拥有众多的插件。我们需要使用插件压缩Html&#x2F;css&#x2F;js</li></ul><h2 id="安装Gulp"><a href="#安装Gulp" class="headerlink" title="安装Gulp"></a>安装Gulp</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --global gulp-cli</span><br><span class="line">npm install gulp -g</span><br></pre></td></tr></table></figure><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><h3 id="压缩Html"><a href="#压缩Html" class="headerlink" title="压缩Html"></a>压缩Html</h3><ul><li>可以使用gulp-htmlclean和gulp-htmlminifier-terser来压缩HTML</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-htmlclean --save-dev</span><br><span class="line">npm install --save gulp-html-minifier-terser</span><br></pre></td></tr></table></figure><h3 id="压缩CSS"><a href="#压缩CSS" class="headerlink" title="压缩CSS"></a>压缩CSS</h3><ul><li>可以使用gulp-clean-css来压缩CSS</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-clean-css --save-dev</span><br></pre></td></tr></table></figure><h3 id="压缩JS"><a href="#压缩JS" class="headerlink" title="压缩JS"></a>压缩JS</h3><ul><li><p>由于Butterfly主题中的JS使用到了部分ES6语法，因此不能使用gulp-uglify来压缩，这需要搭配其他插件。两种方法都可以有效的压缩JS代码，选一种适合自己的。</p></li><li><p>gulp-terser是直接压缩js代码，不会进行转换</p></li><li><p>gulp-babel是一个JavaScript转换编辑器，可以把ES6转换成ES5</p></li><li><p>gulp-terser</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-terser --save-dev</span><br></pre></td></tr></table></figure><ul><li>gulp-uglify + gulp-babel</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-uglify </span><br><span class="line">npm install --save-dev gulp-babel @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure><h3 id="压缩图片"><a href="#压缩图片" class="headerlink" title="压缩图片"></a>压缩图片</h3><p>可以使用gulp-imagemin来压缩图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev gulp-imagemin</span><br></pre></td></tr></table></figure><h3 id="创建gulpfile文件"><a href="#创建gulpfile文件" class="headerlink" title="创建gulpfile文件"></a>创建gulpfile文件</h3><ul><li><p>在Hexo的根目录，创建一个gulpfile.js文件</p></li><li><p>在文件里面输入以下内容</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> cleanCSS = <span class="built_in">require</span>(<span class="string">&#x27;gulp-clean-css&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> babel = <span class="built_in">require</span>(<span class="string">&#x27;gulp-babel&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// minify js - babel（ 如果不是使用bebel,把下面註釋掉）</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;compress&#x27;</span>, <span class="function">() =&gt;</span></span><br><span class="line">  gulp.<span class="title function_">src</span>([<span class="string">&#x27;./public/**/*.js&#x27;</span>, <span class="string">&#x27;!./public/**/*.min.js&#x27;</span>,<span class="string">&#x27;!./public/**/stars.js&#x27;</span>])</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">babel</span>(&#123;</span><br><span class="line">      <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">uglify</span>().<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">cleanCSS</span>(&#123;</span><br><span class="line">      <span class="attr">compatibility</span>: <span class="string">&#x27;ie11&#x27;</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 壓縮 public 目錄內 html</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlclean</span>())</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">htmlmin</span>(&#123;</span><br><span class="line">      <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">// 清除 HTML 註釋</span></span><br><span class="line">      <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">// 壓縮 HTML</span></span><br><span class="line">      <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>, <span class="comment">// 省略布爾屬性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>, <span class="comment">// 刪除所有空格作屬性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">      <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">// 刪除 &lt;script&gt; 的 type=&quot;text/javascript&quot;</span></span><br><span class="line">      <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">// 刪除 &lt;style&gt; 和 &lt;link&gt; 的 type=&quot;text/css&quot;</span></span><br><span class="line">      <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">// 壓縮頁面 JS</span></span><br><span class="line">      <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">// 壓縮頁面 CSS</span></span><br><span class="line">      <span class="attr">minifyURLs</span>: <span class="literal">true</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 壓縮 public/uploads 目錄內圖片</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;minify-images&#x27;</span>, <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  gulp.<span class="title function_">src</span>(<span class="string">&#x27;./public/img/**/*.*&#x27;</span>)</span><br><span class="line">    .<span class="title function_">pipe</span>(<span class="title function_">imagemin</span>(&#123;</span><br><span class="line">      <span class="attr">optimizationLevel</span>: <span class="number">5</span>, <span class="comment">// 類型：Number  預設：3  取值範圍：0-7（優化等級）</span></span><br><span class="line">      <span class="attr">progressive</span>: <span class="literal">true</span>, <span class="comment">// 類型：Boolean 預設：false 無失真壓縮jpg圖片</span></span><br><span class="line">      <span class="attr">interlaced</span>: <span class="literal">false</span>, <span class="comment">// 類型：Boolean 預設：false 隔行掃描gif進行渲染</span></span><br><span class="line">      <span class="attr">multipass</span>: <span class="literal">false</span> <span class="comment">// 類型：Boolean 預設：false 多次優化svg直到完全優化</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;./public/img&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 執行 gulp 命令時執行的任務</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, gulp.<span class="title function_">parallel</span>(</span><br><span class="line">  <span class="string">&#x27;compress&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-images&#x27;</span></span><br><span class="line">))</span><br></pre></td></tr></table></figure><h1 id="博客SEO优化引擎收录"><a href="#博客SEO优化引擎收录" class="headerlink" title="博客SEO优化引擎收录"></a>博客SEO优化引擎收录</h1><h2 id="检查你的博客网站是否被搜索引擎收入"><a href="#检查你的博客网站是否被搜索引擎收入" class="headerlink" title="检查你的博客网站是否被搜索引擎收入"></a>检查你的博客网站是否被搜索引擎收入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">site:你的网站</span><br><span class="line">例如：site:iyheart.github.io</span><br></pre></td></tr></table></figure><h2 id="安装站点地图sitemap"><a href="#安装站点地图sitemap" class="headerlink" title="安装站点地图sitemap"></a>安装站点地图sitemap</h2><p>sitemap，一个页面，上面放置了网站上需要搜索引擎抓取的所有页面链接。站点地图可以告诉搜索引擎网站上可抓取的页面，以便搜索引擎可以更加智能地抓取网站，所以我们首先需要生成一个站点地图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-baidu-sitemap --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>在站点目录配置文件_config.yml，在下面添加：</li></ul><p><img src="/2024/01/24/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/img/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/2024-01-29-10-35-01-image.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 站点地图</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br></pre></td></tr></table></figure><h2 id="推送到服务器"><a href="#推送到服务器" class="headerlink" title="推送到服务器"></a>推送到服务器</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://你的域名/sitemap.xml</span><br><span class="line">https://你的域名/baidusitemap.xml</span><br></pre></td></tr></table></figure><h1 id="上传并浏览PDF文件"><a href="#上传并浏览PDF文件" class="headerlink" title="上传并浏览PDF文件"></a>上传并浏览PDF文件</h1>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python自动化库</title>
      <link href="/2023/12/13/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%BA%93/"/>
      <url>/2023/12/13/python%E8%87%AA%E5%8A%A8%E5%8C%96%E5%BA%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> python库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不定积分方法</title>
      <link href="/2023/12/10/%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95/"/>
      <url>/2023/12/10/%E7%A7%AF%E5%88%86%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="不定积分方法总结"><a href="#不定积分方法总结" class="headerlink" title="不定积分方法总结"></a>不定积分方法总结</h1><h2 id="基本积分法"><a href="#基本积分法" class="headerlink" title="基本积分法"></a>基本积分法</h2><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.948ex;" xmlns="http://www.w3.org/2000/svg" width="41.287ex" height="5.027ex" role="img" focusable="false" viewbox="0 -1361 18248.7 2222"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 1)"><path data-c="222B" d="M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z"/></g><g data-mml-node="mn" transform="translate(1110.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1610.7,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mo" transform="translate(2110.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(2499.7,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3687.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="msup" transform="translate(4687.7,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(5696.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(6085.2,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(6605.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(7455,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(8510.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9010.8,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(9510.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(10262,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(10984.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(11513.2,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(11964.2,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(12397.2,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(12758.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(13287.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(13887.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(14276.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(14848.2,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(15348.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(15877.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(16488.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(17488.7,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.948ex;" xmlns="http://www.w3.org/2000/svg" width="48.922ex" height="5.027ex" role="img" focusable="false" viewbox="0 -1361 21623.6 2222"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 1)"><path data-c="222B" d="M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z"/></g><g data-mml-node="mn" transform="translate(1110.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1610.7,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mo" transform="translate(2110.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(2499.7,0)"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mn" transform="translate(605,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(3730.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msup" transform="translate(4730.7,0)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mn" transform="translate(562,413) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g></g><g data-mml-node="mo" transform="translate(5696.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mi" transform="translate(6085.2,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(6605.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(7455,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(8510.8,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(9010.8,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mn" transform="translate(9510.8,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/></g><g data-mml-node="mi" transform="translate(10010.8,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(10762,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"/></g><g data-mml-node="mi" transform="translate(11484.2,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(11782.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(12382.2,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(12660.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(13049.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(13843.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mi" transform="translate(14843.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(15372.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(15761.7,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mo" transform="translate(16261.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(16650.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(17444.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(18445.1,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mo" transform="translate(18974.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(19363.1,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mo" transform="translate(19863.3,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(20863.6,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.948ex;" xmlns="http://www.w3.org/2000/svg" width="32.487ex" height="5.027ex" role="img" focusable="false" viewbox="0 -1361 14359.1 2222"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 1)"><path data-c="222B" d="M114 -798Q132 -824 165 -824H167Q195 -824 223 -764T275 -600T320 -391T362 -164Q365 -143 367 -133Q439 292 523 655T645 1127Q651 1145 655 1157T672 1201T699 1257T733 1306T777 1346T828 1360Q884 1360 912 1325T944 1245Q944 1220 932 1205T909 1186T887 1183Q866 1183 849 1198T832 1239Q832 1287 885 1296L882 1300Q879 1303 874 1307T866 1313Q851 1323 833 1323Q819 1323 807 1311T775 1255T736 1139T689 936T633 628Q574 293 510 -5T410 -437T355 -629Q278 -862 165 -862Q125 -862 92 -831T55 -746Q55 -711 74 -698T112 -685Q133 -685 150 -700T167 -741Q167 -789 114 -798Z"/></g><g data-mml-node="mi" transform="translate(1110.7,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(1579.7,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(2045.7,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(2478.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mi" transform="translate(3050.7,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g><g data-mml-node="mi" transform="translate(3570.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(4420.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mi" transform="translate(5476.2,0)"><path data-c="1D459" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"/></g><g data-mml-node="mi" transform="translate(5774.2,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(6374.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(6763.2,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(7232.2,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="mi" transform="translate(7698.2,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"/></g><g data-mml-node="mi" transform="translate(8131.2,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(8925.4,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(9925.7,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"/></g><g data-mml-node="mi" transform="translate(10286.7,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"/></g><g data-mml-node="mi" transform="translate(10815.7,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(11415.7,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"/></g><g data-mml-node="mo" transform="translate(11987.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="mo" transform="translate(12598.9,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"/></g><g data-mml-node="mi" transform="translate(13599.1,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g></g></g></svg></mjx-container></p><h2 id="分项积分法"><a href="#分项积分法" class="headerlink" title="分项积分法"></a>分项积分法</h2><h3 id="直接分项型"><a href="#直接分项型" class="headerlink" title="直接分项型"></a>直接分项型</h3><h3 id="真分式型"><a href="#真分式型" class="headerlink" title="真分式型"></a>真分式型</h3><h4 id="分母为一次的真分式"><a href="#分母为一次的真分式" class="headerlink" title="分母为一次的真分式"></a>分母为一次的真分式</h4><h4 id="分母为二次的真分式"><a href="#分母为二次的真分式" class="headerlink" title="分母为二次的真分式"></a>分母为二次的真分式</h4><h4 id="分母为高次的真分式"><a href="#分母为高次的真分式" class="headerlink" title="分母为高次的真分式"></a>分母为高次的真分式</h4><h3 id="假分式型"><a href="#假分式型" class="headerlink" title="假分式型"></a>假分式型</h3><ul><li>化假分式为真分式</li></ul><h2 id="分部积分法"><a href="#分部积分法" class="headerlink" title="分部积分法"></a>分部积分法</h2><h2 id="换元积分法"><a href="#换元积分法" class="headerlink" title="换元积分法"></a>换元积分法</h2><h4 id="基本换元陪凑思想"><a href="#基本换元陪凑思想" class="headerlink" title="基本换元陪凑思想"></a>基本换元陪凑思想</h4><h4 id="根式代换"><a href="#根式代换" class="headerlink" title="根式代换"></a>根式代换</h4><h4 id="三角换元"><a href="#三角换元" class="headerlink" title="三角换元"></a>三角换元</h4><h4 id="指数换元"><a href="#指数换元" class="headerlink" title="指数换元"></a>指数换元</h4><h4 id="倒代换"><a href="#倒代换" class="headerlink" title="倒代换"></a>倒代换</h4><h4 id="欧拉替换法"><a href="#欧拉替换法" class="headerlink" title="欧拉替换法*"></a>欧拉替换法*</h4><h2 id="无理代数函数积分法"><a href="#无理代数函数积分法" class="headerlink" title="无理代数函数积分法"></a>无理代数函数积分法</h2><h2 id="含三角函数的有理式积分法"><a href="#含三角函数的有理式积分法" class="headerlink" title="含三角函数的有理式积分法"></a>含三角函数的有理式积分法</h2><h2 id="组合积分法"><a href="#组合积分法" class="headerlink" title="组合积分法"></a>组合积分法</h2><h2 id><a href="#" class="headerlink" title></a></h2>]]></content>
      
      
      <categories>
          
          <category> 高等数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高等数学上 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟电路</title>
      <link href="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/"/>
      <url>/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h1><ul><li>1.电子管</li><li>2.晶体管</li><li>3.第一台计算机</li></ul><h1 id="常用半导体器件"><a href="#常用半导体器件" class="headerlink" title="常用半导体器件"></a>常用半导体器件</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="本征半导体"><a href="#本征半导体" class="headerlink" title="本征半导体"></a>本征半导体</h3><p>一、半导体</p><ol><li>概念：半导体是导电能力介于导体和绝缘体之间的材料</li><li>本征半导体：纯净的具有晶体结果的半导体</li></ol><p>二、本征半导体的晶体结构</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231208130541516.png" alt="image-20231208130541516"></p><ul><li>价电子导不了电，只有自由电子才导得了电</li></ul><p>三、载流子</p><ol><li>本征激发</li></ol><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231208131025937.png" alt="image-20231208131025937"></p><ol start="2"><li>自由电子</li></ol><ul><li>在化学物质结构中，元素的原子存在基态和激发态</li><li>基态原子是原子外电子排布能量最小的一种排布，当电子获得一定的能量，就会发生轨道跃迁，原子便从基态变为激发态。</li><li>当电子获得足够能量就会从原子轨道脱离形成自由电子。</li></ul><ol start="2"><li>空穴</li></ol><ul><li><p>在半导体结构中硅原子与硅原子之间形成共用电子对也就是（共价键），当获得能量的时候电子脱离轨道，形成自由电子。而共价键里面就缺了一个电子形成了空穴</p></li><li><p>空穴的相对移动：在外加电场的作用下，处于形成电子对中的一个原子会被吸引到空穴中，这时该电子补充了空穴，但是在该电子原来的位置上又形成了空穴。按此重复，空穴就相对移动了。</p></li></ul><ol start="3"><li>复合</li></ol><ul><li><p>自由电子在半导体内部自由运动，有一定的概率会运动到空穴里面，当自由电子与空穴结合后，自由电子就不再是自由电子了，而变成了共价键（电子对）。这个自由电子消失的过程就是复合。</p></li><li><p>本征激发和复合的速度还有温度决定了载流子的浓度</p></li></ul><p>四、载流子的浓度 </p><h3 id="杂质半导体"><a href="#杂质半导体" class="headerlink" title="杂质半导体"></a>杂质半导体</h3><p>一、概念</p><ul><li>掺入少量的杂质元素</li></ul><p>二、N(negative)型半导体</p><ol><li>掺入磷 P</li></ol><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231209123329019.png" alt="image-20231209123329019"></p><ol start="2"><li><p>多子</p></li><li><p>少子</p></li></ol><p>三、P（positive）型半导体</p><ol><li>掺入硼 B</li></ol><h3 id="PN结"><a href="#PN结" class="headerlink" title="PN结"></a>PN结</h3><p>一、PN结的形成</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231209124743622.png" alt="image-20231209124743622"></p><ol><li>扩散运动</li><li>空间电荷区：耗尽层、阻挡层、PN结</li><li>漂移运动</li><li>对称结、不对称结</li></ol><p>二、PN结单向导电性</p><ol><li>外加正向电压</li><li>死区</li><li>反向饱和电流</li></ol><p>三、PN结的电流方程<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="16.679ex" height="2.7ex" role="img" focusable="false" viewbox="0 -943.3 7372.2 1193.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mo" transform="translate(622.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(1678.6,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g></g><g data-mml-node="mo" transform="translate(2533.2,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(2922.2,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="TeXAtom" transform="translate(499,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(767,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="msub" transform="translate(1267,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(5483,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(6483.2,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(6983.2,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="33.216ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 14681.5 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(504,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g><g data-mml-node="mi" transform="translate(973,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(1973,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">反</text></g><g data-mml-node="mi" transform="translate(2973,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(3973,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">电</text></g><g data-mml-node="mi" transform="translate(4973,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">流</text></g><g data-mml-node="mo" transform="translate(5973,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(6417.7,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g><g data-mml-node="mi" transform="translate(7681.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(8681.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">一</text></g><g data-mml-node="mi" transform="translate(9681.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">个</text></g><g data-mml-node="mi" transform="translate(10681.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">温</text></g><g data-mml-node="mi" transform="translate(11681.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">度</text></g><g data-mml-node="mi" transform="translate(12681.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">当</text></g><g data-mml-node="mi" transform="translate(13681.5,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">量</text></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="19.451ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 8597.4 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">室</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">温</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">下</text></g><g data-mml-node="msub" transform="translate(3000,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g><g data-mml-node="mo" transform="translate(4541.6,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mn" transform="translate(5597.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"/><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"/></g><g data-mml-node="mi" transform="translate(6597.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">毫</text></g><g data-mml-node="mi" transform="translate(7597.4,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">伏</text></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="21.281ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 9406 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(767,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(1767,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mi" transform="translate(2518,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g><g data-mml-node="mi" transform="translate(3406,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">上</text></g><g data-mml-node="mi" transform="translate(4406,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">所</text></g><g data-mml-node="mi" transform="translate(5406,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">加</text></g><g data-mml-node="mi" transform="translate(6406,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(7406,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">电</text></g><g data-mml-node="mi" transform="translate(8406,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">压</text></g></g></g></svg></mjx-container></p><ul><li><p>一般来说PN结的导通电压   锗管是0.2——0.3V，硅管是0.6——0.7</p></li><li><p>下图为PN结伏安特性的理想图像</p></li></ul><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231209130421474.png" alt="image-20231209130421474"> </p><ul><li>下图为PN结伏安特性的实际图像</li></ul><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231209130747671.png" alt="image-20231209130747671"></p><p>​为什么在制作N型半导体时掺杂五价原子？而不是掺杂六价原子甚至七价原子，不是自由电子更多吗？</p><p>四、PN结的伏安特性</p><ol><li>正向特性</li></ol><p>​死区：是伏安图像上的电压区间，而不是PN结里面的电场区域</p><ol start="2"><li>反向特性</li></ol><p>​反向饱和电流锗管的PN结比硅管的PN结大得多</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231209152814245.png" alt="image-20231209152814245"></p><p>当外加的反向电压足够大时，会出现反向电流的增大，这个现象就称为反向击穿</p><ol start="3"><li>反向击穿（两种）</li></ol><ul><li>雪崩击穿：温度越高，雪崩击穿所需的击穿电压越高</li><li>齐纳击穿：温度越高，齐纳击穿所需的击穿电压越低</li><li>注意：PN结坏并不是因为反向击穿，而是因为反向击穿使得二极管温度升高，高温度使得PN结成为导体或者被熔断了，因此PN结能使用在方向击穿中，但是不能使得PN结温度过高，这样就会导致热击穿（使得半导体损坏）</li><li>利用反向击穿特性就可以制作成稳压二极管</li><li>热击穿（二次击穿）</li></ul><p>五、PN结的电容效应</p><ol><li>势垒电容（非线性电容）</li></ol><ul><li>可以做可变电容</li></ul><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231209221809004.png" alt="image-20231209221809004"></p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231209221959699.png" alt="image-20231209221959699"></p><ol start="2"><li>扩散电容</li></ol><ul><li>由非平衡少子和电压之间的关系构成的</li></ul><h2 id="半导体二极管"><a href="#半导体二极管" class="headerlink" title="半导体二极管"></a>半导体二极管</h2><h3 id="常见结构"><a href="#常见结构" class="headerlink" title="常见结构"></a>常见结构</h3><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231209222941249.png" alt="image-20231209222941249"></p><ul><li>图c的结构用于集成电路</li></ul><h3 id="伏安特性"><a href="#伏安特性" class="headerlink" title="伏安特性"></a>伏安特性</h3><p>一、伏安特性</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231209225948338.png" alt="image-20231209225948338"></p><ol><li>由于体电阻（由于半导体是被封装的PN结，而被封装的外壳是有电阻的，这个电阻就被称为体电阻）的存在，使得在相同的电压下，二极管的电流比PN结小</li><li>反向的电流大一些</li></ol><p>二、温度的影响</p><ol><li>温度T升高，二极管的伏安特性曲线正向电压部分往左移，反向电压部分往下移。（即死区电压会减小，反向电流会增大）</li></ol><ul><li>原因： 当温度升高的时候，分子热运动变强，电子的热激发也变强，使得自由电子更多，同样的空穴也会增多。</li><li>当处在不同温度下的俩个相同二极管，接通相同的电压，由于温度高的二极管多子（在P极多子就是正电子，N极多子就是电子）的数目变多，被正向电压发射出去的自由电子也变多，电流就会增大。</li><li>同样的，当接入相同的反向电压时，少子增多会导致被发射出去的少子也增多，反向电流也就增大了</li></ul><ol start="2"><li>室温下，每升高1℃，正向压降减小2-2.5mv。每升高10℃，反向电流增大一倍</li></ol><ul><li>二极管的正向具有稳压和钳制电位的作用，二极管的反向可以作为温度传感器（非常便宜）还可以作为稳压二极管</li></ul><h3 id="二极管的主要参数"><a href="#二极管的主要参数" class="headerlink" title="二极管的主要参数"></a>二极管的主要参数</h3><p>一、最大整流电流<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.339ex;" xmlns="http://www.w3.org/2000/svg" width="2.381ex" height="1.885ex" role="img" focusable="false" viewbox="0 -683 1052.6 833"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"/></g></g></g></g></svg></mjx-container></p><ul><li>定义：二极管长期工作时，所能够通过的正向平均电流的最大值</li></ul><p>二、 最高反向工作电压<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.373ex;" xmlns="http://www.w3.org/2000/svg" width="2.947ex" height="1.918ex" role="img" focusable="false" viewbox="0 -683 1302.7 847.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g></g></g></g></svg></mjx-container><br>三、未击穿时的反向电流<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.373ex;" xmlns="http://www.w3.org/2000/svg" width="2.397ex" height="1.918ex" role="img" focusable="false" viewbox="0 -683 1059.7 847.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="27.284ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 12059.7 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g></g><g data-mml-node="mi" transform="translate(1059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">越</text></g><g data-mml-node="mi" transform="translate(2059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">小</text></g><g data-mml-node="mi" transform="translate(3059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">反</text></g><g data-mml-node="mi" transform="translate(4059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">向</text></g><g data-mml-node="mi" transform="translate(5059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">截</text></g><g data-mml-node="mi" transform="translate(6059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">止</text></g><g data-mml-node="mi" transform="translate(7059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(8059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">特</text></g><g data-mml-node="mi" transform="translate(9059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">性</text></g><g data-mml-node="mi" transform="translate(10059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">越</text></g><g data-mml-node="mi" transform="translate(11059.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">小</text></g></g></g></svg></mjx-container></p><p>四、最高工作频率<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="2.978ex" height="2.059ex" role="img" focusable="false" viewbox="0 -705 1316.2 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"/></g><g data-mml-node="mi" transform="translate(523,-150) scale(0.707)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"/></g></g></g></g></svg></mjx-container></p><h3 id="二极管的等效电路"><a href="#二极管的等效电路" class="headerlink" title="二极管的等效电路"></a>二极管的等效电路</h3><p>二极管的电阻是非线性电阻，因此人们往往将这种非线元件等效成一个线性元件来表述出来，放大电路的微变等效电路正是如此</p><p>一、等效电路</p><p>两种档次：</p><ul><li>在一定条件下他们的外特性等效，电压和电流输出的关系近视等效</li><li>根据二极管的原理，把二极管的每一步分用线性原件等效出来，这样的等效出来的结果与二极管的真实数值更接近</li></ul><p>二、伏安特性折线化</p><ul><li>适用于二极管在直流电路的等效分析</li></ul><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210101815195.png"></p><ul><li>二极管的整流</li></ul><p>三、二极管的微变等效<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.556ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5107.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(484,-150) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g><g data-mml-node="mo" transform="translate(1179.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2235.3,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3499.1,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="msub" transform="translate(3999.1,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g></g></g></g></svg></mjx-container><br>推导过程：<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.192ex" height="2.7ex" role="img" focusable="false" viewbox="0 -943.3 8040.7 1193.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g></g><g data-mml-node="mo" transform="translate(1291.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2347,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"/></g></g><g data-mml-node="mo" transform="translate(3201.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msup" transform="translate(3590.7,0)"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"/></g><g data-mml-node="TeXAtom" transform="translate(499,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(767,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="msub" transform="translate(1267,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g><g data-mml-node="mo" transform="translate(6151.4,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="mn" transform="translate(7151.7,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"/></g><g data-mml-node="mo" transform="translate(7651.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.308ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 6766.2 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"/></g><g data-mml-node="msub" transform="translate(833,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(2184.5,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(2684.5,0)"><path data-c="394" d="M51 0Q46 4 46 7Q46 9 215 357T388 709Q391 716 416 716Q439 716 444 709Q447 705 616 357T786 7Q786 4 781 0H51ZM507 344L384 596L137 92L383 91H630Q630 93 507 344Z"/></g><g data-mml-node="msub" transform="translate(3517.5,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g></g><g data-mml-node="mo" transform="translate(4808.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(5864.5,0)"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(484,-150) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g></g></g></svg></mjx-container></p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210103558545.png"></p><p>先进行静态分析，将交流电压源置零（当做导线）</p><p>此时<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="18.521ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 8186.1 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g><g data-mml-node="mo" transform="translate(1168.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="mo" transform="translate(2224.3,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(2613.3,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"/></g><g data-mml-node="mo" transform="translate(3604.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"/></g><g data-mml-node="msub" transform="translate(4604.7,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="TeXAtom" transform="translate(716,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g><g data-mml-node="mi" transform="translate(763,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g></g></g><g data-mml-node="mo" transform="translate(6538.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(6927.1,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="mi" transform="translate(7427.1,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"/></g></g></g></svg></mjx-container></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="11.556ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5107.5 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(484,-150) scale(0.707)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"/></g></g><g data-mml-node="mo" transform="translate(1179.5,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"/></g><g data-mml-node="msub" transform="translate(2235.3,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="mi" transform="translate(716,-150) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(3499.1,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"/></g></g><g data-mml-node="msub" transform="translate(3999.1,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="mi" transform="translate(473,-150) scale(0.707)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g></g></g></g></svg></mjx-container><br>从而将二极管等效为一个电阻进行普通电路的分析</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210111754388.png" alt="image-20231210111754388"></p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210113817748.png" alt="image-20231210113817748"></p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210113844770.png" alt="image-20231210113844770"></p><ul><li>二极管的微变等效电阻本质上是用直流电流与二极管等效一个电阻，微变等效电阻出来后，进行动态分析的时候，直流电源要置零。</li><li>类似与叠加原理（但不完全等同，叠加定理是应用于线性网络的）</li></ul><p>分析一个二极管上面交流的响应必须分为两步骤</p><ol><li><p>必须知道二极管是工作在怎样的一个直流环境下，直流将决定后面交流的这种变化，决定了交流的响应</p></li><li><p>分析交流电路（动态分析）</p></li></ol><h3 id="稳压二极管"><a href="#稳压二极管" class="headerlink" title="稳压二极管"></a>稳压二极管</h3><p>一、特点：在反向击穿后，在很大一个电流变化范围内，它的输出电压变化很小（近似与不变）</p><ul><li>反向击穿是可逆的（二极管可以恢复到原来的状态）</li><li>热击穿是不可逆的（巨大的热量使得二极管熔断或者变成导体）</li><li>稳压二极管的分装与普通二极管不同，该封装要容易散热</li></ul><p>二、伏安特性</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210114447575.png" alt="image-20231210114447575"></p><p>三、主要参数</p><ol><li>温度系数</li></ol><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.448ex" height="1.025ex" role="img" focusable="false" viewbox="0 -442 640 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FC" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"/></g></g></g></svg></mjx-container></p><p>温度每变化1℃，稳定电压的变化量</p><p>以</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210141144077.png" alt="image-20231210141144077"></p><h2 id="双极晶体管（BJT）（半导体三极管）"><a href="#双极晶体管（BJT）（半导体三极管）" class="headerlink" title="双极晶体管（BJT）（半导体三极管）"></a>双极晶体管（BJT）（半导体三极管）</h2><h3 id="结构及类型"><a href="#结构及类型" class="headerlink" title="结构及类型"></a>结构及类型</h3><p>一、构成方式</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210144123623.png" alt="image-20231210144123623"></p><p>二、结构：三个区域、三个电极、两个PN结</p><h3 id="电流放大作用"><a href="#电流放大作用" class="headerlink" title="电流放大作用"></a>电流放大作用</h3><p>一、放大</p><p>通过控制能量的新的一个变化，来实现这种放大，放大绝对不能失真</p><p>电流放大倍数<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewbox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"/></g></g></g></svg></mjx-container><br>二、基本共射放大电路</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210150301497.png" alt="image-20231210150301497"></p><p>正向偏置（正向导通）</p><p>反向偏置（反向导通）</p><p>三、内部载流子的运动</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210150811098.png" alt="image-20231210150811098"></p><ol><li>发射结正偏</li></ol><p>发射区的自由电子向基区扩散<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="36.933ex" height="2.149ex" role="img" focusable="false" viewbox="0 -750 16324.3 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">由</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="msub" transform="translate(2000,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="TeXAtom" transform="translate(473,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mi" transform="translate(764,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g></g></g><g data-mml-node="mi" transform="translate(3594.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">远</text></g><g data-mml-node="mi" transform="translate(4594.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">小</text></g><g data-mml-node="mi" transform="translate(5594.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">于</text></g><g data-mml-node="msub" transform="translate(6594.3,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="TeXAtom" transform="translate(473,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mi" transform="translate(764,0)"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"/></g></g></g><g data-mml-node="mo" transform="translate(8285.4,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"/></g><g data-mml-node="msub" transform="translate(8730.1,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="TeXAtom" transform="translate(473,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mi" transform="translate(764,0)"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g></g></g><g data-mml-node="mi" transform="translate(10324.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">近</text></g><g data-mml-node="mi" transform="translate(11324.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">似</text></g><g data-mml-node="mi" transform="translate(12324.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">忽</text></g><g data-mml-node="mi" transform="translate(13324.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">略</text></g><g data-mml-node="mi" transform="translate(14324.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">不</text></g><g data-mml-node="mi" transform="translate(15324.3,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">计</text></g></g></g></svg></mjx-container></p><ol start="2"><li>基区——扩散、复合、产生</li></ol><p>N区扩散过来的非平衡少子，比P区的多子还要多，此时N区扩散的少子就会继续前进到集电结</p><ol start="3"><li>基电区收集自由电子</li></ol><p>四、放大系数</p><ol><li>共射的直流放大倍数</li></ol><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210153306520.png" alt="image-20231210153306520"></p><p>交流电流放大倍数（数值与直流放大倍数相近）</p><p> <img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210153452563.png" alt="image-20231210153452563"></p><ol start="2"><li>穿透电流</li></ol><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="4.842ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 2140.2 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="TeXAtom" transform="translate(473,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g><g data-mml-node="mi" transform="translate(1524,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g></g></g></g></g></svg></mjx-container></p><ol start="3"><li>反向电流</li></ol><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.375ex;" xmlns="http://www.w3.org/2000/svg" width="4.834ex" height="1.92ex" role="img" focusable="false" viewbox="0 -683 2136.6 848.6"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"/></g><g data-mml-node="TeXAtom" transform="translate(473,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"/></g><g data-mml-node="mi" transform="translate(760,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mi" transform="translate(1519,0)"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"/></g></g></g></g></g></svg></mjx-container></p><ol start="4"><li>共基</li></ol><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210192314411.png" alt="image-20231210192314411"></p><h1 id="基本放大电路"><a href="#基本放大电路" class="headerlink" title="基本放大电路"></a>基本放大电路</h1><h2 id="放大电路的构成"><a href="#放大电路的构成" class="headerlink" title="放大电路的构成"></a>放大电路的构成</h2><h3 id="放大的概念"><a href="#放大的概念" class="headerlink" title="放大的概念"></a>放大的概念</h3><p>放大是放大功率，进来的是小电压小电流，而出去的是大电压和大电流</p><p>一、特征：功率的放大</p><p>二、本质：能量在控制下的转换，放大电路一定是有外界电源提供能量。</p><p>三、必要条件：有能量控制的元件，有源元件。</p><p>四、放大的前提条件：不失真</p><p>五、测试信号：正弦波</p><h3 id="怎样构建基本放大电路"><a href="#怎样构建基本放大电路" class="headerlink" title="怎样构建基本放大电路"></a>怎样构建基本放大电路</h3><p>一、目标：小功率信号变成大功率</p><p>二、条件：1.元件  2. 电源 </p><p>三、技术路线（理解为什么这么设计，先想如何设计）</p><ol><li>三极管：工作在放大状态</li><li>小信号</li></ol><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="12.637ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 5585.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">控</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">制</text></g><g data-mml-node="msub" transform="translate(2000,0)"><g data-mml-node="mi"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"/></g><g data-mml-node="mi" transform="translate(378,-150) scale(0.707)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g></g><g data-mml-node="mo" transform="translate(2964.7,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="msub" transform="translate(3353.7,0)"><g data-mml-node="mi"><path data-c="1D448" d="M107 637Q73 637 71 641Q70 643 70 649Q70 673 81 682Q83 683 98 683Q139 681 234 681Q268 681 297 681T342 682T362 682Q378 682 378 672Q378 670 376 658Q371 641 366 638H364Q362 638 359 638T352 638T343 637T334 637Q295 636 284 634T266 623Q265 621 238 518T184 302T154 169Q152 155 152 140Q152 86 183 55T269 24Q336 24 403 69T501 205L552 406Q599 598 599 606Q599 633 535 637Q511 637 511 648Q511 650 513 660Q517 676 519 679T529 683Q532 683 561 682T645 680Q696 680 723 681T752 682Q767 682 767 672Q767 650 759 642Q756 637 737 637Q666 633 648 597Q646 592 598 404Q557 235 548 205Q515 105 433 42T263 -22Q171 -22 116 34T60 167V183Q60 201 115 421Q164 622 164 628Q164 635 107 637Z"/></g><g data-mml-node="TeXAtom" transform="translate(716,-150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"/></g><g data-mml-node="mi" transform="translate(759,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"/></g></g></g><g data-mml-node="mo" transform="translate(5196.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p><ol start="3"><li>合理的输出</li></ol><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210195753091.png" alt="image-20231210195753091"></p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210195804088.png" alt="image-20231210195804088"></p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210195850568.png" alt="image-20231210195850568"></p><p>四、放大电路</p><ol><li>直接耦合</li></ol><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210201737675.png" alt="image-20231210201737675"></p><ol start="2"><li>阻容耦合：电容的作用隔直流，通交流</li></ol><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210222527485.png"></p><p>对电容也有要求，容量比较大的电解电容（有正负极）</p><p>五、工作原理</p><p><img src="/2023/12/07/%E6%A8%A1%E6%8B%9F%E7%94%B5%E8%B7%AF/image-20231210222754302.png" alt="image-20231210222754302"></p><h1 id="分立器件"><a href="#分立器件" class="headerlink" title="分立器件"></a>分立器件</h1><h1 id="集成器件"><a href="#集成器件" class="headerlink" title="集成器件"></a>集成器件</h1>]]></content>
      
      
      <categories>
          
          <category> 模电 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模电系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字电路</title>
      <link href="/2023/12/04/%E7%AC%AC%E4%B8%80%E7%AB%A0%E9%80%BB%E8%BE%91%E4%BB%A3%E6%95%B0%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/12/04/%E7%AC%AC%E4%B8%80%E7%AB%A0%E9%80%BB%E8%BE%91%E4%BB%A3%E6%95%B0%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="数字技术的发展及其应用（了解）"><a href="#数字技术的发展及其应用（了解）" class="headerlink" title="数字技术的发展及其应用（了解）"></a>数字技术的发展及其应用（了解）</h2><h3 id="集成电路的发展"><a href="#集成电路的发展" class="headerlink" title="集成电路的发展"></a>集成电路的发展</h3><p>集成电路是什么？</p><p>作为初学者可以把集成电路当做是一个CPU，但是集成电路不仅仅有CPU，还有其他的。</p><ul><li><p>60-70年代 </p><p>IC技术迅速发展：SSI、MSI、LSI、VLSI</p></li></ul><p>​IC（integrated circuit）集成电路</p><p>​SSI小规模集成电路</p><p>​MSI中规模集成电路</p><p>​LSI大规模集成电路</p><p>​VLSI超大规模集成电路</p><ul><li><p>80年代后 </p><p>ULSI，ASIC 制作技术成熟</p></li></ul><p>​ULSI盛大规模集成电路</p><p>​ASIC专用集成电路</p><ul><li><p>90年代后</p><p>一片集成电路上有40亿个晶体管</p></li><li><p>目前</p></li></ul><p>​芯片内部的布线细微到纳米</p><p>​微处理器的时钟频率高达3GHz（10^9Hz）</p><ul><li><p>将来</p><p>高分子材料或生物材料制成密度更高、三维结构的电路</p></li></ul><h3 id="电子器件的发展"><a href="#电子器件的发展" class="headerlink" title="电子器件的发展"></a>电子器件的发展</h3><ul><li><p>电子管时代</p></li><li><p>晶体管时代</p></li><li><p>半导体集成电路</p><ul><li>1958年9月12日美国德州仪器的一个工程师杰克·基尔比研制出了世界上第一块集成电路。</li><li>做实验的一些芯片就是半导体集成电路</li></ul></li></ul><h3 id="电路设计方法"><a href="#电路设计方法" class="headerlink" title="电路设计方法"></a>电路设计方法</h3><ul><li>传统的设计方法<ul><li>采用自下而上的设计方法，先组装电路，再进行调试</li></ul></li><li>现代的设计方法<ul><li>采用自上而下的设计方法，先用计算机的软件进行电路的设计、分析、仿真、修改，之后再组装电路</li></ul></li></ul><h3 id="EDA技术"><a href="#EDA技术" class="headerlink" title="EDA技术"></a>EDA技术</h3><ul><li>EDA技术以计算机为基本工具、借助于软件设计平台，自动完成数字系统的仿真、逻辑综合、布局布线等工作。最后下载到芯片，实现系统功能，    使硬件设计软件化。</li></ul><h3 id="数字技术的应用"><a href="#数字技术的应用" class="headerlink" title="数字技术的应用"></a>数字技术的应用</h3><ul><li>电脑、数码相机、智能家居等</li></ul><h2 id="数字集成电路的分类及特点（了解）"><a href="#数字集成电路的分类及特点（了解）" class="headerlink" title="数字集成电路的分类及特点（了解）"></a>数字集成电路的分类及特点（了解）</h2><h3 id="数字集成电路的分类"><a href="#数字集成电路的分类" class="headerlink" title="数字集成电路的分类"></a>数字集成电路的分类</h3><ul><li><p>按照电路的结果特点及对输入信号的相应规则</p><ul><li>组合逻辑电路</li><li>时序逻辑电路</li></ul></li><li><p>按电路的形式</p><ul><li>集成电路</li><li>分立电路</li></ul></li><li><p>按器件不同</p><ul><li>TTL电路</li><li>CMOS电路</li></ul></li><li><p>按集成度不同</p><p>集成度：每一个芯片所包含的门（电路）个数。</p><ul><li>SSI</li><li>MSI</li><li>LSI</li><li>VLSI</li><li>ULSI</li></ul></li></ul><h3 id="数字电路的分析、设计与测试"><a href="#数字电路的分析、设计与测试" class="headerlink" title="数字电路的分析、设计与测试"></a>数字电路的分析、设计与测试</h3><ul><li><p>数字电路的分析方法</p><ul><li><p>根据电路确定电路输出与输入之间的逻辑关系，说明电路实现的逻辑功能</p></li><li><p>分析工具：逻辑代数</p><p>电路逻辑功能主要用真值表、逻辑图、逻辑表达式和卡诺图、波形图。</p></li></ul></li><li><p>数字电路的设计方法</p><ul><li>自底向上</li><li>自顶向下</li></ul></li></ul><h2 id="数字信号和数字电路"><a href="#数字信号和数字电路" class="headerlink" title="数字信号和数字电路"></a>数字信号和数字电路</h2><ul><li>电子电路分类<ul><li>模拟电路：处理模拟信号的电路</li><li>数字电路：处理数字信号的电路</li></ul></li></ul><h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><h2 id="各种进制"><a href="#各种进制" class="headerlink" title="各种进制"></a>各种进制</h2><h3 id="十进制"><a href="#十进制" class="headerlink" title="十进制"></a>十进制</h3><h3 id="二进制"><a href="#二进制" class="headerlink" title="二进制"></a>二进制</h3><h3 id="八进制"><a href="#八进制" class="headerlink" title="八进制"></a>八进制</h3><h3 id="十六进制"><a href="#十六进制" class="headerlink" title="十六进制"></a>十六进制</h3><h2 id="进制转化"><a href="#进制转化" class="headerlink" title="进制转化"></a>进制转化</h2><h3 id="二、八、十六进制转换为十进制"><a href="#二、八、十六进制转换为十进制" class="headerlink" title="二、八、十六进制转换为十进制"></a>二、八、十六进制转换为十进制</h3><h1 id="逻辑代数"><a href="#逻辑代数" class="headerlink" title="逻辑代数"></a>逻辑代数</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li><p>用于描述客观事物逻辑关系的数学工具，又称布尔代数或开关代数</p></li><li><p>逻辑指事物因果关系的规律</p></li><li><p>与普通代数比较：</p><ul><li>相似处：都是用字母表示变量，用代数式描述客观事物间的关系。</li><li>不同点：<ul><li>逻辑代数描述客观事物间的逻辑关系，相应的函数称逻辑函数，变量称逻辑变量</li><li>逻辑变量和逻辑函数的取值都只有两个，通常用1和0表示；</li><li>运算规律有很多不同</li></ul></li></ul></li><li><p>注意：逻辑代数中的1和0不表示数量大小，仅表示两种相反的状态。</p></li><li><p>逻辑体制</p><ul><li>正逻辑体制：规定高电平为逻辑1、低电平为逻辑0</li><li>负逻辑体制：规定高电平为逻辑0、低电平为逻辑1</li><li>通常未加说明，则为“正逻辑”体制。</li></ul></li></ul><h3 id="基本逻辑运算"><a href="#基本逻辑运算" class="headerlink" title="基本逻辑运算"></a>基本逻辑运算</h3><h4 id="与运算"><a href="#与运算" class="headerlink" title="与运算"></a>与运算</h4><ul><li>决定某一事件的所有条件都具备时，该事件才发生。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数电 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言练习题</title>
      <link href="/2023/11/29/C%E8%AF%AD%E8%A8%80%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/2023/11/29/C%E8%AF%AD%E8%A8%80%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="课内编程作业"><a href="#课内编程作业" class="headerlink" title="课内编程作业"></a>课内编程作业</h1><h2 id="编程作业"><a href="#编程作业" class="headerlink" title="编程作业"></a>编程作业</h2><h3 id="作业1"><a href="#作业1" class="headerlink" title="作业1"></a>作业1</h3><h4 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h4><h3 id="作业9"><a href="#作业9" class="headerlink" title="作业9"></a>作业9</h3><h4 id="题目1-1"><a href="#题目1-1" class="headerlink" title="题目1"></a>题目1</h4><p>编写一个函数int add(int n)，使用递归算法求1+2+3+…+n，在main函数中输入n，调用add函数后并输出计算结果。例如：</p><p>输入：10，输出：55</p><p>输出：100，输出：5050</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, sum;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">sum = add(n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(n &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> (add(n<span class="number">-1</span>) + n);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h4><p>编写一个函数void string_copy(char *f,char *t)，功能是将f字符串得到t中，在main函数中定义两个字符数组char x[100], y[100]，输入x字符串，调用string_copy函数将x字符串复制到y中，输出y字符串。例如：</p><p>输入：12345，输出：12345</p><p>输入：abcde，输出：abcde</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">string_copy</span><span class="params">(<span class="type">char</span> *f, <span class="type">char</span> *t)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> x[<span class="number">100</span>], y[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, x);</span><br><span class="line"></span><br><span class="line">string_copy(x,y);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">string_copy</span><span class="params">(<span class="type">char</span> *f, <span class="type">char</span> *t)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(t,f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h4><p>编写一个从小到大排序（选择法）函数void sort(char (*p)[10],int n)，其中n为整数个数。在main函数中输入n并输入n个国家英文名称，调用排序函数后输出。例如：</p><p>输入：5 China France Britain Russia America</p><p>输出：America Britain China France Russia</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">char</span> (*p)[<span class="number">10</span>],<span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">100</span>][<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; n; m++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch[m]);</span><br><span class="line"></span><br><span class="line">sort(ch,n);</span><br><span class="line"><span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; n; m++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,ch[m]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">char</span> (*p)[<span class="number">10</span>], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> m, j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(m = <span class="number">0</span>; m &lt; n<span class="number">-1</span>; m++)</span><br><span class="line"><span class="keyword">for</span>(j = m+<span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">strcmp</span>(p[m],p[j]) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(a, p[m]);</span><br><span class="line"><span class="built_in">strcpy</span>(p[m],p[j]);</span><br><span class="line"><span class="built_in">strcpy</span>(p[j],a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作业111"><a href="#作业111" class="headerlink" title="作业111"></a>作业111</h3><h4 id="题目1-2"><a href="#题目1-2" class="headerlink" title="题目1"></a>题目1</h4><p>有n个学生，每个学生的数据包括姓名（10个字符）、出生日期（年-月-日），编写程序，功能是在main函数中输入n个学生信息，调用void sort(struct student stu[],int n)函数（按姓名从小到大排序）排序以后仍在main()中输出排序后的n个学生信息。输出时姓名和出生日期间用一个空格隔开，出生日期的输入输出格式为：yyyy-mm-dd。</p><p>例如:</p><p>输入：2</p><p>​     zhangsan</p><p>​     2004-2-10</p><p>​     lisi</p><p>​     2003-11-20</p><p>输出：lisi 2003-11-20</p><pre><code>   #include&lt;stdio.h&gt;   #include&lt;string.h&gt;   #define LEN 50   struct student&#123;       char name[10];       int year;       int month;       int day;   &#125;;      void sort(struct student stu[], int n);      int main(void)   &#123;       int n, i;       struct student stu[LEN];       scanf(&quot;%d&quot;, &amp;n);              for (i = 0; i &lt; n; i++)       &#123;           scanf(&quot;%s%d-%d-%d&quot;, stu[i].name,&amp;stu[i].year, &amp;stu[i].month, &amp;stu[i].day);       &#125;              sort(stu, n);              for(i = 0; i &lt; n; i++)       &#123;           printf(&quot;%s %d-%d-%d&quot;, stu[i].name,stu[i].year,stu[i].month,stu[i].day);           printf(&quot;\n&quot;);       &#125;              return 0;   &#125;      void sort(struct student stu[], int n)   &#123;       struct student change;       int i,j;              for (i = 0; i &lt; n-1; i++)           &#123;               for(j = i + 1; j &lt; n; j++)               &#123;                   if(strcmp(stu[i].name,stu[j].name) &gt; 0)                   &#123;                       change = stu[i];                       stu[i] = stu[j];                       stu[j] = change;                   &#125;               &#125;           &#125;   &#125;</code></pre><h4 id="题目2-1"><a href="#题目2-1" class="headerlink" title="题目2"></a>题目2</h4><p>编写一程序，功能是使用尾插法创建一个带有头结点的链表并输出。要求：先定义一个结构体，每个结点包含书号（10个字符）、书名（20个字符，不含空格）和价格（float型）等信息；然后编写一函数struct book *CreateLink()用于创建指定个数（个数n由键盘输入）的链表和函数void PrintLink(struct book *h)用于输出链表信息；最后在main中调用CreateLink和PrintLink函数。输入输出时每个数据间用一个空格隔开，价格的小数保留2位。例如：</p><p>输入：2</p><p>​     00001 yuwen 18.20</p><p>​     00002 shuxue 21.59</p><p>输出：00001 yuwen 18.20</p><p>​     00002 shuxue 21.59 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span>&#123;</span></span><br><span class="line"><span class="type">char</span> book_number[<span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> book_name[<span class="number">20</span>];</span><br><span class="line"><span class="type">float</span> value;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> book *<span class="title function_">Createlink</span><span class="params">(<span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintLink</span><span class="params">(<span class="keyword">struct</span> book*h)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> *<span class="title">h</span>;</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">h = Createlink(n);</span><br><span class="line">PrintLink(h);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> book *<span class="title function_">Createlink</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> *<span class="title">h</span>, *<span class="title">p</span>, *<span class="title">r</span>;</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line">h = (<span class="keyword">struct</span> book*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(book));</span><br><span class="line">h-&gt;value = <span class="literal">NULL</span>;</span><br><span class="line">r = h;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">p = (<span class="keyword">struct</span> book*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(book));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, p-&gt;book_number);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, p-&gt;book_name);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;(p-&gt;value));</span><br><span class="line">r-&gt;next = p;</span><br><span class="line">p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">r = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">PrintLink</span><span class="params">(<span class="keyword">struct</span> book*h)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">book</span> *<span class="title">p</span>;</span></span><br><span class="line">p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s %.2f\n&quot;</span>, p-&gt;book_number, p-&gt;book_name, p-&gt;value);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实验程序"><a href="#实验程序" class="headerlink" title="实验程序"></a>实验程序</h2><h3 id="实验1"><a href="#实验1" class="headerlink" title="实验1"></a>实验1</h3><h4 id="题目1-3"><a href="#题目1-3" class="headerlink" title="题目1"></a>题目1</h4><h4 id="题目2-2"><a href="#题目2-2" class="headerlink" title="题目2"></a>题目2</h4><h4 id="题目3-1"><a href="#题目3-1" class="headerlink" title="题目3"></a>题目3</h4><h4 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h4><h3 id="实验2"><a href="#实验2" class="headerlink" title="实验2"></a>实验2</h3><h4 id="题目1-4"><a href="#题目1-4" class="headerlink" title="题目1"></a>题目1</h4><h4 id="题目2-3"><a href="#题目2-3" class="headerlink" title="题目2"></a>题目2</h4><h4 id="题目3-2"><a href="#题目3-2" class="headerlink" title="题目3"></a>题目3</h4><p>编写程序，功能是输入某年某月某日，输出这一天是这一年的第几天。闰年的条件是：能被4整除但不能被100整除，或者能被400整除。运行程序，输入数据（年月日用英文格式“-”连接）并检查结果是否正确。例如：</p><p>输入：2020-10-1，输出275</p><p>输入：2022-10-1，输出：274。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year, month, day, sum;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>, &amp;year, &amp;month, &amp;day);</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(month <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>: sum += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>: sum += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:sum += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>: sum += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: sum += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: sum += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: sum += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: sum += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: sum += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">if</span> ((year%<span class="number">4</span> == <span class="number">0</span> &amp;&amp; year%<span class="number">100</span> != <span class="number">0</span>) || year%<span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">sum += <span class="number">29</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum += <span class="number">28</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: sum += <span class="number">31</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum += day;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目4-1"><a href="#题目4-1" class="headerlink" title="题目4"></a>题目4</h4><h4 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h4><h3 id="实验3"><a href="#实验3" class="headerlink" title="实验3"></a>实验3</h3><h4 id="题目1-5"><a href="#题目1-5" class="headerlink" title="题目1"></a>题目1</h4><p>编写程序，求S&#x3D;1+2+3+……加到哪一个正整数，S的值刚好超过1000，输出该整数。</p><p>程序无输入，输出：45</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> sum, n;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (n=<span class="number">1</span>; sum &lt;= <span class="number">1000</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line">sum += n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="题目2-4"><a href="#题目2-4" class="headerlink" title="题目2"></a>题目2</h4><p>编写程序，输出[m, n]区间的所有素数（即质数），每个素数之间用一个空格隔开，其中m和n由键盘输入，且m&lt;n。</p><p>输入：2 20，输出：2 3 5 7 11 13 17 19 </p><p>输入：100 150，输出：101 103 107 109 113 127 131 137 139 149 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, m, i, x, y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m,&amp;n);</span><br><span class="line"><span class="keyword">for</span> (; m&lt;=n; m++)</span><br><span class="line">&#123;</span><br><span class="line">y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(m == <span class="number">2</span> || m == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, m);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">2</span>; x*x &lt;= m; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(m%x ==<span class="number">0</span>)</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3-3"><a href="#题目3-3" class="headerlink" title="题目3"></a>题目3</h4><p>编写程序，输出如下规律字母图形（本图行数n&#x3D;6），其中行数n由键盘输入，第1行左侧无空格。</p><p>输入：6，输出： ABCDEFEDCBA</p><p>​         ABCDEDCBA</p><p>​           ABCDCBA</p><p>​            ABCBA</p><p>​            ABA</p><p>​             A</p><p>输入：3，输出：</p><p>​ABCBA</p><p>​          ABA</p><p>​           A</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n, m, i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(m = <span class="number">0</span>; m &lt; n; m++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n <span class="number">-1</span> - m ; i++ )</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="string">&#x27;A&#x27;</span> + i );</span><br><span class="line"><span class="keyword">for</span>(; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, <span class="string">&#x27;A&#x27;</span> + i );</span><br><span class="line"><span class="comment">/*for(i = 0; i &lt;= m ;i ++)</span></span><br><span class="line"><span class="comment">printf(&quot; &quot;);*/</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="题目4-2"><a href="#题目4-2" class="headerlink" title="题目4"></a>题目4</h4><p>编写程序，计算自然常数e近似值，精度由键盘输入q值控制，输出时显示6位小数。其中计算e公自然常数e近似值，</p><p>精度由键盘输入q值控制，输出时显示6位小数。其中计算e公式如下：<br>$$<br>e≈1+1&#x2F;1!+1&#x2F;2!+1&#x2F;3!+1&#x2F;4!+⋯<br>$$<br>例如：</p><p>输入：0.001，输出：2.718254</p><p>输入：0.0001，输出：2.718279</p><p>输入：0.00001，输出：2.718282</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> e, f, h;</span><br><span class="line"><span class="type">int</span>  i;</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">e = <span class="number">1</span>;</span><br><span class="line">h = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;f);</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">h *= i;</span><br><span class="line">e += <span class="number">1.0</span>/h;</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">while</span>( <span class="number">1.0</span>/h &gt;= f);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.6f&quot;</span>, e);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="题目5-1"><a href="#题目5-1" class="headerlink" title="题目5"></a>题目5</h4><p>输入如下程序代码。编程的本意是：1~100的整数，遇到5的倍数就跳出，否则累加。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">1</span>,sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum += i;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum=%d&quot;</span>,sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试分析以上程序可能存在的问题，应如何改进。</p><p>程序运行无输入，输出：sum&#x3D;4000</p><p>修改后的程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= <span class="number">99</span>)</span><br><span class="line">&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;sum=%d&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验4"><a href="#实验4" class="headerlink" title="实验4"></a>实验4</h3><h4 id="题目1-6"><a href="#题目1-6" class="headerlink" title="题目1"></a>题目1</h4><p>编写一程序，输入三个整数a、b、c，并定义三个指针变量pa、pb、pc分别引用它们，并按降序输出，输出时数据间用一个空格隔开。例如：</p><p>输入：1 3 5，输出：5 3 1</p><p>输入：50 34 65，输出：65 50 34</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, d, n, *pa, *pb, *pc;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"></span><br><span class="line">pa = &amp;a;</span><br><span class="line">pb = &amp;b;</span><br><span class="line">pc = &amp;c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*pa &lt; *pb)</span><br><span class="line">&#123;</span><br><span class="line">d = *pb;</span><br><span class="line">*pb = *pa;</span><br><span class="line">*pa = d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(*pa &lt; *pc)</span><br><span class="line">&#123;</span><br><span class="line">d = *pc;</span><br><span class="line">*pc = *pa;</span><br><span class="line">*pa = d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(*pb &lt; *pc)</span><br><span class="line">&#123;</span><br><span class="line">d = *pc;</span><br><span class="line">*pc = *pb;</span><br><span class="line">*pb = d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, *pa, *pb, *pc);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目2-5"><a href="#题目2-5" class="headerlink" title="题目2"></a>题目2</h4><p>编写一程序，输入n个成绩，然后使用指针变量p输出高于平均值的各个成绩，输出时成绩保留1位小数，成绩间用一个空格隔开。</p><p>输入：5 76 87 67 90 60，输出：87.0 90.0</p><p>输入：10 67 87 99 76 70 87 64 45 89 80，输出：87.0 99.0 87.0 89.0 80.0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 100</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> a[SIZE], *p, aver;</span><br><span class="line"><span class="type">int</span> n, j;</span><br><span class="line">aver = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>( j=<span class="number">0</span>;j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;a[j]);</span><br><span class="line">aver += a[j];</span><br><span class="line">&#125;</span><br><span class="line">aver = aver / n ;</span><br><span class="line">p = a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(*(p + j) &gt; aver)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1f &quot;</span>, *(p+j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3-4"><a href="#题目3-4" class="headerlink" title="题目3"></a>题目3</h4><p>编写一程序，首先定义一个容量15的数组（如：int a[15]），输入n（n&lt;15）个数，然后使用选择法对这n个进行升序排序后输出；再输入一个数并插入到已排好序的数组中并保持有序，最后输出这n+1个数。输出时每个数据间用一个空格隔开。</p><p>输入：5 </p><p>4 5 2 9 3</p><p>第1次输出：2 3 4 5 9</p><p>再输入：6</p><p>第2次输出：2 3 4 5 6 9</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">15</span>], n, j, k, t;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[j]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n<span class="number">-1</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = j+<span class="number">1</span>; k &lt; n; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt; a[k])</span><br><span class="line">&#123;</span><br><span class="line">t = a[j];</span><br><span class="line">a[j] = a[k];</span><br><span class="line">a[k] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[n]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(k = j+<span class="number">1</span>; k &lt; n + <span class="number">1</span>; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &gt; a[k])</span><br><span class="line">&#123;</span><br><span class="line">t = a[j];</span><br><span class="line">a[j] = a[k];</span><br><span class="line">a[k] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n+<span class="number">1</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[j]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目4-3"><a href="#题目4-3" class="headerlink" title="题目4"></a>题目4</h4><p>编写一程序，输入以下4×4矩阵，并将其转置，即行列互换，然后使用指向一维数组的指针变量（int (*q)[4]）输出转置后的矩阵。输出时每个数据间用一个空格隔开。</p><p>转置换</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>5</td><td>6</td><td>7</td><td>8</td></tr><tr><td>9</td><td>10</td><td>11</td><td>12</td></tr><tr><td>13</td><td>14</td><td>15</td><td>16</td></tr></tbody></table><p>转置后</p><table><thead><tr><th>1</th><th>5</th><th>9</th><th>13</th></tr></thead><tbody><tr><td>2</td><td>6</td><td>10</td><td>14</td></tr><tr><td>3</td><td>7</td><td>11</td><td>15</td></tr><tr><td>4</td><td>8</td><td>12</td><td>16</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">4</span>][<span class="number">4</span>], r, c, (*q)[<span class="number">4</span>], t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">4</span>;r++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (c = <span class="number">0</span>; c &lt; <span class="number">4</span> ; c++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[r][c]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; c &lt; <span class="number">4</span>; c++)</span><br><span class="line">&#123;</span><br><span class="line">t = a[r][c];</span><br><span class="line">a[r][c] = a[c][r];</span><br><span class="line">a[c][r] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">q = a;</span><br><span class="line"><span class="keyword">for</span> (r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; c &lt; <span class="number">4</span>; c++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(*(q+c)+r));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目5-2"><a href="#题目5-2" class="headerlink" title="题目5"></a>题目5</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;=<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>试分析以上程序可能存在的问题，为什么，以后应如何避免出现类似的问题。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组a的索引是从0开始到9，而不是到10</span></span><br><span class="line"><span class="comment">// 可以利用sizeof（a）/sizeof（a[0]）得出数组长度再减去1</span></span><br><span class="line"><span class="comment">// 这样就避免了认为的错误</span></span><br></pre></td></tr></table></figure><h3 id="实验5"><a href="#实验5" class="headerlink" title="实验5"></a>实验5</h3><h4 id="题目1-7"><a href="#题目1-7" class="headerlink" title="题目1"></a>题目1</h4><p>编写一程序，功能是输入一个字符串，输出字符串的长度，不能使用strlen函数。例如：</p><p>输入：abcd123    输出：7</p><p>输入：!@#$ABC123    输出：10</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(ch[n] != <span class="string">&#x27;\0&#x27;</span> &amp;&amp; ch[n] !=<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">n++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目2-6"><a href="#题目2-6" class="headerlink" title="题目2"></a>题目2</h4><p>编写一程序，功能是输入一个字符串，分别统计大写字母、小写字母、数字和其它字符的个数，并输出各类字符的个数，数字间用一个空格隔开。例如：</p><p>输入：!@#$ ABC abc 123，输出：3 3 3 7</p><p>输入：&amp;*AbdEF12G4，输出：4 2 3 2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> big, small, count, other, n, j;</span><br><span class="line">big = small = count = other = <span class="number">0</span>;</span><br><span class="line">gets(ch);</span><br><span class="line">n = <span class="built_in">strlen</span>(ch);</span><br><span class="line"><span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[j] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch[j] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">big++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[j] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch[j] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">small++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(ch[j] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch[j] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">other++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d %d&quot;</span>, big, small, count, other);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3-5"><a href="#题目3-5" class="headerlink" title="题目3"></a>题目3</h4><p>编写一程序，功能是输入一个字符串，删除尾部连续的“*”号，前导和中间的保留。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输入：ab*c*<span class="number">12</span>*<span class="number">3</span>****，输出：***ab*c*<span class="number">12</span>*<span class="number">3</span></span><br><span class="line"></span><br><span class="line">输入：**<span class="number">12</span>*<span class="number">78</span>*<span class="number">89</span>，输出：**<span class="number">12</span>*<span class="number">78</span>*<span class="number">89</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> n, j;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line">n = <span class="built_in">strlen</span>(ch);</span><br><span class="line"><span class="keyword">for</span>(j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[j] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">ch[j] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目4-4"><a href="#题目4-4" class="headerlink" title="题目4"></a>题目4</h4><p>编写一程序，功能是输入一个身份证号，把身份证号的第7~14位替换成*，并把末位字母转换为大写。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">输入：<span class="number">35010120031005123</span>x，输出：<span class="number">350101</span>********<span class="number">123</span>X。</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">18</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">6</span>; n &lt;= <span class="number">13</span>; n++)</span><br><span class="line">&#123;</span><br><span class="line">ch[n] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ch[<span class="number">17</span>] == <span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">ch[<span class="number">17</span>] =<span class="string">&#x27;X&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,ch);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目5-3"><a href="#题目5-3" class="headerlink" title="题目5"></a>题目5</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">输入如下程序代码。</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> password[<span class="number">1024</span>]; </span><br><span class="line"><span class="type">int</span> valid;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码\n&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password); </span><br><span class="line">valid = <span class="built_in">strcmp</span>(password, <span class="string">&quot;1234567&quot;</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(buffer, password);</span><br><span class="line"><span class="keyword">if</span> (valid) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;登录失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;登录成功\n&quot;</span>); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">编译运行以上程序，分别输入：<span class="number">11111111</span>(<span class="number">8</span>位)、<span class="number">1234567</span>、<span class="number">22222222</span>(<span class="number">8</span>位)等三个密码，观察运行情况，试分析为什么会出现这种情况，应如何避免出现类似的问题。</span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">char</span> password[<span class="number">1024</span>]; </span><br><span class="line"><span class="type">int</span> valid;</span><br><span class="line"><span class="type">char</span> buffer[<span class="number">8</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入密码\n&quot;</span>); </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, password); </span><br><span class="line">valid = <span class="built_in">strcmp</span>(password, <span class="string">&quot;1234567&quot;</span>);</span><br><span class="line"><span class="built_in">strncpy</span>(buffer, password,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">if</span> (valid) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;登录失败\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;登录成功\n&quot;</span>); </span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验6"><a href="#实验6" class="headerlink" title="实验6"></a>实验6</h3><h4 id="题目1-8"><a href="#题目1-8" class="headerlink" title="题目1"></a>题目1</h4><p>编写一函数int swap(int x,int y)，功能是交换两个数并返回两数之和。在main函数中输入两个数x和y，调用swap函数后，输出交换后的两个数x、y以及两数之和（每个数后留一个空格）。例如：</p><p>输入：3 5</p><p>输出：5 3 8</p><p>输入：8 3</p><p>输出：3 8 11</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">swap</span><span class="params">(<span class="type">int</span> *a,<span class="type">int</span> *b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line">t=*a;</span><br><span class="line">*a=*b;</span><br><span class="line">*b=t;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;x,&amp;y);</span><br><span class="line">swap(&amp;x,&amp;y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>,x,y,x+y);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目2-7"><a href="#题目2-7" class="headerlink" title="题目2"></a>题目2</h4><p>写一函数void radix(int x，int d)，功能是使用递归调用方法将十进制数x转化为d（如2、8）进制并输出。在main函数中输入正整数x和d（2或8）后调用radix函数。</p><p>输入：23 2</p><p>输出：10111</p><p>输入：31 8</p><p>输出：37</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">radix</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> d)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> x,d;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;d);</span><br><span class="line">radix(x,d);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">radix</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> d)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="keyword">if</span>(x &lt; d)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a = x;</span><br><span class="line">x = x/d;</span><br><span class="line">radix(x,d);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a%d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3-6"><a href="#题目3-6" class="headerlink" title="题目3"></a>题目3</h4><p>编写两个函数void sort(int a[],int n)和int search(int a[],int n,int x)，其中sort功能是对传入的n个数进行升序排序；search功能是使用折半查找法（即二分法）在一组有序（升序）的n个数中查找指定数x，若找到，返回x在该组数中的位置（下标+1），若没找到，则返回-1。在main函数中输入n及n个数，调用sort函数后输出；再输入一个数x，调用search函数后，输出查找结果，若找到输出位置（如：Position:3），若没有找到，则输出：No find。注意：输出时英文大小写，以及Position后的冒号为英文格式。例如：</p><p>输入：10</p><p>21 34 5 22 43 65 78 31 65 9</p><p>输出：5 9 21 22 31 34 43 65 65 78</p><p>输入：34</p><p>输出：Position:6</p><p>再如：</p><p>输入：8</p><p>23 45 21 54 78 54 31 17</p><p>输出：17 21 23 31 45 54 54 78</p><p>输入：19</p><p>输出：No find</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 99</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n, <span class="type">int</span> x)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[N], n, i, x, position;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(a, n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">position = search(a, n, x);</span><br><span class="line"><span class="keyword">if</span>(position == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No find&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Position:%d&quot;</span>, position);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j, t;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &gt; a[j])</span><br><span class="line">&#123;</span><br><span class="line">t = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span> a[], <span class="type">int</span> n, <span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> r, l, m;</span><br><span class="line">l = <span class="number">0</span>;</span><br><span class="line">r = n;</span><br><span class="line"><span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">&#123;</span><br><span class="line">m = (r+l)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(x &gt; a[m])</span><br><span class="line">l = m;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x &lt; a[m])</span><br><span class="line">r = m;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x == a[m])</span><br><span class="line"><span class="keyword">return</span> m+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目4-5"><a href="#题目4-5" class="headerlink" title="题目4"></a>题目4</h4><p>编写一函数void encrypt(char s[],int d)，功能是将字符串中的每个字母用其之后（或之前）的第d个字母替换，如：d&#x3D;4，则：AàE，BàF，…，WàA，XàB，aàe，bàf，…，wàa，xàb；如：d&#x3D;-4，则：A变W，BàX，…，aàw，bàx，…，其他字符不变。在main函数中输入一个字符串s和d，调用encrypt(s,d)后，输出s，执行d&#x3D;-d后再次调用encrypt(s,d)后，输出s。例如：</p><p>输入：Windows</p><p>4</p><p>输出：Amrhsaw</p><p>Windows</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">char</span> s[], <span class="type">int</span> d)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="type">int</span> d;</span><br><span class="line">gets(s);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d);</span><br><span class="line">encrypt(s,d);</span><br><span class="line">encrypt(s,-d);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(<span class="type">char</span> s[], <span class="type">int</span> d)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> len, n;</span><br><span class="line">len = <span class="built_in">strlen</span>(s) ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (n = <span class="number">0</span>; n &lt; len ; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(s[n] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[n] &lt;= <span class="string">&#x27;Z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">s[n] = (s[n] - <span class="string">&#x27;A&#x27;</span> + d + <span class="number">26</span>)%<span class="number">26</span> + <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[n] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[n] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">s[n] = (s[n] - <span class="string">&#x27;a&#x27;</span> + d + <span class="number">26</span>)%<span class="number">26</span> + <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目5-4"><a href="#题目5-4" class="headerlink" title="题目5"></a>题目5</h4><p>输入以下代码，编译运行，并分析运行结果。理解局部变量和全局变量、动态变量与静态变量的区别。</p><p>#include &lt;stdio.h&gt;</p><p>int x;</p><p>void fun()</p><p>{</p><p>​    int x;</p><p>​    static int y;</p><p>​    x&#x3D;x+1;</p><p>​    y&#x3D;y+2;</p><p>​    printf(“fun:x&#x3D;%d,y&#x3D;%d\n”,x,y);</p><p>}</p><p>int main()</p><p>{</p><p>​    int y&#x3D;0;</p><p>​    x&#x3D;x+3;</p><p>​    y&#x3D;y+4;</p><p>​    printf(“main1:x&#x3D;%d,y&#x3D;%d\n”,x,y);</p><p>​    fun();</p><p>​    printf(“main2:x&#x3D;%d,y&#x3D;%d\n”,x,y);</p><p>​    {</p><p>​         int x;</p><p>​         x++;y++;</p><p>​         printf(“main3:x&#x3D;%d,y&#x3D;%d\n”,x,y);</p><p>​    }</p><p>​    printf(“main4:x&#x3D;%d,y&#x3D;%d\n”,x,y);</p><p>​    fun();</p><p>​    x++;y++;</p><p>​    printf(“main5:x&#x3D;%d,y&#x3D;%d\n”,x,y);</p><p>​    return 0;</p><p>}</p><h4 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h4><p>输入以下代码，编译运行，并分析运行结果。理解缓冲区溢出漏洞利用原理。</p><p>#include &lt;stdio.h&gt;</p><p>void printtest()</p><p>{</p><p>​    printf(“test”);</p><p>}</p><p>void gettest()</p><p>{</p><p>​    char str[15]&#x3D;{‘0’};</p><p>​    int p&#x3D;(int)&printtest;</p><p>​    char ap[15];</p><p>​    ap[0]&#x3D;p&gt;&gt;24 &amp; 0x000000FF; &#x2F;&#x2F;取地址的高字节</p><p>​    ap[1]&#x3D;p&lt;&lt;8&gt;&gt;24 &amp; 0x000000FF;&#x2F;&#x2F;取地址的第二字节</p><p>​    ap[2]&#x3D;p&lt;&lt;16&gt;&gt;24 &amp; 0x000000FF; &#x2F;&#x2F;取地址的第三字节</p><p>​    ap[3]&#x3D;p&lt;&lt;24&gt;&gt;24 &amp; 0x000000FF; &#x2F;&#x2F;取地址的末字节</p><p>​    str[12]&#x3D;ap[3];</p><p>​    str[13]&#x3D;ap[2];</p><p>​    str[14]&#x3D;ap[1];</p><p>​    str[15]&#x3D;ap[0];</p><p>}</p><p>void main()</p><p>{</p><p>​    gettest();</p><p>}</p><h3 id="实验7"><a href="#实验7" class="headerlink" title="实验7"></a>实验7</h3><h4 id="题目1-9"><a href="#题目1-9" class="headerlink" title="题目1"></a>题目1</h4><p>写一程序求两个复数之和。要求：首先定义一个表示复数的结构体struct complex，包含两个成员：实部x（int型）和虚部y（int 型）；然后写一个函数struct complex add(struct complex a, struct complex b)求两个复数之和；最后在main函数中输入两个复数的实部和虚部，调用add函数后，输出两复数之和。例如：</p><p>输入：3 5 4 -7</p><p>输出：7-2i</p><p>输入：20 30 -30 -20</p><p>输出：-10+10i</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="type">complex</span> <span class="title function_">add</span><span class="params">(<span class="keyword">struct</span> <span class="type">complex</span> a, <span class="keyword">struct</span> <span class="type">complex</span> b)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span> <span class="title">a</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span> <span class="title">b</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span> <span class="title">addition</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;(a.x), &amp;(a.y));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;(b.x), &amp;(b.y));</span><br><span class="line">addition = add(a, b);</span><br><span class="line"></span><br><span class="line">(addition.y &gt; <span class="number">0</span>)? <span class="built_in">printf</span>(<span class="string">&quot;%d+%di&quot;</span>, addition.x, addition.y) : <span class="built_in">printf</span>(<span class="string">&quot;%d%di&quot;</span>, addition.x,addition.y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="type">complex</span> <span class="title function_">add</span><span class="params">(<span class="keyword">struct</span> <span class="type">complex</span> a, <span class="keyword">struct</span> <span class="type">complex</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span> <span class="title">c</span>;</span></span><br><span class="line">c.x = a.x + b.x;</span><br><span class="line">c.y = a.y + b.y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目2-8"><a href="#题目2-8" class="headerlink" title="题目2"></a>题目2</h4><p>编写一程序对学生成绩进行处理，学生的信息包括学号（字符不超过10个）、姓名（字符不超过10个，不含空格）、3门课程的成绩（float型）以及平均分（float型）。要求：先定义一个表示学生信息的结构体struct student；然后定义3个函数，分别用于输入数据（含计算平均分）void input_data(struct student stu[ ],int n)、按平均分升序排序void sort(struct student stu[ ],int n)和输出数据void print_data(struct student stu[ ],int n)；最后在main函数中输入学生人数n，依次调用input_data(stu,n)、sort(stu,n)和print_data(stu,n)函数。输入输出时每个数据间用一个空格隔开，成绩及平均分的小数保留1位。例如：   </p><p>输入：3</p><p>00001 zhangsan 89 78 67</p><p>00002 lisi 70 66 72</p><p>00003 wangwu 78 77 70</p><p>输出：00002 lisi 70.0 66.0 72.0 69.3</p><p>00003 wangwu 78.0 77.0 70.0 75.0</p><p>00001 zhangsan 89.0 78.0 67.0 78.0</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line"><span class="type">char</span> stu_number[<span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> stu_name[<span class="number">10</span>];</span><br><span class="line"><span class="type">float</span> score[<span class="number">3</span>];</span><br><span class="line"><span class="type">float</span> aver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input_data</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print_data</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>[100];</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">input_data(stu,n);</span><br><span class="line">sort(stu,n);</span><br><span class="line">print_data(stu,n);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">input_data</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%s%f%f%f&quot;</span>,</span><br><span class="line"> stu[i].stu_number, stu[i].stu_name,&amp;(stu[i].score[<span class="number">0</span>]), &amp;(stu[i].score[<span class="number">1</span>]), &amp;(stu[i].score[<span class="number">2</span>]));</span><br><span class="line">stu[i].aver = (stu[i].score[<span class="number">0</span>] + stu[i].score[<span class="number">1</span>] + stu[i].score[<span class="number">2</span>])/<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sort</span><span class="params">(<span class="keyword">struct</span> student stu[], <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">t</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j = i+<span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stu[i].aver &gt; stu[j].aver)</span><br><span class="line">&#123;</span><br><span class="line">t = stu[i];</span><br><span class="line">stu[i] = stu[j];</span><br><span class="line">stu[j] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print_data</span><span class="params">(<span class="keyword">struct</span> student stu[],<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s %.1f %.1f %.1f %.1f&quot;</span>,</span><br><span class="line">stu[i].stu_number, stu[i].stu_name,stu[i].score[<span class="number">0</span>],stu[i].score[<span class="number">1</span>],stu[i].score[<span class="number">2</span>],stu[i].aver);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目3-7"><a href="#题目3-7" class="headerlink" title="题目3"></a>题目3</h4><p>编写一个程序使用链表操作学生信息，学生的信息包括学号（字符不超过10个）、姓名（字符不超过10个，不含空格）和年龄（int型）。要求：先定义一个表示学生信息的结点struct student；然后定义5个函数，分别用于：创建一个带有头结点的链表（头插法，按学号降序输入数据，学生个数为n，本函数中输入）函数struct student *create()、插入数据（任意位置插入，保持学号有序，新生信息结点由main传递过来）函数void insert(struct student *h, struct student *x)、删除数据（删除指定学号的学生数据，学号由main传递过来）函数void dele (struct student *h,char num[])、输出数据函数void print(struct student *h)和菜单（用于显示1. create、2. insert、3. delete、4. print和0. exit）函数void menu()；最后在main函数中用一个死循环实现可重复显示菜单及通过输入整数（0~4）选择调用相应功能函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>&#123;</span></span><br><span class="line"><span class="type">char</span> stu_num[<span class="number">10</span>];</span><br><span class="line"><span class="type">char</span> stu_name[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> stu_age;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> student *<span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="keyword">struct</span> student *h, <span class="keyword">struct</span> student *x)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">dele</span><span class="params">(<span class="keyword">struct</span> student*h,<span class="type">char</span> num[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> student *h)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> num[<span class="number">10</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">h</span>, *<span class="title">r</span>, *<span class="title">p</span>;</span></span><br><span class="line"><span class="type">int</span> n, a;</span><br><span class="line"><span class="type">int</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line">menu();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line"><span class="keyword">switch</span>(a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">h = create();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">p = (<span class="keyword">struct</span> student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> student));</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%s%d&quot;</span>, p-&gt;stu_num, p-&gt;stu_name, &amp;(p-&gt;stu_age));</span><br><span class="line">insert(h, p);</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,num);</span><br><span class="line">dele(h,num);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">print(h);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">menu</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*************************************\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*         1.create                  *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*         2.insert                  *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*         3.delete                  *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*         4.print                   *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*  0.exit                    *\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*************************************\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> student *<span class="title function_">create</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> quit;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">h</span>, *<span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">h = (<span class="keyword">struct</span> student*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> student));</span><br><span class="line">h-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">p = (<span class="keyword">struct</span> student*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> student));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Please input the data about student:\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s%s%d&quot;</span>, p-&gt;stu_num, p-&gt;stu_name, &amp;(p-&gt;stu_age));</span><br><span class="line">p-&gt;next = h-&gt;next;</span><br><span class="line">h-&gt;next = p;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;continue or not (N to quit)\n&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;quit);</span><br><span class="line">n++;</span><br><span class="line"><span class="keyword">if</span>(quit == <span class="string">&#x27;N&#x27;</span> || quit == <span class="string">&#x27;n&#x27;</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;You create %d student(s)\n&quot;</span>, n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="keyword">struct</span> student *h)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>;</span></span><br><span class="line">p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s %s %d&quot;</span>, p-&gt;stu_num, p-&gt;stu_name, p-&gt;stu_age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;------------------------------------------------\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">dele</span><span class="params">(<span class="keyword">struct</span> student *h,<span class="type">char</span> num[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>, *<span class="title">q</span>;</span></span><br><span class="line">q = h;</span><br><span class="line">p = h-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;stu_num, num) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">q-&gt;next = p-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">insert</span><span class="params">(<span class="keyword">struct</span> student *h, <span class="keyword">struct</span> student*x)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>, *<span class="title">q</span>;</span></span><br><span class="line">p = h-&gt;next;</span><br><span class="line">q = h;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(p-&gt;stu_num, x-&gt;stu_num) &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">x-&gt;next = p;</span><br><span class="line">q-&gt;next = x;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p = p-&gt;next;</span><br><span class="line">q = q-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="题目4-6"><a href="#题目4-6" class="headerlink" title="题目4"></a>题目4</h4><h4 id="题目5-5"><a href="#题目5-5" class="headerlink" title="题目5"></a>题目5</h4><h1 id="课外编程练习"><a href="#课外编程练习" class="headerlink" title="课外编程练习"></a>课外编程练习</h1><h2 id="C语言经典例题100道系列"><a href="#C语言经典例题100道系列" class="headerlink" title="C语言经典例题100道系列"></a>C语言经典例题100道系列</h2><h3 id="题目1-组成不同不重复的三位数"><a href="#题目1-组成不同不重复的三位数" class="headerlink" title="题目1    组成不同不重复的三位数"></a>题目1    组成不同不重复的三位数</h3><p>有1、2、3、4个数字，能组成多少个互不相同且无重复数字（不能重复使用数字）的三位数？都是多少？</p><p>程序分析：可填在百位、十位、个位的数字都是1、2、3、4。组成所有的排列后再去掉不满足条件的排列。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j, k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;=<span class="number">4</span>; i++)</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=<span class="number">4</span>;j++)</span><br><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=<span class="number">4</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>( i != j &amp;&amp; i != k &amp;&amp; k!= j)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d%d%d &quot;</span>, i, j, k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目2-企业发放的奖金根据利润提成"><a href="#题目2-企业发放的奖金根据利润提成" class="headerlink" title="题目2 企业发放的奖金根据利润提成"></a>题目2 企业发放的奖金根据利润提成</h3><p>企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提10%；利润高 于10万元，低于20万元时，低于10万元的部分按10%提成，高于10万元的部分，可可提 成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于 40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于 100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？ </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> bouns, sum;</span><br><span class="line"><span class="type">int</span> boun;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>, &amp;bouns);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(bouns &gt; <span class="number">100</span>)</span><br><span class="line">sum = <span class="number">10</span>*<span class="number">0.1</span> + <span class="number">10</span>*<span class="number">0.075</span> + <span class="number">20</span> * <span class="number">0.05</span> + <span class="number">20</span>*<span class="number">0.03</span> + <span class="number">40</span>*<span class="number">0.015</span> + (bouns<span class="number">-100</span>)*<span class="number">0.01</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bouns &gt; <span class="number">60</span>)</span><br><span class="line">sum = <span class="number">10</span>*<span class="number">0.1</span> + <span class="number">10</span>*<span class="number">0.075</span> + <span class="number">20</span> * <span class="number">0.05</span> + <span class="number">20</span>*<span class="number">0.03</span> + (bouns<span class="number">-60</span>)*<span class="number">0.015</span> ;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bouns &gt; <span class="number">40</span>)</span><br><span class="line">sum = <span class="number">10</span>*<span class="number">0.1</span> + <span class="number">10</span>*<span class="number">0.075</span> + <span class="number">20</span> * <span class="number">0.05</span> + (bouns<span class="number">-40</span>)*<span class="number">0.03</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bouns &gt; <span class="number">20</span>)</span><br><span class="line">sum = <span class="number">10</span>*<span class="number">0.1</span> + <span class="number">10</span>*<span class="number">0.075</span> + (bouns - <span class="number">20</span>) * <span class="number">0.05</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bouns &gt; <span class="number">10</span>)</span><br><span class="line">sum = <span class="number">10</span>*<span class="number">0.1</span> + (bouns - <span class="number">10</span>)*<span class="number">0.075</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(bouns &gt; <span class="number">0</span>)</span><br><span class="line">sum = bouns*<span class="number">0.1</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2f&quot;</span>, sum);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目3-猜数字"><a href="#题目3-猜数字" class="headerlink" title="题目3 猜数字"></a>题目3 猜数字</h3><p>题目：一个整数，它加上100后是一个完全平方数，再加上168又是一个完全平方数，请问该数是多少？ </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">int</span> i, x, y, z;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">x = <span class="built_in">sqrt</span>(i+<span class="number">100</span>);</span><br><span class="line">y = <span class="built_in">sqrt</span>(i+<span class="number">268</span>);</span><br><span class="line"><span class="keyword">if</span>(x*x == i+<span class="number">100</span> &amp;&amp; y*y == i +<span class="number">268</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%ld\n&quot;</span>, i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目4-判断第几天"><a href="#题目4-判断第几天" class="headerlink" title="题目4 判断第几天"></a>题目4 判断第几天</h3><p>输入某年某月某日，判断这一天是这一年的第几天？（同实验2 第3题）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> year, month, day, sum;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d-%d-%d&quot;</span>, &amp;year, &amp;month, &amp;day);</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span>(month <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">11</span>: sum += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>: sum += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:sum += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>: sum += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>: sum += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>: sum += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: sum += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: sum += <span class="number">30</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: sum += <span class="number">31</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">if</span> ((year%<span class="number">4</span> == <span class="number">0</span> &amp;&amp; year%<span class="number">100</span> != <span class="number">0</span>) || year%<span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">sum += <span class="number">29</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sum += <span class="number">28</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: sum += <span class="number">31</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum += day;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目5-由小到大输出整数"><a href="#题目5-由小到大输出整数" class="headerlink" title="题目5 由小到大输出整数"></a>题目5 由小到大输出整数</h3><p>输入三个整数x,y,z，请把这三个数由小到大输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a, b, c, t;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a &gt; b)</span><br><span class="line">&#123;</span><br><span class="line">t = a;</span><br><span class="line">a = b;</span><br><span class="line">b = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(a &gt; c)</span><br><span class="line">&#123;</span><br><span class="line">t = a;</span><br><span class="line">a = c;</span><br><span class="line">c = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(b &gt; c)</span><br><span class="line">&#123;</span><br><span class="line">t = b;</span><br><span class="line">b = c;</span><br><span class="line">c = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d %d&quot;</span>, a,b,c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目6-用-号输出字母C的图案。"><a href="#题目6-用-号输出字母C的图案。" class="headerlink" title="题目6 用*号输出字母C的图案。"></a>题目6 用*号输出字母C的图案。</h3><p>用*号输出字母C的图案。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*********\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*********\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h3><h3 id="题目8-九九乘法表"><a href="#题目8-九九乘法表" class="headerlink" title="题目8 九九乘法表"></a>题目8 九九乘法表</h3><p>输出9*9口诀</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i, j, n;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d × %d = %d &quot;</span>, i,j,i*j);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目9-输出国际象棋棋盘"><a href="#题目9-输出国际象棋棋盘" class="headerlink" title="题目9 输出国际象棋棋盘"></a>题目9 输出国际象棋棋盘</h3><h3 id="题目10-打印楼梯和笑脸"><a href="#题目10-打印楼梯和笑脸" class="headerlink" title="题目10 打印楼梯和笑脸"></a>题目10 打印楼梯和笑脸</h3><p>打印楼梯，同时在楼梯上方打印两个笑脸。</p><h1 id="C-Primer-Plus编程练习"><a href="#C-Primer-Plus编程练习" class="headerlink" title="C Primer Plus编程练习"></a>C Primer Plus编程练习</h1><h2 id="第9章-函数"><a href="#第9章-函数" class="headerlink" title="第9章 函数"></a>第9章 函数</h2><h3 id="题目1-10"><a href="#题目1-10" class="headerlink" title="题目1"></a>题目1</h3><p>设计一个函数<code>min(x, y)</code>，返回两个<code>double</code>类型值的较小值。在一个简单的驱动程序中测试该函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">double</span> <span class="title function_">min</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> n, m, small;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf&quot;</span>, min(n,m));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">min</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (x &lt; y ? x : y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目2-9"><a href="#题目2-9" class="headerlink" title="题目2"></a>题目2</h3><p>设计一个函数<code>chline(ch, i, j)</code>，打印指定的字符<code>j</code>行<code>i</code>列。在一个简单的驱动程序中测试该函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">chline</span><span class="params">(<span class="type">char</span> (*c)[<span class="number">10</span>],<span class="type">int</span> i,<span class="type">int</span> j)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="type">char</span> ch[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, ch[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;i, &amp;j);</span><br><span class="line"></span><br><span class="line">chline(ch, i, j);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">chline</span><span class="params">(<span class="type">char</span> (*c)[<span class="number">10</span>], <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 做此题时出现把指针形参的声明与数组形参的声明混用</span></span><br></pre></td></tr></table></figure><h3 id="题目3-8"><a href="#题目3-8" class="headerlink" title="题目3"></a>题目3</h3><p>编写一个函数，接受3个参数：一个字符和两个整数。字符参数是待打印的字符，第1个整数指定一行中打印字符的次数，第2个整数指定打印指定字符的行数。编写一个调用该函数的程序。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printch</span><span class="params">(<span class="type">char</span> ch,<span class="type">int</span> i,<span class="type">int</span> j)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> r, c;</span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;ch);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;r, &amp;c);</span><br><span class="line">printch(ch, r, c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printch</span><span class="params">(<span class="type">char</span> ch, <span class="type">int</span> i, <span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> n = <span class="number">0</span>; n &lt; j; n++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> n = <span class="number">0</span>; n &lt; i; n++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出现的问题：在声明和定义函数，在声明形参时，不声明其类型</span></span><br></pre></td></tr></table></figure><h3 id="题目4-7"><a href="#题目4-7" class="headerlink" title="题目4"></a>题目4</h3><p>两数的调和平均数这样计算：先得到两数的倒数，然后计算两个倒数的平均值，最后取计算结果的倒数。编写一个函数，接受两个<code>double</code>类型的参数，返回这两个参数的调和平均数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">double</span> a,<span class="type">double</span> b)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> x, y, aver;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">aver = average(x , y);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lf&quot;</span>, aver);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">average</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (<span class="number">2</span>/((<span class="number">1</span>/a) + (<span class="number">1</span>/b)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目5-6"><a href="#题目5-6" class="headerlink" title="题目5"></a>题目5</h3><p>编写并测试一个函数<code>larger_of()</code>，该函数把两个<code>double</code>类型变量的值替换为较大的值。例如，<code>larger_of(x, y)</code>会把<code>x</code>和<code>y</code>中较大的值重新赋给两个变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">double</span> <span class="title function_">larger_of</span><span class="params">(<span class="type">double</span> n, <span class="type">double</span> m)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"></span><br><span class="line">m = n = larger_of(n, m);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf %.2lf&quot;</span>, n, m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="title function_">larger_of</span><span class="params">(<span class="type">double</span> n, <span class="type">double</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (n &gt; m)? n : m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目6-1"><a href="#题目6-1" class="headerlink" title="题目6"></a>题目6</h3><p>编写并测试一个函数，该函数以3个<code>double</code>变量的地址作为参数，把最小值放入第1个变量，中间值放入第2个变量，最大值放入第3个变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">exchange</span><span class="params">(<span class="type">double</span> *min, <span class="type">double</span> *mid, <span class="type">double</span> *max)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> n, m, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lf%lf%lf&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">exchange(&amp;n, &amp;m ,&amp;k);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf %.2lf %.2lf&quot;</span>, n,m,k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exchange</span><span class="params">(<span class="type">double</span> *min,<span class="type">double</span> *mid, <span class="type">double</span> *max)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">double</span> t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*min &gt; *mid)</span><br><span class="line">&#123;</span><br><span class="line">t = *min;</span><br><span class="line">*min = *mid;</span><br><span class="line">*mid = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*min &gt; *max)</span><br><span class="line">&#123;</span><br><span class="line">t = *min;</span><br><span class="line">*min = *max;</span><br><span class="line">*max = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(*mid &gt; *max)</span><br><span class="line">&#123;</span><br><span class="line">t = *mid;</span><br><span class="line">*mid = *max;</span><br><span class="line">*max = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="题目7-1"><a href="#题目7-1" class="headerlink" title="题目7"></a>题目7</h3><p>编写一个函数，从标准输入中读取字符，直到遇到文件结尾。程序要报告每个字符是否是字母。如果是，还要报告该字母在字母表中的数值位置。例如，c和C在字母表中的位置都是3。合并一个函数，以一个字符作为参数，如果该字符是一个字母则返回一个数值位置，否则返回-1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第11章-字符串和字符串函数"><a href="#第11章-字符串和字符串函数" class="headerlink" title="第11章 字符串和字符串函数"></a>第11章 字符串和字符串函数</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 练习题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据类型2</title>
      <link href="/2023/11/28/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B2/"/>
      <url>/2023/11/28/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B2/</url>
      
        <content type="html"><![CDATA[<p>注：该笔记非原创，只是上网课记的</p><h1 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h1><p>目标：掌握列表和元组数据类型的各种操作（知识点应用案例）</p><p>·list，列表类型，用于存储一些数据的容器（有序&amp;可修改）。{80%}</p><p>·tuple，元组类型，用于存储一些数据的容器（有序&amp;不可修改）</p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>列表（list），是一个有序且可变的容器，在里面可以存放多个不同类型的元素。并且所放的元素可以修改。（先放的永远是在后放的前面）</p><h2 id="列表的定义"><a href="#列表的定义" class="headerlink" title="列表的定义"></a>列表的定义</h2><p> 列表的定义是大括号[ ](注意，在这里的大括号是（[ ]），要和花括号（{}）要区别开来)括起来，里边每个元素都用逗号隔开。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;苍老师&quot;</span>,<span class="string">&quot;有坂深雪&quot;</span>,<span class="string">&quot;大桥未久&quot;</span>] 字符串 单一类型</span><br><span class="line">number_list = [<span class="number">98</span>,<span class="number">88</span>,<span class="number">666</span>,<span class="number">12</span>,-<span class="number">1</span>]  整型单一类型</span><br><span class="line">data_list = [<span class="number">1</span>,<span class="literal">True</span>,<span class="string">&quot;Alex&quot;</span>,<span class="string">&quot;宝强&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>] 多个类型</span><br></pre></td></tr></table></figure><p>可变性：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_list = []</span><br><span class="line">user_list.append(<span class="string">&quot;铁锤&quot;</span>)</span><br><span class="line">user_list.append(<span class="number">123</span>)</span><br><span class="line">user_list.append(<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(user_list)  <span class="comment"># [&quot;铁锤&quot;，123,True]</span></span><br></pre></td></tr></table></figure><p>不可变类型：字符串、布尔、整型（已最小，内部数据无法进行修改）（在Python中创建，就已经是最小的单位了不能对他进行修改了）</p><p>可变类型：列表（内部数据元素可以修改）</p><h2 id="列表的独有功能"><a href="#列表的独有功能" class="headerlink" title="列表的独有功能"></a>列表的独有功能</h2><p>Python中为所有的列表类型的数据提供了一批独有的功能。</p><p>在开始学习列表之前，先来做一个字符串和列表的对比</p><ul><li>字符串，不可变，即：创建好之后内部就无法修改。【独有功能都是新创建一份数据】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;alex&quot;</span></span><br><span class="line">data = name.upper()</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><ul><li>列表，可变，即：创建号之后内部元素可以修改。【独有功能基本上都是直接操作列表内部，不会创建新的一份数据】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;车子&quot;</span>,<span class="string">&quot;妹子&quot;</span>]</span><br><span class="line">user_list.append(<span class="string">&quot;嫂子&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment"># [&quot;车子&quot;,&quot;妹子&quot;，&quot;嫂子&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="列表追加"><a href="#列表追加" class="headerlink" title="列表追加"></a>列表追加</h3><p>追加，在原列表中尾部追加值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data_list = []</span><br><span class="line">v1 = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名&quot;</span>) <span class="comment"># &quot;alex&quot;</span></span><br><span class="line">v2 = <span class="built_in">input</span>(<span class="string">&quot;请输入姓名&quot;</span>) <span class="comment"># &quot;eric&quot;</span></span><br><span class="line">data_list.append(v1)</span><br><span class="line">data_list.append(v2)</span><br><span class="line"><span class="built_in">print</span>(data_list)  <span class="comment"># [&quot;alex&quot;,&quot;eric&quot;]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例1</span></span><br><span class="line">user_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    user = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名(Q退出)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    user_list.append(user)</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(user_list)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例2</span></span><br><span class="line">welcome = <span class="string">&quot;欢迎使用NB游戏&quot;</span>.center(<span class="number">30</span>,<span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(welcome)</span><br><span class="line"></span><br><span class="line">user_count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    count = <span class="built_in">input</span>(<span class="string">&quot;请输入游戏人数：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> count.isdecimal():</span><br><span class="line">        user_count = <span class="built_in">int</span>(count)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入格式错误，人数必须是数字。&quot;</span>)</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;&#123;&#125;人参加游戏NB游戏。&quot;</span>.<span class="built_in">format</span>(user_count)</span><br><span class="line"></span><br><span class="line">user_name_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,user_count+<span class="number">1</span>):</span><br><span class="line">    tips = <span class="string">&quot;请输入玩家姓名(&#123;&#125;/&#123;&#125;):&quot;</span>.<span class="built_in">format</span>(i,user_count)</span><br><span class="line">    name = <span class="built_in">input</span>(tips)</span><br><span class="line">    user_name_list.append(name)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user_name_list)</span><br></pre></td></tr></table></figure><h3 id="列表批量追加"><a href="#列表批量追加" class="headerlink" title="列表批量追加"></a>列表批量追加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tools = [<span class="string">&quot;搬砖&quot;</span>,<span class="string">&quot;菜刀&quot;</span>,<span class="string">&quot;榔头&quot;</span>]</span><br><span class="line">weapon = [<span class="string">&quot;AK47&quot;</span>,<span class="string">&quot;M6&quot;</span>]</span><br><span class="line">tools.extend(weapon)  <span class="comment"># weapon中的值逐一追加到tools  可以在（）内直接输入一个列表，也可 以先定义一个变量</span></span><br><span class="line">注意先后顺序</span><br><span class="line"><span class="comment">#.extend还可以用于字符串，将字符串中的每一个元素逐一加入列表中</span></span><br><span class="line"><span class="built_in">print</span>(tools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于 （扩展）</span></span><br><span class="line">tools = [<span class="string">&quot;搬砖&quot;</span>,<span class="string">&quot;菜刀&quot;</span>,<span class="string">&quot;榔头&quot;</span>]</span><br><span class="line">weapon = [<span class="string">&quot;AK47&quot;</span>,<span class="string">&quot;M6&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> weapon:</span><br><span class="line">    tools.append(item)</span><br><span class="line"><span class="comment">#还是按顺序循环</span></span><br><span class="line"><span class="built_in">print</span>(tools)</span><br><span class="line">其实extend的内部程序其实就是该程序</span><br></pre></td></tr></table></figure><p>批量追加的两种方法</p><h3 id="列表插入"><a href="#列表插入" class="headerlink" title="列表插入"></a>列表插入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;苍老师&quot;</span>,<span class="string">&quot;有坂深雪&quot;</span>,<span class="string">&quot;大桥未久&quot;</span>]</span><br><span class="line">user_list.insert(<span class="number">0</span>,<span class="string">&quot;马蓉&quot;</span>)  <span class="comment"># 把马蓉放在第0个索引位置，原先的元素后退一格</span></span><br><span class="line">user_list.insert(<span class="number">2</span>,<span class="string">&quot;李小璐&quot;</span>) <span class="comment"># 把李小璐放在第2个索引位置，</span></span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment">#[&#x27;马蓉&#x27;, &#x27;苍老师&#x27;, &#x27;李小璐&#x27;, &#x27;有坂深雪&#x27;, &#x27;大桥未久&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line">name_list = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;请输入购买火车票用户姓名（Q/q退出）：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> name.upper() == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> name.startswith(<span class="string">&quot;刁&quot;</span>):</span><br><span class="line">        name_list.insert(<span class="number">0</span>,name)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name_list.append(name)</span><br><span class="line"><span class="built_in">print</span>(name_list)</span><br></pre></td></tr></table></figure><ul><li><p>注意：</p><p>当索引值小于0的时候，程序就会永远把这个数据放在最前面</p><p>当索引值大于列表长度的时候，程序就会永远把这个数据放在最后面</p></li></ul><h3 id="列表根据值删除"><a href="#列表根据值删除" class="headerlink" title="列表根据值删除"></a>列表根据值删除</h3><p>（从左到右找到第一个删除）【慎用，里面没有就会报错】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;陈羽凡&quot;</span>,<span class="string">&quot;Alex&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>,<span class="string">&quot;Alex&quot;</span>]</span><br><span class="line">user_list.remove(<span class="string">&quot;Alex&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(user_list)  <span class="comment">#[&#x27;王宝强&#x27;, &#x27;陈羽凡&#x27;, &#x27;贾乃亮&#x27;, &#x27;Alex&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>如果要删除多次：要进行循环</li><li>如果想要解决报错问题，可以先判断一下这个字符串存在不存在这个列表，再进行删除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;陈羽凡&quot;</span>,<span class="string">&quot;Alex&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>,<span class="string">&quot;Alex&quot;</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Alex&quot;</span> <span class="keyword">in</span> user_list:</span><br><span class="line">        user_list.remove(<span class="string">&quot;Alex&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(user_list)  <span class="comment">#[&#x27;王宝强&#x27;, &#x27;陈羽凡&#x27;, &#x27;贾乃亮&#x27;]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例：自动抽奖程序</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">data_list = [<span class="string">&quot;iphone12&quot;</span>,<span class="string">&quot;二手充气女友&quot;</span>,<span class="string">&quot;大保健一次&quot;</span>,<span class="string">&quot;泰国5日游&quot;</span>,<span class="string">&quot;避孕套&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;自动抽奖程序，请输入自己的姓名：&quot;</span>)</span><br><span class="line">    <span class="comment"># 随机从data_list抽取一个值出来</span></span><br><span class="line">    value = random.choice(data_list)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;恭喜&#123;&#125;，抽中&#123;&#125;。&quot;</span>.<span class="built_in">format</span>(name,value))</span><br><span class="line">    data_list.remove(value)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="列表根据索引踢出元素"><a href="#列表根据索引踢出元素" class="headerlink" title="列表根据索引踢出元素"></a>列表根据索引踢出元素</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">user_list = [&quot;王宝强&quot;,&quot;陈羽凡&quot;,&quot;Alex&quot;,&quot;贾乃亮&quot;,&quot;Alex&quot;]</span><br><span class="line">#          0       1       2       3     4</span><br><span class="line">user_list.pop(1)</span><br><span class="line">print(user_list)   # [&#x27;王宝强&#x27;, &#x27;Alex&#x27;, &#x27;贾乃亮&#x27;, &#x27;Alex&#x27;]</span><br><span class="line"></span><br><span class="line">user_list.pop() # 如果不写索引位置默认将最后一个元素删除</span><br><span class="line">print(user_list)  # &#x27;王宝强&#x27;, &#x27;Alex&#x27;, &#x27;贾乃亮&#x27;]</span><br><span class="line"></span><br><span class="line">item = user_list.pop(1)</span><br><span class="line"># 执行完后将列表的位置1元素删除了</span><br><span class="line"># 并且把删除的元素赋值给了变量item</span><br><span class="line">print(item)  # ”alex“</span><br><span class="line">print(user_list)  # [&#x27;王宝强&#x27;, &#x27;贾乃亮&#x27;]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [&quot;alex&quot;,&quot;李杰&quot;,&quot;eric&quot;,&quot;武沛齐&quot;,&quot;老妖&quot;,&quot;肝胆&quot;]</span></span><br><span class="line">user_queue = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    name = <span class="built_in">input</span>(<span class="string">&quot;北京~上海火车票，购买请输入姓名排队（Q退出）：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    user_queue.append(name)</span><br><span class="line">tick_count = <span class="number">3</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(tick_count):</span><br><span class="line">    username = user_queue.pop(<span class="number">0</span>)</span><br><span class="line">    message = <span class="string">&quot;恭喜&#123;&#125;,购买火车票成功。&quot;</span>.<span class="built_in">format</span>(username)</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line"><span class="comment"># user_queue = [&quot;武沛齐&quot;，&quot;老妖&quot;，&quot;肝胆&quot;]</span></span><br><span class="line">faild_user = <span class="string">&quot;、&quot;</span>.join(user_queue)</span><br><span class="line"></span><br><span class="line">faild_message = <span class="string">&quot;非常抱歉，票已售完，以下几位用户请选择其他出行方式，名单：&#123;&#125;。&quot;</span>.<span class="built_in">format</span>(faild_user)</span><br><span class="line"><span class="built_in">print</span>(faild_message)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="列表清空"><a href="#列表清空" class="headerlink" title="列表清空"></a>列表清空</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;陈羽凡&quot;</span>,<span class="string">&quot;Alex&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>,<span class="string">&quot;Alex&quot;</span>]</span><br><span class="line">user_list.clear()</span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment">#  []</span></span><br></pre></td></tr></table></figure><h3 id="列表根据值获取索引"><a href="#列表根据值获取索引" class="headerlink" title="列表根据值获取索引"></a>列表根据值获取索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;陈羽凡&quot;</span>,<span class="string">&quot;Alex&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>,<span class="string">&quot;Alex&quot;</span>]</span><br><span class="line"><span class="comment">#              0       1       2       3     4</span></span><br><span class="line">index = user_list.index(<span class="string">&quot;Alex&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(index) <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(user_list)  <span class="comment"># [&#x27;王宝强&#x27;, &#x27;陈羽凡&#x27;, &#x27;Alex&#x27;, &#x27;贾乃亮&#x27;, &#x27;Alex&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>如果要解决报错：可以先判断</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;陈羽凡&quot;</span>,<span class="string">&quot;Alex&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>,<span class="string">&quot;Alex&quot;</span>]</span><br><span class="line"><span class="comment">#              0       1       2       3     4</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;Alex&quot;</span> <span class="keyword">in</span> user_list:</span><br><span class="line">    index = user_list.index(<span class="string">&quot;Alex&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(index) <span class="comment"># 2</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不存在&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(user_list)  <span class="comment"># [&#x27;王宝强&#x27;, &#x27;陈羽凡&#x27;, &#x27;Alex&#x27;, &#x27;贾乃亮&#x27;, &#x27;Alex&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="列表元素排序"><a href="#列表元素排序" class="headerlink" title="列表元素排序"></a>列表元素排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数字排序</span></span><br><span class="line">num_list = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">11</span>,<span class="number">99</span>,<span class="number">88</span>]</span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br><span class="line">num_list.sort()  <span class="comment"># 进行从小到大进行排列</span></span><br><span class="line"><span class="built_in">print</span>(num_list)  <span class="comment">#[4, 5, 11, 11, 22, 88, 99]</span></span><br><span class="line"><span class="comment"># 如果从大到小排列</span></span><br><span class="line">num_list.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># sort（）的括号内除了可以加上面的东西，还可以加key=函数表达式</span></span><br><span class="line"><span class="built_in">print</span>(num_list) <span class="comment">#  [99, 88, 22, 11, 11, 5, 4]</span></span><br><span class="line"><span class="comment"># 字符串排序</span></span><br><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;ab陈羽凡&quot;</span>,<span class="string">&quot;Alex&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>,<span class="string">&quot;贾乃&quot;</span>,<span class="string">&quot;1&quot;</span>]</span><br><span class="line"><span class="comment">#           [29579, 23453, 24378]</span></span><br><span class="line"><span class="comment">#                    [97, 98, 38472, 32701, 20961]</span></span><br><span class="line"><span class="comment">#                               [65, 108, 101, 120]</span></span><br><span class="line">user_list.sort()</span><br><span class="line"><span class="comment">#  sort的排序的原理</span></span><br><span class="line"><span class="comment">#  如果是字符串进行排序</span></span><br><span class="line"><span class="comment">#  在程序内部则会将字符串转化为对应的unicode的编码</span></span><br><span class="line"><span class="comment">#  将所有字符串中的每个字符都先转化成unicode的码点</span></span><br><span class="line"><span class="comment">#  例如:[&quot;X X X&quot;,&quot;X X X X X &quot;]</span></span><br><span class="line"><span class="comment">#  先将每个字符的第一个码点（这里用x代表，即第一个X）</span></span><br><span class="line"><span class="comment">#  如果第一个码点一样，则开始比较第二位</span></span><br><span class="line"><span class="comment">#  如果第二位一样，就比第三位</span></span><br><span class="line"><span class="comment">#  比到第四位时，如果一个字符无第四位，一个字符串有第四位</span></span><br><span class="line"><span class="comment">#  那么就无第四位的那个字符串跟小</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(user_list)</span><br><span class="line"><span class="comment"># 验证如何排序（需要获取unicod编码）</span></span><br><span class="line">data = <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line">v1 = <span class="built_in">ord</span>(<span class="string">&quot;王&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)  <span class="comment"># 29579 （十进制表示）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(v1)) <span class="comment"># 0x738b(十六进制表示)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(v1)) <span class="comment"># 0b111001110001011(2进制)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个一个转化太麻烦，用循环</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">    v1 = <span class="built_in">ord</span>(char)</span><br><span class="line">    <span class="built_in">print</span>(v1)</span><br><span class="line"><span class="comment"># 29579  10进制</span></span><br><span class="line"><span class="comment"># 23453  10进制</span></span><br><span class="line"><span class="comment"># 24378  10进制</span></span><br><span class="line"></span><br><span class="line">data_list = []</span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> data:</span><br><span class="line">    v1 = <span class="built_in">ord</span>(char)</span><br><span class="line">    data_list.append(v1)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>注意：排序时内部元素无法进行比较时，程序会报错（尽量数据类型统一）</p><p>有些数据类型之间可以比较比如布尔类型与整型，有些数据类型之间不可以比较，比如整型和字符串</p></li></ul><h3 id="反转原列表"><a href="#反转原列表" class="headerlink" title="反转原列表"></a>反转原列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;陈羽凡&quot;</span>,<span class="string">&quot;Alex&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>,<span class="string">&quot;Alex&quot;</span>]</span><br><span class="line">user_list.reverse()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user_list)</span><br></pre></td></tr></table></figure><h2 id="列表的公共功能"><a href="#列表的公共功能" class="headerlink" title="列表的公共功能"></a>列表的公共功能</h2><h3 id="列表相加"><a href="#列表相加" class="headerlink" title="列表相加"></a>列表相加</h3><ul><li>相加，两个列表相加获取生成一个新的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&quot;赵四&quot;</span>,<span class="string">&quot;刘能&quot;</span>] + [<span class="string">&quot;宋晓锋&quot;</span>,<span class="string">&quot;范德彪&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data) <span class="comment">#  [&quot;赵四&quot;,&quot;刘能&quot;,&quot;宋晓锋&quot;,&quot;范德彪&quot;]</span></span><br><span class="line"></span><br><span class="line">v1 = [<span class="string">&quot;赵四&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line">v2 = [<span class="string">&quot;宋晓锋&quot;</span>,<span class="string">&quot;范德彪&quot;</span>]</span><br><span class="line">v3 = v1 + v2</span><br><span class="line"><span class="built_in">print</span>(v3)  <span class="comment">#  [&quot;赵四&quot;,&quot;刘能&quot;,&quot;宋晓锋&quot;,&quot;范德彪&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="列表相乘"><a href="#列表相乘" class="headerlink" title="列表相乘"></a>列表相乘</h3><ul><li>列表*整型：将列表中的元素再创建N份并生成一个新的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&quot;赵四&quot;</span>,<span class="string">&quot;刘能&quot;</span>] * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># [&quot;赵四&quot;,&quot;刘能&quot;,&quot;赵四&quot;,&quot;刘能&quot;]</span></span><br><span class="line"></span><br><span class="line">v1 = [<span class="string">&quot;赵四&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line">v2 = v1 * <span class="number">2</span> </span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># [&quot;赵四&quot;,&quot;刘能&quot;]</span></span><br><span class="line"><span class="built_in">print</span>(v2) <span class="comment"># [&quot;赵四&quot;,&quot;刘能&quot;,&quot;赵四&quot;,&quot;刘能&quot;]</span></span><br></pre></td></tr></table></figure><ul><li>注意：只创建一个新列表，只是里面的元素相乘了而已</li></ul><h3 id="运算符in包含"><a href="#运算符in包含" class="headerlink" title="运算符in包含"></a>运算符in包含</h3><ul><li>由于列表内部是由多个元素组成，可以通过in来判断元素是否再列表中。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;狗子&quot;</span>,<span class="string">&quot;二蛋&quot;</span>,<span class="string">&quot;沙雕&quot;</span>,<span class="string">&quot;alex&quot;</span>]</span><br><span class="line">result = <span class="string">&quot;alex&quot;</span> <span class="keyword">in</span> user_list</span><br><span class="line"><span class="comment"># result = &quot;alex&quot; not in user_list</span></span><br><span class="line"><span class="built_in">print</span>(result) <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;alex&quot;</span> <span class="keyword">in</span> user_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;在，把他删除&quot;</span>)</span><br><span class="line">    user_list.remove(<span class="string">&quot;alex&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不在&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>注意：该功能的返回值是布尔类型，一般是用来判断的</p></li><li><p>补充：字符串类型的也可以用in判断在不在里面</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">&quot;打倒小日本&quot;</span></span><br><span class="line">data = <span class="string">&quot;日&quot;</span> <span class="keyword">in</span> text <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line">user_list = [<span class="string">&quot;狗子&quot;</span>,<span class="string">&quot;二蛋&quot;</span>,<span class="string">&quot;沙雕&quot;</span>,<span class="string">&quot;alex&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;alex&quot;</span> <span class="keyword">in</span> user_list:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;在，把他删除&quot;</span>)</span><br><span class="line">    user_list.remove(<span class="string">&quot;alex&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;不在&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line">user_list = [<span class="string">&quot;王宝强&quot;</span>,<span class="string">&quot;陈羽凡&quot;</span>,<span class="string">&quot;Alex&quot;</span>,<span class="string">&quot;贾乃亮&quot;</span>,<span class="string">&quot;Alex&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;Alex&quot;</span> <span class="keyword">in</span> user_list:</span><br><span class="line">    index = user_list.index(<span class="string">&quot;Alex&quot;</span>)</span><br><span class="line">    user_list.pop(index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例：敏感词替换</span></span><br><span class="line">text = <span class="built_in">input</span>(<span class="string">&quot;请输入文本内容：&quot;</span>)</span><br><span class="line"></span><br><span class="line">forbidden_list = [<span class="string">&quot;草&quot;</span>,<span class="string">&quot;欧美&quot;</span>,<span class="string">&quot;日韩&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> forbidden_list:</span><br><span class="line">    text = text.replace(item,<span class="string">&quot;**&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注意：列表检查元素是否存在时，是否采用逐一比较的方式，效率会比较低</li></ul><h3 id="索取长度"><a href="#索取长度" class="headerlink" title="索取长度"></a>索取长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(user_list)) <span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="列表索引"><a href="#列表索引" class="headerlink" title="列表索引"></a>列表索引</h3><p>一个元素的操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">3</span>]) <span class="comment"># 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line">user_list[<span class="number">0</span>] = <span class="string">&quot;武沛齐&quot;</span></span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment"># [&#x27;武沛齐&#x27;, &#x27;刘华强&#x27;, &#x27;尼古拉斯赵四&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line"><span class="keyword">del</span> user_list[<span class="number">1</span>] <span class="comment"># 删除</span></span><br><span class="line"></span><br><span class="line">user_list.remove(<span class="string">&quot;刘华强&quot;</span>)  <span class="comment"># 删除</span></span><br><span class="line">ele = user_list.pop(<span class="number">1</span>) <span class="comment"># 删除并可以获取</span></span><br></pre></td></tr></table></figure><h3 id="列表切片"><a href="#列表切片" class="headerlink" title="列表切片"></a>列表切片</h3><ul><li>多个元素的操作（很少用）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">1</span>:])</span><br><span class="line"><span class="built_in">print</span>(user_list[:-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><ul><li>注意：索引的原则还是前取后不取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 改</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line">user_list[<span class="number">0</span>:<span class="number">2</span>] = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment"># 输出 [11,22,33,44,&quot;尼古拉斯赵四&quot;]</span></span><br><span class="line"></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line">user_list[<span class="number">2</span>:] = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment"># 输出 [&quot;范德彪&quot;,&quot;刘华强&quot;,&quot;尼古拉斯赵四&quot;,11,22,33,44]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你写的索引超出了该列表长度，那么程序会自动在后面追加，即加上后面的值</span></span><br><span class="line"></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line">user_list[<span class="number">30000</span>:] = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment"># [&quot;范德彪&quot;,&quot;刘华强&quot;,&quot;尼古拉斯赵四&quot;,11,22,33,44]</span></span><br><span class="line"><span class="comment"># 如果输出的要索引的值超过列表长度，程序并不会报错</span></span><br><span class="line"><span class="comment"># 程序只会把所改的值加到列表的最后面</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line">user_list[<span class="number">10000</span>:] = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment"># [&quot;范德彪&quot;,&quot;刘华强&quot;,&quot;尼古拉斯赵四&quot;,11,22,33,44]</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line">user_list[-<span class="number">10000</span>:<span class="number">1</span>] = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment"># [11,22,33,44,&quot;刘华强&quot;,&quot;尼古拉斯赵四&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除（按照范围去删除）</span></span><br><span class="line">user_list = user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>]</span><br><span class="line"><span class="keyword">del</span> user_list[<span class="number">1</span>:]</span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment"># [&quot;范德彪&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="列表步长"><a href="#列表步长" class="headerlink" title="列表步长"></a>列表步长</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"><span class="comment">#              0        1        2          3       4</span></span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])  <span class="comment">#</span></span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">0</span>::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">4</span>:<span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例:实现列表的翻转</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line">new_data = user_list[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(new_data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line">data_list.reverse()</span><br><span class="line"><span class="built_in">print</span>(data_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注意：revers只是将原来的列表调换数据，而第一个列表的翻转是创建一个新列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给你一个字符串请实现字符串的翻转</span></span><br><span class="line">name = <span class="string">&quot;武沛齐&quot;</span></span><br><span class="line">name[::-<span class="number">1</span>]   <span class="comment"># 这种方式可以翻转</span></span><br><span class="line">data = name.reverse  <span class="comment"># 这种方式不能翻转</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><ul><li>注意：字符串的翻转没有reverse</li></ul><h3 id="列表for循环"><a href="#列表for循环" class="headerlink" title="列表for循环"></a>列表for循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> user_list:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line"><span class="comment">#for index in range(len(user_list)):</span></span><br><span class="line">    item = user_list[index]</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>切记，循环的过程种对数据进行删除会踩坑【面试题】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 错误方式，有坑，结果不是你想要的</span></span><br><span class="line"><span class="comment"># 千万不要在循环的过程中，边循环获取列表的数据 边删除列表的数据</span></span><br><span class="line">user_list = [<span class="string">&quot;刘的话&quot;</span>,<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;刘尼古拉斯赵四&quot;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> user_list:</span><br><span class="line"><span class="comment"># 第一次索引拿 0 ，</span></span><br><span class="line"><span class="comment"># 程序判断有刘，那么就删除了0</span></span><br><span class="line"><span class="comment"># 那么”范德彪“就成了第0个</span></span><br><span class="line"><span class="comment"># 而循环后因为索引0已经循环完毕</span></span><br><span class="line"><span class="comment"># 那么就会索引第1个</span></span><br><span class="line"><span class="comment"># 此时1是”刘华强“</span></span><br><span class="line"><span class="comment"># 并不是”范德彪“</span></span><br><span class="line"><span class="comment"># 所以这样编程序会导致循环遗漏</span></span><br><span class="line">    <span class="keyword">if</span> item.startswith(<span class="string">&quot;刘&quot;</span>):</span><br><span class="line">        user_list.remove(item)</span><br><span class="line"><span class="built_in">print</span>(user_list) <span class="comment"># [&#x27;范德彪&#x27;, &#x27;刘尼古拉斯赵四&#x27;, &#x27;宋小宝&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>解决这个问题的办法就是倒着处理：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">user_list = [<span class="string">&quot;刘的话&quot;</span>,<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;刘尼古拉斯赵四&quot;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(user_list)-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>):</span><br><span class="line"><span class="comment"># 5 4 3 2 1 0</span></span><br><span class="line"><span class="comment"># 程序删除后面的值，并不影响前面的排序</span></span><br><span class="line"><span class="comment"># 如索先索引5”刘能“</span></span><br><span class="line"><span class="comment"># 索引完满足条件</span></span><br><span class="line"><span class="comment"># 删去</span></span><br><span class="line"><span class="comment"># 接下来程序要索引4</span></span><br><span class="line"><span class="comment"># 索引”宋小宝”</span></span><br><span class="line">    item = user_list[index]</span><br><span class="line">    <span class="keyword">if</span> item.startswith(<span class="string">&quot;刘&quot;</span>):</span><br><span class="line">        user_list.remove(item)</span><br><span class="line"><span class="built_in">print</span>(user_list)  <span class="comment"># [&#x27;范德彪&#x27;,&#x27;宋小宝&#x27;]</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="列表转换"><a href="#列表转换" class="headerlink" title="列表转换"></a>列表转换</h2><ul><li><p>就目前而言，所学的其他的数据类型基本上是没有办法转成列表，有的数据类型也可以转换但是没有什么意义</p><p>·int、bool类型无法转化成列表</p></li></ul><h3 id="str转换列表"><a href="#str转换列表" class="headerlink" title="str转换列表"></a>str转换列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;武沛齐&quot;</span></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">list</span>(name)</span><br><span class="line"><span class="built_in">print</span>(data) <span class="comment"># [&#x27;武&#x27;, &#x27;沛&#x27;, &#x27;齐&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>其他数据类型转化列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#元组转化列表</span></span><br><span class="line">v1 = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>) <span class="comment">#  元组</span></span><br><span class="line">vv1 = <span class="built_in">list</span>(v1)</span><br><span class="line"><span class="built_in">print</span>(vv1)  <span class="comment"># [11, 22, 33, 44]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#意义：元组是不可变类型，而列表的元素是可变类型，转化为列表可以修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#集合转换成列表</span></span><br><span class="line">v2 = &#123;<span class="string">&quot;alex&quot;</span>,<span class="string">&quot;eric&quot;</span>,<span class="string">&quot;dsb&quot;</span>&#125; <span class="comment">#  集合</span></span><br><span class="line">vv2 = <span class="built_in">list</span>(v2)</span><br><span class="line"><span class="built_in">print</span>(vv2)  <span class="comment">#  [&#x27;eric&#x27;, &#x27;alex&#x27;, &#x27;dsb&#x27;]</span></span><br></pre></td></tr></table></figure><h2 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h2><p>列表属于容器，内部可以存放各种数据，所以他也支持列表的嵌套，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&quot;谢广坤&quot;</span>,[<span class="string">&quot;海燕&quot;</span>,<span class="string">&quot;赵本山&quot;</span>],<span class="literal">True</span>,[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>],<span class="string">&quot;宋小宝&quot;</span>]</span><br><span class="line"><span class="comment">#         1            2      3      4          5</span></span><br><span class="line"><span class="comment"># 列表的嵌套就是列表里面的元素还有列表</span></span><br><span class="line"><span class="comment"># 与高中知识集合可以作为元素基本相同</span></span><br></pre></td></tr></table></figure><ul><li>对于嵌套的值，可以根据之前学习的索引知识点来进行学习，例如：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">data = [<span class="string">&quot;谢广坤&quot;</span>,[<span class="string">&quot;海燕&quot;</span>,<span class="string">&quot;赵本山&quot;</span>],<span class="literal">True</span>,[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>],<span class="string">&quot;宋小宝&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>]) <span class="comment"># 谢广坤</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">1</span>]) <span class="comment"># [&#x27;海燕&#x27;, &#x27;赵本山&#x27;]</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">0</span>][<span class="number">2</span>])<span class="comment"># 坤</span></span><br><span class="line"><span class="comment"># 索引后的元素0即字符串，再对字符串索引</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="number">1</span>][-<span class="number">1</span>]) <span class="comment"># 赵本山</span></span><br><span class="line">data.append(<span class="number">666</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># [&#x27;谢广坤&#x27;, [&#x27;海燕&#x27;, &#x27;赵本山&#x27;], True, [11, 22, 33, 44], &#x27;宋小宝&#x27;, 666]</span></span><br><span class="line"><span class="keyword">del</span> data[-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># [&#x27;谢广坤&#x27;, [&#x27;海燕&#x27;, &#x27;赵本山&#x27;], True, [11, 22, 33, 44], 666]</span></span><br><span class="line">data[<span class="number">1</span>].append(<span class="string">&quot;谢大脚&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># [&#x27;谢广坤&#x27;, [&#x27;海燕&#x27;, &#x27;赵本山&#x27;, &#x27;谢大脚&#x27;], True, [11, 22, 33, 44], 666]</span></span><br><span class="line"><span class="comment"># 先索引元素1，再将“谢大脚”加入元素1即元素列表中</span></span><br><span class="line"><span class="comment">#del data[-2]</span></span><br><span class="line"><span class="comment">#print(data)</span></span><br><span class="line"><span class="comment"># [&#x27;谢广坤&#x27;, [&#x27;海燕&#x27;, &#x27;赵本山&#x27;, &#x27;谢大脚&#x27;], True, 666]</span></span><br><span class="line">data[-<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&quot;alex&quot;</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># [&#x27;谢广坤&#x27;, [&#x27;海燕&#x27;, &#x27;赵本山&#x27;, &#x27;谢大脚&#x27;], True, [11, &#x27;alex&#x27;, 33, 44], 666]</span></span><br><span class="line"><span class="comment"># 注意要得出此结果要把上面的：</span></span><br><span class="line"><span class="comment"># del data[-2]</span></span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line"><span class="comment"># 注释掉</span></span><br><span class="line"></span><br><span class="line">data[<span class="number">1</span>][<span class="number">0</span>:<span class="number">2</span>] = [<span class="number">999</span>,<span class="number">666</span>]</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># &#x27;谢广坤&#x27;, [999, 666, &#x27;谢大脚&#x27;], True, [11, &#x27;alex&#x27;, 33, 44], 666]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line"><span class="comment"># 创建用户列表</span></span><br><span class="line"><span class="comment"># 用户列表应该长这样：</span></span><br><span class="line"><span class="comment"># [[&quot;alex&quot;,&quot;123&quot;],[&quot;eric&quot;,&quot;666&quot;]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># user_list = [[&quot;alex&quot;,&quot;123&quot;],[&#x27;eric&#x27;,&quot;666&quot;]]</span></span><br><span class="line"><span class="comment"># user_list.append([&quot;alex&quot;,&quot;123&quot;])</span></span><br><span class="line"><span class="comment"># user_list.append([&#x27;eric&#x27;,&quot;666&quot;])</span></span><br><span class="line"><span class="comment"># 这样写代码会把代码写死</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 灵活的代码如下</span></span><br><span class="line"></span><br><span class="line">user_list = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    user = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">    pwd  = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line"></span><br><span class="line">    data = []</span><br><span class="line">    data.append(user)</span><br><span class="line">    data.append(pwd)</span><br><span class="line"></span><br><span class="line">    user_list.append(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 简化</span></span><br><span class="line"></span><br><span class="line">user_list = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    user = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名(Q退出)：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码：&quot;</span>)</span><br><span class="line">    data = [user,pwd]</span><br><span class="line">    use_list.append(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(user_list)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h1><ul><li><p>列表（list），是一个有序且可变的容器，在里面可以存放多个不同类型的元素。</p><p>元组（tuple），是一个有序且不可变的容器，在里面可以存放多个不同类型的元素。</p><p>如何体现不变呢？</p><p>记住一句话：《“我儿子永远不能换成别人，但是我儿子可以长大“》</p></li></ul><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v1 = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)</span><br><span class="line">v2 = (<span class="string">&quot;李杰&quot;</span>,<span class="string">&quot;Alex&quot;</span>)</span><br><span class="line">v3 = (<span class="literal">True</span>,<span class="number">123</span>,<span class="string">&quot;Alex&quot;</span>,[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>])</span><br><span class="line"><span class="comment"># 儿子可以长大体现在：</span></span><br><span class="line"><span class="comment"># 如果元组里面的元素有列表</span></span><br><span class="line"><span class="comment"># 那么元组里面的那个列表</span></span><br><span class="line"><span class="comment"># 不能换成新的列表</span></span><br><span class="line"><span class="comment"># 但是可以在该列表里面添加元素</span></span><br></pre></td></tr></table></figure><ul><li>注意：建议在元组的最后多加一个逗号，用于标识他是一个元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 建议：建议在与那组的最后多加一个逗号</span><br><span class="line">v3 = (<span class="string">&quot;李杰&quot;</span>,<span class="string">&quot;Alex&quot;</span>,) <span class="comment"># 这个v3 与上面的v2是一样的</span></span><br></pre></td></tr></table></figure><ul><li>特殊情况</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">d1 = (<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 在这里单个元素时，没有逗号程序会把元组当（1）当作整型1</span></span><br><span class="line">d2 = (<span class="number">1</span>,)</span><br><span class="line"><span class="comment"># 带个逗号就不会当成整型1</span></span><br><span class="line"><span class="comment"># 有多个逗号不会了</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 面试题：</span></span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>比较值v1 = (<span class="number">1</span>) 和v2 = <span class="number">1</span> 和v3 = (<span class="number">1</span>,)，有什么区别？</span><br><span class="line"><span class="number">2.</span>比较值v1 =((<span class="number">1</span>),(<span class="number">2</span>),(<span class="number">3</span>))和 v2 = ((<span class="number">1</span>,)(<span class="number">2</span>,)(<span class="number">3</span>,),)有什么区别？</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我的答案：</p><p>（1）   v1表示整型，v2表示整型，v3表示元组，v1与v2没什么区别</p><p>（2）   v1表示元组，里面的元素是整型，v2也表示元组，里面的元素表示元组</p><p>标准答案：</p><p>（1）   v1整型，v2整形，v3元组</p><p>（2）   v1元组，里面元素是1、2、3</p><p>v2元组，里面元素是元组（1）、（2）、（3）</p><h2 id="独有功能"><a href="#独有功能" class="headerlink" title="独有功能"></a>独有功能</h2><p>无</p><h2 id="公共功能"><a href="#公共功能" class="headerlink" title="公共功能"></a>公共功能</h2><h3 id="元组相加"><a href="#元组相加" class="headerlink" title="元组相加"></a>元组相加</h3><ul><li>相加，两个元组相加获取生成一个新的元组。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = (<span class="string">&quot;赵四&quot;</span>,<span class="string">&quot;刘能&quot;</span>,) + (<span class="string">&quot;宋晓锋&quot;</span>,<span class="string">&quot;范德彪&quot;</span>,)</span><br><span class="line"><span class="built_in">print</span>(data) <span class="comment"># (&#x27;赵四&#x27;, &#x27;刘能&#x27;, &#x27;宋晓锋&#x27;, &#x27;范德彪&#x27;)</span></span><br><span class="line">v1 = (<span class="string">&quot;赵四&quot;</span>,<span class="string">&quot;刘能&quot;</span>,)</span><br><span class="line">v2 = (<span class="string">&quot;宋晓锋&quot;</span>,<span class="string">&quot;范德彪&quot;</span>,)</span><br><span class="line">v3 = v1 + v2</span><br><span class="line"><span class="built_in">print</span>(v3) <span class="comment">#  (&#x27;赵四&#x27;, &#x27;刘能&#x27;, &#x27;宋晓锋&#x27;, &#x27;范德彪&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="元组相乘"><a href="#元组相乘" class="headerlink" title="元组相乘"></a>元组相乘</h3><ul><li>相乘，列表*整型 将列表中的元素再创建N份并生成一个新的列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = (<span class="string">&quot;赵四&quot;</span>,<span class="string">&quot;刘能&quot;</span>,)*<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(data) <span class="comment"># (&#x27;赵四&#x27;, &#x27;刘能&#x27;, &#x27;赵四&#x27;, &#x27;刘能&#x27;)</span></span><br><span class="line"></span><br><span class="line">v1 = (<span class="string">&quot;赵四&quot;</span>,<span class="string">&quot;刘能&quot;</span>,)</span><br><span class="line">v2 = v1 * <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment"># (&quot;赵四&quot;,&quot;刘能&quot;,)</span></span><br><span class="line"><span class="built_in">print</span>(v2) <span class="comment"># (&#x27;赵四&#x27;, &#x27;刘能&#x27;, &#x27;赵四&#x27;, &#x27;刘能&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="获取长度"><a href="#获取长度" class="headerlink" title="获取长度"></a>获取长度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user_list = (<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(user_list))</span><br></pre></td></tr></table></figure><h3 id="元组索引"><a href="#元组索引" class="headerlink" title="元组索引"></a>元组索引</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_list = (<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,)</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h3 id="元组切片"><a href="#元组切片" class="headerlink" title="元组切片"></a>元组切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user_list = (<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,)</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">0</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">1</span>:])</span><br><span class="line"><span class="built_in">print</span>(user_list[:-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="元组步长"><a href="#元组步长" class="headerlink" title="元组步长"></a>元组步长</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">user_list = (<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,)</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">0</span>:<span class="number">2</span>:<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">1</span>::<span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(user_list[<span class="number">4</span>:<span class="number">1</span>:-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><ul><li>注意：索引、切片和步长是生成一个新的数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#字符串&amp;元组</span></span><br><span class="line"><span class="comment"># 需求，翻转元组。</span></span><br><span class="line">user_list = (<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>)</span><br><span class="line"><span class="comment"># 内部翻转不了</span></span><br><span class="line"><span class="comment"># 但是在外部可以创建一个新的翻转后的元组</span></span><br><span class="line">data = user_list[::-<span class="number">1</span>]</span><br><span class="line"><span class="comment">#列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的翻转</span></span><br><span class="line">user_list = [<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,<span class="string">&quot;宋小宝&quot;</span>,<span class="string">&quot;刘能&quot;</span>]</span><br><span class="line">data = user_list[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">user_list.reverse()</span><br><span class="line"><span class="built_in">print</span>(user_list)</span><br></pre></td></tr></table></figure><h3 id="元组for循环"><a href="#元组for循环" class="headerlink" title="元组for循环"></a>元组for循环</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">user_list = (<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> user_list:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line">user_list = (<span class="string">&quot;范德彪&quot;</span>,<span class="string">&quot;刘华强&quot;</span>,<span class="string">&quot;尼古拉斯赵四&quot;</span>,)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> user_list:</span><br><span class="line">    <span class="keyword">if</span> item == <span class="string">&#x27;刘华强&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><ul><li>目前：只有str、list、tuple可以被for循环。“xxx” [11,22,33 ] (111,22,33)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(user_list)):</span><br><span class="line">    item = user_list[index]</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h2 id="元组转换"><a href="#元组转换" class="headerlink" title="元组转换"></a>元组转换</h2><ul><li>其他类型转换为元组，使用tuple（其他类型），目前只有字符串和列表可以转换为元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;武沛齐&quot;</span></span><br><span class="line">data = <span class="built_in">tuple</span>(name)</span><br><span class="line"><span class="built_in">print</span>(data) <span class="comment">#(&#x27;武&#x27;, &#x27;沛&#x27;, &#x27;齐&#x27;)</span></span><br><span class="line"></span><br><span class="line">name = [<span class="string">&quot;武沛齐&quot;</span>,<span class="number">18</span>,<span class="string">&quot;pythonav&quot;</span>]</span><br><span class="line">data = <span class="built_in">tuple</span>(name)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h2 id="元组嵌套"><a href="#元组嵌套" class="headerlink" title="元组嵌套"></a>元组嵌套</h2><ul><li>由于元组和列表都可以充当容器，他们内部可以放很多元素，并且支持元素内的各种嵌套。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tu = (<span class="string">&#x27;今天姐姐不在家&#x27;</span>,<span class="string">&#x27;姐夫和小姨子再客厅聊天&#x27;</span>,(<span class="string">&#x27;姐夫问小姨子税后多少钱&#x27;</span>,<span class="string">&#x27;小姨子低声说道说和姐夫还钱&#x27;</span>,))</span><br><span class="line">tu1 = tu[<span class="number">0</span>]</span><br><span class="line">tu2 = tu[<span class="number">1</span>]</span><br><span class="line">tu3 = tu[<span class="number">2</span>]</span><br><span class="line">tu4 = tu[<span class="number">2</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tu1) <span class="comment"># 今天姐姐不在家</span></span><br><span class="line"><span class="built_in">print</span>(tu2) <span class="comment"># 姐夫和小姨子再客厅聊天</span></span><br><span class="line"><span class="built_in">print</span>(tu3) <span class="comment">#(&#x27;姐夫问小姨子税后多少钱&#x27;, &#x27;小姨子低声说道说和姐夫还钱&#x27;)</span></span><br><span class="line"><span class="built_in">print</span>(tu4) <span class="comment"># 小姨子低声说道说和姐夫还钱</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker1</title>
      <link href="/2023/11/27/Docker1/"/>
      <url>/2023/11/27/Docker1/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version#显示Docker的版本信息</span><br><span class="line">docker info#显示Docker的系统信息，包括镜像和容器的数量</span><br><span class="line">docker 命令 --help   #万能命令，显示Docker的所有命令</span><br></pre></td></tr></table></figure><ul><li>帮助文档的命令：doc文档下，点击reference，里面的Command-line就是命令行，每个命令都可以查到。</li></ul><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="docker-images-查看所有本地主机上的镜像"><a href="#docker-images-查看所有本地主机上的镜像" class="headerlink" title="docker images  查看所有本地主机上的镜像"></a><strong>docker images</strong>  查看所有本地主机上的镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">iyheart@iyheart-virtual-machine:~$ docker images</span><br><span class="line">REPOSITORY    TAG       IMAGE ID       CREATED        SIZE</span><br><span class="line">ubuntu        latest    e4c58958181a   8 weeks ago    77.8MB</span><br><span class="line">hello-world   latest    9c7a54a9a43c   7 months ago   13.3kB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line">REPOSITORY  镜像的仓库源</span><br><span class="line">TAG 镜像的标签</span><br><span class="line">IMAGE ID镜像的id</span><br><span class="line">CREATED 镜像的创建时间</span><br><span class="line">SIZE 镜像的大小</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">-a, --all             #列出所有镜像</span><br><span class="line">    --digests         Show digests</span><br><span class="line">-f, --filter filter   Filter output based on conditions provided</span><br><span class="line">    --format string   Format output using a custom template:</span><br><span class="line">                        &#x27;table&#x27;:            Print output in table format with column headers (default)</span><br><span class="line">                        &#x27;table TEMPLATE&#x27;:   Print output in table format using the given Go template</span><br><span class="line">                        &#x27;json&#x27;:             Print in JSON format</span><br><span class="line">                        &#x27;TEMPLATE&#x27;:         Print output using the given Go template.</span><br><span class="line">                        Refer to https://docs.docker.com/go/formatting/ for more information about</span><br><span class="line">                        formatting output with templates</span><br><span class="line">    --no-trunc        Don&#x27;t truncate output</span><br><span class="line"></span><br><span class="line">-q, --quiet           #显示镜像的ID</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-search-搜索镜像"><a href="#docker-search-搜索镜像" class="headerlink" title="docker search 搜索镜像"></a><strong>docker search</strong> 搜索镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">iyheart@iyheart-virtual-machine:~$ docker search mysql</span><br><span class="line">NAME                            DESCRIPTION                                      STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql                           MySQL is a widely used, open-source relation…   14664     [OK]       </span><br><span class="line">mariadb                         MariaDB Server is a high performing open sou…   5594      [OK]       </span><br><span class="line">percona                         Percona Server is a fork of the MySQL relati…   622       [OK]       </span><br><span class="line">phpmyadmin                      phpMyAdmin - A web interface for MySQL and M…   906       [OK]       </span><br><span class="line">bitnami/mysql                   Bitnami MySQL Docker Image                       104                  [OK]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker search --help</span><br><span class="line"></span><br><span class="line">可选项:</span><br><span class="line">-f, --filter filter   Filter output based on conditions provided</span><br><span class="line">--filter=STARS=3000  #搜索出来的镜像就是STARS大于3000的</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">********************************</span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker search mysql --filter=STARS=3000</span><br><span class="line">NAME      DESCRIPTION                                      STARS     OFFICIAL   AUTOMATED</span><br><span class="line">mysql     MySQL is a widely used, open-source relation…   14664     [OK]       </span><br><span class="line">mariadb   MariaDB Server is a high performing open sou…   5594      [OK]   </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">********************************</span></span><br><span class="line"></span><br><span class="line">--format string   Pretty-print search using a Go template</span><br><span class="line">--limit int       Max number of search results</span><br><span class="line">--no-trunc        Don&#x27;t truncate output</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="docker-pull-下载镜像"><a href="#docker-pull-下载镜像" class="headerlink" title="docker pull 下载镜像"></a><strong>docker pull</strong> 下载镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载镜像 docker pull 镜像名[:tag]</span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker pull mysql</span><br><span class="line">Using default tag: latest  # 如果不写 tag，默认就是 latest</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Pull complete # 分层下载，docker iamge的核心 联合文件系统</span><br><span class="line">93619dbc5b36: Pull complete </span><br><span class="line">99da31dd6142: Pull complete </span><br><span class="line">626033c43d70: Pull complete </span><br><span class="line">37d5d7efb64e: Pull complete </span><br><span class="line">ac563158d721: Pull complete </span><br><span class="line">d2ba16033dad: Pull complete </span><br><span class="line">688ba7d5c01a: Pull complete </span><br><span class="line">00e060b6d11d: Pull complete </span><br><span class="line">1c04857f594f: Pull complete </span><br><span class="line">4d7cfa90e6ea: Pull complete </span><br><span class="line">e0431212d27d: Pull complete </span><br><span class="line">Digest: sha256:e9027fe4d91c0153429607251656806cc784e914937271037f7738bd5b8e7709 # 签名 防伪</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest # 真实地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下两者是等价的</span></span><br><span class="line">docker pull mysql</span><br><span class="line">docker pull docker.io/library/mysql:latest</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定版本下载</span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker pull mysql:5.7</span><br><span class="line">5.7: Pulling from library/mysql</span><br><span class="line">72a69066d2fe: Already exists # 分层下载，使得不同版本能共用某些文件，这样极大的节省了内存空间</span><br><span class="line">93619dbc5b36: Already exists </span><br><span class="line">99da31dd6142: Already exists </span><br><span class="line">626033c43d70: Already exists </span><br><span class="line">37d5d7efb64e: Already exists </span><br><span class="line">ac563158d721: Already exists </span><br><span class="line">d2ba16033dad: Already exists </span><br><span class="line">0ceb82207cd7: Pull complete </span><br><span class="line">37f2405cae96: Pull complete </span><br><span class="line">e2482e017e53: Pull complete </span><br><span class="line">70deed891d42: Pull complete </span><br><span class="line">Digest: sha256:f2ad209efe9c67104167fc609cca6973c8422939491c9345270175a300419f94</span><br><span class="line">Status: Downloaded newer image for mysql:5.7</span><br><span class="line">docker.io/library/mysql:5.7</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>![docker1 图片1](assets&#x2F;docker1 图片1.png)</p><h3 id="docker-rmi-删除镜像"><a href="#docker-rmi-删除镜像" class="headerlink" title="docker rmi 删除镜像"></a><strong>docker rmi</strong> 删除镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iyheart@iyheart-virtual-machine:~$ docker rmi -f 镜像id #删除指定的镜像</span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker rmi -f 镜像id 镜像id 镜像id  # 删除多个镜像</span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker rmi -f $(docker images -aq) # 删除全部镜像</span><br></pre></td></tr></table></figure><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p><strong>说明：我们有了镜像才可以创建容器，linux，下载一个centos镜像来测试学习</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><h3 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a><strong>新建容器并启动</strong></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot; 容器名字 tomcat01 tomcat02, 用来区分容器</span><br><span class="line">-d  后台方式运行</span><br><span class="line">-it           使用交互方式运行，进入容器查看内容</span><br><span class="line">-p  指定容器的端口 -p 8080:8080</span><br><span class="line">-p ip:主机端口:容器端口</span><br><span class="line">-p 主机端口：容器端口（常用）</span><br><span class="line">-p 容器端口</span><br><span class="line">容器端口</span><br><span class="line">-p随即指定端口</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试，启动并进入容器</span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker run -it centos bin/bash</span><br><span class="line">[root@2e5cc43488e0 /]# ls   # 查看容器内的centos，基础版本，很多命令都是不完善的</span><br><span class="line">bin  etc   lib  lost+found  mnt  proc  run   srv  tmp  var</span><br><span class="line">dev  home  lib64  media       opt  root  sbin  sys  usr</span><br><span class="line">[root@2e5cc43488e0 /]# exit # 退出容器</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="列出所有在运行的容器"><a href="#列出所有在运行的容器" class="headerlink" title="列出所有在运行的容器"></a>列出所有在运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">docker ps 命令</span></span><br><span class="line">-a # 列出当前正在运行的容器+带出历史运行过的容器</span><br><span class="line">-n=? # 显示最近创建的容器</span><br><span class="line">-q # 只显示容器的编号</span><br><span class="line"></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND       CREATED         STATUS                      PORTS     NAMES</span><br><span class="line">2e5cc43488e0   centos         &quot;bin/bash&quot;    2 minutes ago   Exited (0) 51 seconds ago             sharp_spence</span><br><span class="line">a2633b88f9b5   hello-world    &quot;/hello&quot;      16 hours ago    Exited (0) 16 hours ago               optimistic_leakey</span><br><span class="line">d0d48538cbec   hello-world    &quot;/hello&quot;      4 days ago      Exited (0) 4 days ago                 beautiful_mclaren</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker ps -a -n=1</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND      CREATED         STATUS                     PORTS     NAMES</span><br><span class="line">2e5cc43488e0   centos    &quot;bin/bash&quot;   3 minutes ago   Exited (0) 2 minutes ago             sharp_spence</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit # 直接停止容器并退出</span><br><span class="line">Ctrl + P + Q # 容器不停止退出</span><br></pre></td></tr></table></figure><h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id# 删除指定的容器，不能删除正在运行的容器，如果强制删除 rm -f</span><br><span class="line">docker rm -f $(docker ps -aq)# 删除所有的容器</span><br><span class="line">docker ps -a -q|xargs docker rm # 删除所有的容器</span><br></pre></td></tr></table></figure><h3 id="启动和停止容器的操作"><a href="#启动和停止容器的操作" class="headerlink" title="启动和停止容器的操作"></a>启动和停止容器的操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id# 启动容器</span><br><span class="line">docker restart 容器id# 重启容器</span><br><span class="line">docker stop 容器id# 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id# 强制停止当前容器</span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><h3 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 docker run -d 镜像名:</span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker run -d centos</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">问题docker ps，发现 centos停止了</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常见的坑，docker 容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会自动停止</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx，容器启动后，发现自己没有提供服务，就会立即停止，没有程序了</span></span><br></pre></td></tr></table></figure><p><img src="/2023/11/27/Docker1/image-20231203124549822.png" alt="image-20231203124549822"></p><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 容器</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果没有日志，可以自己编写一段shell脚本</span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker run -d centos /bin/sh -c  &quot;while true;do echo abc;sleep 1;done&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">iyheart@iyheart-virtual-machine:~$ docker ps</span></span><br><span class="line">CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS     NAMES</span><br><span class="line">b8c7b5f31707   centos    &quot;/bin/sh -c &#x27;while t…&quot;   8 seconds ago   Up 6 seconds             kind_dewdney</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示日志</span></span><br><span class="line"> -tf  # 显示日志</span><br><span class="line"> --tail number  # 要显示日志条数</span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker logs -tf --tail 10 b8c7b5f31707</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="查看容器中进程信息-ps"><a href="#查看容器中进程信息-ps" class="headerlink" title="查看容器中进程信息 ps"></a>查看容器中进程信息 ps</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 docker top 容器<span class="built_in">id</span></span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker top 45193e60990d</span><br><span class="line">UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD</span><br><span class="line">root                4511                4471                0                   19:28               pts/0               00:00:00            /bin/bash</span><br></pre></td></tr></table></figure><h3 id="查看镜像源数据"><a href="#查看镜像源数据" class="headerlink" title="查看镜像源数据"></a>查看镜像源数据</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 docker inspect 容器<span class="built_in">id</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">-f, --format string   Format output using a custom template:</span><br><span class="line">                        &#x27;json&#x27;:             Print in JSON format</span><br><span class="line">                        &#x27;TEMPLATE&#x27;:         Print output using the given Go template.</span><br><span class="line">                        Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with</span><br><span class="line">                        templates</span><br><span class="line">  -s, --size            Display total file sizes if the type is container</span><br><span class="line">      --type string     Return JSON for specified type</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker inspect b8c7b5f31707</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Id&quot;: &quot;b8c7b5f317075244f4361437ea4ce0396823960e31974c3ed40a4b811f39068c&quot;,</span><br><span class="line">        &quot;Created&quot;: &quot;2023-12-03T05:02:48.706377904Z&quot;,</span><br><span class="line">        &quot;Path&quot;: &quot;/bin/sh&quot;,</span><br><span class="line">        &quot;Args&quot;: [</span><br><span class="line">            &quot;-c&quot;,</span><br><span class="line">            &quot;while true;do echo abc;sleep 1;done&quot;</span><br><span class="line">        ],</span><br><span class="line">        &quot;State&quot;: &#123;</span><br><span class="line">            &quot;Status&quot;: &quot;exited&quot;,</span><br><span class="line">            &quot;Running&quot;: false,</span><br><span class="line">            &quot;Paused&quot;: false,</span><br><span class="line">            &quot;Restarting&quot;: false,</span><br><span class="line">            &quot;OOMKilled&quot;: false,</span><br><span class="line">            &quot;Dead&quot;: false,</span><br><span class="line">            &quot;Pid&quot;: 0,</span><br><span class="line">            &quot;ExitCode&quot;: 137,</span><br><span class="line">            &quot;Error&quot;: &quot;&quot;,</span><br><span class="line">            &quot;StartedAt&quot;: &quot;2023-12-03T05:02:49.616046085Z&quot;,</span><br><span class="line">            &quot;FinishedAt&quot;: &quot;2023-12-03T05:06:04.965945912Z&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Image&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;,</span><br><span class="line">        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/b8c7b5f317075244f4361437ea4ce0396823960e31974c3ed40a4b811f39068c/resolv.conf&quot;,</span><br><span class="line">        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/b8c7b5f317075244f4361437ea4ce0396823960e31974c3ed40a4b811f39068c/hostname&quot;,</span><br><span class="line">        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/b8c7b5f317075244f4361437ea4ce0396823960e31974c3ed40a4b811f39068c/hosts&quot;,</span><br><span class="line">        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/b8c7b5f317075244f4361437ea4ce0396823960e31974c3ed40a4b811f39068c/b8c7b5f317075244f4361437ea4ce0396823960e31974c3ed40a4b811f39068c-json.log&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;/kind_dewdney&quot;,</span><br><span class="line">        &quot;RestartCount&quot;: 0,</span><br><span class="line">        &quot;Driver&quot;: &quot;overlay2&quot;,</span><br><span class="line">        &quot;Platform&quot;: &quot;linux&quot;,</span><br><span class="line">        &quot;MountLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;ProcessLabel&quot;: &quot;&quot;,</span><br><span class="line">        &quot;AppArmorProfile&quot;: &quot;docker-default&quot;,</span><br><span class="line">        &quot;ExecIDs&quot;: null,</span><br><span class="line">        &quot;HostConfig&quot;: &#123;</span><br><span class="line">            &quot;Binds&quot;: null,</span><br><span class="line">            &quot;ContainerIDFile&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LogConfig&quot;: &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;json-file&quot;,</span><br><span class="line">                &quot;Config&quot;: &#123;&#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;NetworkMode&quot;: &quot;default&quot;,</span><br><span class="line">            &quot;PortBindings&quot;: &#123;&#125;,</span><br><span class="line">            &quot;RestartPolicy&quot;: &#123;</span><br><span class="line">                &quot;Name&quot;: &quot;no&quot;,</span><br><span class="line">                &quot;MaximumRetryCount&quot;: 0</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;AutoRemove&quot;: false,</span><br><span class="line">            &quot;VolumeDriver&quot;: &quot;&quot;,</span><br><span class="line">            &quot;VolumesFrom&quot;: null,</span><br><span class="line">            &quot;ConsoleSize&quot;: [</span><br><span class="line">                24,</span><br><span class="line">                80</span><br><span class="line">            ],</span><br><span class="line">            &quot;CapAdd&quot;: null,</span><br><span class="line">            &quot;CapDrop&quot;: null,</span><br><span class="line">            &quot;CgroupnsMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Dns&quot;: [],</span><br><span class="line">            &quot;DnsOptions&quot;: [],</span><br><span class="line">            &quot;DnsSearch&quot;: [],</span><br><span class="line">            &quot;ExtraHosts&quot;: null,</span><br><span class="line">            &quot;GroupAdd&quot;: null,</span><br><span class="line">            &quot;IpcMode&quot;: &quot;private&quot;,</span><br><span class="line">            &quot;Cgroup&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Links&quot;: null,</span><br><span class="line">            &quot;OomScoreAdj&quot;: 0,</span><br><span class="line">            &quot;PidMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Privileged&quot;: false,</span><br><span class="line">            &quot;PublishAllPorts&quot;: false,</span><br><span class="line">            &quot;ReadonlyRootfs&quot;: false,</span><br><span class="line">            &quot;SecurityOpt&quot;: null,</span><br><span class="line">            &quot;UTSMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;UsernsMode&quot;: &quot;&quot;,</span><br><span class="line">            &quot;ShmSize&quot;: 67108864,</span><br><span class="line">            &quot;Runtime&quot;: &quot;runc&quot;,</span><br><span class="line">            &quot;Isolation&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpuShares&quot;: 0,</span><br><span class="line">            &quot;Memory&quot;: 0,</span><br><span class="line">            &quot;NanoCpus&quot;: 0,</span><br><span class="line">            &quot;CgroupParent&quot;: &quot;&quot;,</span><br><span class="line">            &quot;BlkioWeight&quot;: 0,</span><br><span class="line">            &quot;BlkioWeightDevice&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadBps&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceWriteBps&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceReadIOps&quot;: [],</span><br><span class="line">            &quot;BlkioDeviceWriteIOps&quot;: [],</span><br><span class="line">            &quot;CpuPeriod&quot;: 0,</span><br><span class="line">            &quot;CpuQuota&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimePeriod&quot;: 0,</span><br><span class="line">            &quot;CpuRealtimeRuntime&quot;: 0,</span><br><span class="line">            &quot;CpusetCpus&quot;: &quot;&quot;,</span><br><span class="line">            &quot;CpusetMems&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Devices&quot;: [],</span><br><span class="line">            &quot;DeviceCgroupRules&quot;: null,</span><br><span class="line">            &quot;DeviceRequests&quot;: null,</span><br><span class="line">            &quot;MemoryReservation&quot;: 0,</span><br><span class="line">            &quot;MemorySwap&quot;: 0,</span><br><span class="line">            &quot;MemorySwappiness&quot;: null,</span><br><span class="line">            &quot;OomKillDisable&quot;: null,</span><br><span class="line">            &quot;PidsLimit&quot;: null,</span><br><span class="line">            &quot;Ulimits&quot;: null,</span><br><span class="line">            &quot;CpuCount&quot;: 0,</span><br><span class="line">            &quot;CpuPercent&quot;: 0,</span><br><span class="line">            &quot;IOMaximumIOps&quot;: 0,</span><br><span class="line">            &quot;IOMaximumBandwidth&quot;: 0,</span><br><span class="line">            &quot;MaskedPaths&quot;: [</span><br><span class="line">                &quot;/proc/asound&quot;,</span><br><span class="line">                &quot;/proc/acpi&quot;,</span><br><span class="line">                &quot;/proc/kcore&quot;,</span><br><span class="line">                &quot;/proc/keys&quot;,</span><br><span class="line">                &quot;/proc/latency_stats&quot;,</span><br><span class="line">                &quot;/proc/timer_list&quot;,</span><br><span class="line">                &quot;/proc/timer_stats&quot;,</span><br><span class="line">                &quot;/proc/sched_debug&quot;,</span><br><span class="line">                &quot;/proc/scsi&quot;,</span><br><span class="line">                &quot;/sys/firmware&quot;,</span><br><span class="line">                &quot;/sys/devices/virtual/powercap&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;ReadonlyPaths&quot;: [</span><br><span class="line">                &quot;/proc/bus&quot;,</span><br><span class="line">                &quot;/proc/fs&quot;,</span><br><span class="line">                &quot;/proc/irq&quot;,</span><br><span class="line">                &quot;/proc/sys&quot;,</span><br><span class="line">                &quot;/proc/sysrq-trigger&quot;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;GraphDriver&quot;: &#123;</span><br><span class="line">            &quot;Data&quot;: &#123;</span><br><span class="line">                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/cd4df83ee866f8f211fff6bab2a3dfe6fe57d6096754d6390df91c997d87420b-init/diff:/var/lib/docker/overlay2/17ed3a01cf050df63ae92a06a1d3c2e10573ac15ce450b7590affda6a7e88080/diff&quot;,</span><br><span class="line">                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/cd4df83ee866f8f211fff6bab2a3dfe6fe57d6096754d6390df91c997d87420b/merged&quot;,</span><br><span class="line">                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/cd4df83ee866f8f211fff6bab2a3dfe6fe57d6096754d6390df91c997d87420b/diff&quot;,</span><br><span class="line">                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/cd4df83ee866f8f211fff6bab2a3dfe6fe57d6096754d6390df91c997d87420b/work&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;Name&quot;: &quot;overlay2&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;Mounts&quot;: [],</span><br><span class="line">        &quot;Config&quot;: &#123;</span><br><span class="line">            &quot;Hostname&quot;: &quot;b8c7b5f31707&quot;,</span><br><span class="line">            &quot;Domainname&quot;: &quot;&quot;,</span><br><span class="line">            &quot;User&quot;: &quot;&quot;,</span><br><span class="line">            &quot;AttachStdin&quot;: false,</span><br><span class="line">            &quot;AttachStdout&quot;: false,</span><br><span class="line">            &quot;AttachStderr&quot;: false,</span><br><span class="line">            &quot;Tty&quot;: false,</span><br><span class="line">            &quot;OpenStdin&quot;: false,</span><br><span class="line">            &quot;StdinOnce&quot;: false,</span><br><span class="line">            &quot;Env&quot;: [</span><br><span class="line">                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Cmd&quot;: [</span><br><span class="line">                &quot;/bin/sh&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;while true;do echo abc;sleep 1;done&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;Image&quot;: &quot;centos&quot;,</span><br><span class="line">            &quot;Volumes&quot;: null,</span><br><span class="line">            &quot;WorkingDir&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Entrypoint&quot;: null,</span><br><span class="line">            &quot;OnBuild&quot;: null,</span><br><span class="line">            &quot;Labels&quot;: &#123;</span><br><span class="line">                &quot;org.label-schema.build-date&quot;: &quot;20210915&quot;,</span><br><span class="line">                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,</span><br><span class="line">                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,</span><br><span class="line">                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,</span><br><span class="line">                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;NetworkSettings&quot;: &#123;</span><br><span class="line">            &quot;Bridge&quot;: &quot;&quot;,</span><br><span class="line">            &quot;SandboxID&quot;: &quot;3dc39d8c49ab26e8d33429d9df18f123f5f253de1b0351bb1f74e05e8ee22342&quot;,</span><br><span class="line">            &quot;HairpinMode&quot;: false,</span><br><span class="line">            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;LinkLocalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;Ports&quot;: &#123;&#125;,</span><br><span class="line">            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/3dc39d8c49ab&quot;,</span><br><span class="line">            &quot;SecondaryIPAddresses&quot;: null,</span><br><span class="line">            &quot;SecondaryIPv6Addresses&quot;: null,</span><br><span class="line">            &quot;EndpointID&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">            &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPAddress&quot;: &quot;&quot;,</span><br><span class="line">            &quot;IPPrefixLen&quot;: 0,</span><br><span class="line">            &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">            &quot;MacAddress&quot;: &quot;&quot;,</span><br><span class="line">            &quot;Networks&quot;: &#123;</span><br><span class="line">                &quot;bridge&quot;: &#123;</span><br><span class="line">                    &quot;IPAMConfig&quot;: null,</span><br><span class="line">                    &quot;Links&quot;: null,</span><br><span class="line">                    &quot;Aliases&quot;: null,</span><br><span class="line">                    &quot;NetworkID&quot;: &quot;af2411cafe6c9ea5ab439c16bb0e87a9c69b3fb049352b998fbdc0565f790ff0&quot;,</span><br><span class="line">                    &quot;EndpointID&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;IPAddress&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;IPPrefixLen&quot;: 0,</span><br><span class="line">                    &quot;IPv6Gateway&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;GlobalIPv6PrefixLen&quot;: 0,</span><br><span class="line">                    &quot;MacAddress&quot;: &quot;&quot;,</span><br><span class="line">                    &quot;DriverOpts&quot;: null</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们通常容器都是使用后台方式运行的，需要进入容器，修改一些配置</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令</span></span><br><span class="line">docker exec -it 容器id bashshell</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND       CREATED        STATUS        PORTS     NAMES</span><br><span class="line">45193e60990d   centos    &quot;/bin/bash&quot;   10 hours ago   Up 10 hours             modest_hypatia</span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker exec -it 45193e60990d</span><br><span class="line">&quot;docker exec&quot; requires at least 2 arguments.</span><br><span class="line">See &#x27;docker exec --help&#x27;.</span><br><span class="line"></span><br><span class="line">Usage:  docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br><span class="line"></span><br><span class="line">Execute a command in a running container</span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker exec -it 45193e60990d /bin/bash</span><br><span class="line">[root@45193e60990d /]# ps -ef</span><br><span class="line">UID          PID    PPID  C STIME TTY          TIME CMD</span><br><span class="line">root           1       0  0 11:28 pts/0    00:00:00 /bin/bash</span><br><span class="line">root          15       0  0 14:36 pts/1    00:00:00 /bin/bash</span><br><span class="line">root          29      15  0 14:36 pts/1    00:00:00 ps -ef</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">方式二</span></span><br><span class="line">dokcer attach 容器id</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试</span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker attach 45193e60990d  </span><br><span class="line">正在执行当前的代码....</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker <span class="built_in">exec</span> <span class="comment"># 进入容器后开启一个新的终端</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker attach <span class="comment"># 进入容器正在执行的终端，不会启动新的进程</span></span></span><br></pre></td></tr></table></figure><h3 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 docker <span class="built_in">cp</span> 容器<span class="built_in">id</span>:容器内路径 目的主机路径</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看当前主机目录下</span></span><br><span class="line">iyheart@iyheart-virtual-machine:/home$ ls</span><br><span class="line">555.java  iyheart</span><br><span class="line">iyheart@iyheart-virtual-machine:/home$ docker ps</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                   CREATED         STATUS                       PORTS     NAMES</span><br><span class="line">f7128d9a8bd9   centos         &quot;/bin/bash&quot;               4 minutes ago   Exited (0) 13 seconds ago              condescending_bhaskara</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入docker容器内部</span></span><br><span class="line">iyheart@iyheart-virtual-machine:/home$ docker attach f7128d9a8bd9</span><br><span class="line">[root@f7128d9a8bd9 /]# cd /home</span><br><span class="line">[root@f7128d9a8bd9 home]# ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在容器内新建一个文件</span></span><br><span class="line">[root@f7128d9a8bd9 home]# touch test.java</span><br><span class="line">[root@f7128d9a8bd9 home]# ls</span><br><span class="line">test.java</span><br><span class="line">[root@f7128d9a8bd9 home]# exit</span><br><span class="line">exit</span><br><span class="line">iyheart@iyheart-virtual-machine:/home$ docker ps -a</span><br><span class="line">CONTAINER ID   IMAGE          COMMAND                   CREATED         STATUS                       PORTS     NAMES</span><br><span class="line">f7128d9a8bd9   centos         &quot;/bin/bash&quot;               4 minutes ago   Exited (0) 13 seconds ago              condescending_bhaskara</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将这文件拷贝出来到主机上</span></span><br><span class="line"></span><br><span class="line">iyheart@iyheart-virtual-machine:/home$ docker cp f7128d9a8bd9:/home/test.java /home</span><br><span class="line">Successfully copied 1.54kB to /home</span><br><span class="line">open /home/test.java: permission denied</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意这里出现报错，报错的原因是因为主机终端权限不足</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里只需要在docker命令前面添加sudo即可</span></span><br><span class="line"></span><br><span class="line">iyheart@iyheart-virtual-machine:/home$ sudo docker cp f7128d9a8bd9:/home/test.java /home</span><br><span class="line">Successfully copied 1.54kB to /home</span><br><span class="line">iyheart@iyheart-virtual-machine:/home$ ls</span><br><span class="line">555.java  iyheart  test.java</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝是一个手动的过程，未来我们使用 -v 卷的技术，可以实现连通</span></span><br></pre></td></tr></table></figure><h2 id="作业练习"><a href="#作业练习" class="headerlink" title="作业练习"></a>作业练习</h2><h4 id="docker部署Nignx"><a href="#docker部署Nignx" class="headerlink" title="docker部署Nignx"></a>docker部署Nignx</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker是否能正常运行</span></span><br><span class="line">docker version</span><br><span class="line">或者也可以使用指令 docker info</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看nignx</span></span><br><span class="line">可以使用指令docker search nignx</span><br><span class="line">也可以在docker hub上搜索nignx（推荐）（有帮助文档和指定版本）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拉取nignx镜像</span></span><br><span class="line">docker pull nignx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行nignx并测试</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行</span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker run -d --name nginx01 -p3344:80 nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d 后台运行</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name 给容器命名</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 宿主机端口:容器内部端口</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">######## （尚未解决）测试如何用公网访问Nginx  问题：不知道是哪个ip:80</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入nginx所在容器</span></span><br><span class="line">iyheart@iyheart-virtual-machine:~$ docker exec -it nginx01 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看nginx所在配置</span></span><br><span class="line">root@af25ad564c6a:/# whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib/nginx /etc/nginx /usr/share/nginx</span><br><span class="line">root@af25ad564c6a:/# cd /etc/nginx</span><br><span class="line">root@af25ad564c6a:/etc/nginx# ls</span><br><span class="line">conf.dmime.types  nginx.conf uwsgi_params</span><br><span class="line">fastcgi_paramsmodules     scgi_params</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2023/11/27/Docker1/image-20231204185046935.png" alt="image-20231204185046935"></p><p><img src="/2023/11/27/Docker1/image-20231204185121865.png" alt="image-20231204185121865"></p><p><img src="/2023/11/27/Docker1/image-20231204185145077.png" alt="image-20231204185145077"></p><p><img src="/2023/11/27/Docker1/image-20231204185200515.png" alt="image-20231204185200515"></p><p><img src="/2023/11/27/Docker1/image-20231204190057224.png" alt="image-20231204190057224"></p><ul><li>iyheart@iyheart-virtual-machine:~$ docker run -d –name nginx01 -p3344:80 nginx指令的意思：让外网能访问到docker容器内部的nginx</li></ul><p><img src="/2023/11/27/Docker1/image-20231204190248753.png" alt="image-20231204190248753"></p><ul><li>思考问题：我们每改动nginx配置文件，都需要进入容器内部，这十分麻烦。要是可以在容器外部提供一个映射路径，达到在容器修改文件名，容器内部就可以自动修改？ -v 数据卷</li></ul><h4 id="docker部署Tomcat"><a href="#docker部署Tomcat" class="headerlink" title="docker部署Tomcat"></a>docker部署Tomcat</h4><h4 id="docker部署ES-Kibana"><a href="#docker部署ES-Kibana" class="headerlink" title="docker部署ES+Kibana"></a>docker部署ES+Kibana</h4>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker概述与安装</title>
      <link href="/2023/11/27/Docker%E5%AE%89%E8%A3%85/"/>
      <url>/2023/11/27/Docker%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker学习"><a href="#Docker学习" class="headerlink" title="Docker学习"></a>Docker学习</h1><ul><li>Docker概述</li><li>Docker安装</li><li>Docker命令<ul><li>镜像命令</li><li>容器命令</li><li>操作命令</li><li>….</li></ul></li><li>Docker镜像</li><li>容器数据卷</li><li>DockerFile</li><li>Docker网络原理</li><li>IDEA整合Docker</li><li>Docker Compose</li><li>Docker Swarm</li><li>CI\CD jenkins</li></ul><h1 id="Docker概述"><a href="#Docker概述" class="headerlink" title="Docker概述"></a>Docker概述</h1><h2 id="Docker为什么会出现"><a href="#Docker为什么会出现" class="headerlink" title="Docker为什么会出现"></a>Docker为什么会出现</h2><ul><li>虚拟机太笨重，安装多了会拖延电影。</li><li>开发软件部署软件所需的环境费时费力。</li><li>为了方便软件的开发和上线。</li></ul><p>总总原因使得Docker的兴起</p><ul><li>Docker的思想来自于集装箱</li></ul><p>JRE–多个应用（端口冲突）–原来都是交叉的！</p><p>隔离：Docker核心思想就是打包装箱</p><h2 id="Docker的基本组成"><a href="#Docker的基本组成" class="headerlink" title="Docker的基本组成"></a>Docker的基本组成</h2><p><strong>镜像（image）：</strong></p><p>Docker镜像就好比一个模版，可以通过这个模版来创建容器服务，tomcat镜像&#x3D;&#x3D;&#x3D;》run&#x3D;&#x3D;&#x3D;》tomcat01容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。<font color="red">(镜像就像一个压缩包)</font></p><p><strong>容器（container）：</strong></p><p>Docker利用容器技术，独立运行一个或者一个组应用，通过镜像来创建的。</p><p>启动，停止，删除，基本命令。</p><p>目前就可以把这个容器理解为就是一个简易的linux系统，项目</p><p><strong>仓库（repository）</strong></p><p>仓库就是存放镜像的地方；</p><p>仓库分为公有仓库和私有仓库；</p><p>Docker Hub（默认是国外的）</p><p>阿里云等都有容器服务器（配置镜像加速）</p><h2 id="Docker的历史与发展"><a href="#Docker的历史与发展" class="headerlink" title="Docker的历史与发展"></a>Docker的历史与发展</h2><h2 id="Docker的其他"><a href="#Docker的其他" class="headerlink" title="Docker的其他"></a>Docker的其他</h2><ul><li><p>Docker是基于Go语言开发的开源项目</p></li><li><p>Docker的学习少不了看Docker官方的帮助文档，虽然是纯英文但是非常的详细，耐着性子看下去。</p></li><li><p>Docker官方</p></li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.docker.com/</span><br></pre></td></tr></table></figure><ul><li>Docker帮助文档的位置</li></ul><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%877.png" alt="Docker安装图片7"></p><ul><li>Docker仓库的地址：</li></ul><h1 id="Docker安装的前提准备"><a href="#Docker安装的前提准备" class="headerlink" title="Docker安装的前提准备"></a>Docker安装的前提准备</h1><ul><li>由于博主的系统是Windows11所以本次安装重点是在Windows11上Docker</li></ul><ol><li>linux上安装Docker去其他博客上搜索</li><li>mac上安装Docker去其他博客上搜索</li><li>Windows11上安装Docker在本篇文章</li></ol><h2 id="检查Windows11的版本"><a href="#检查Windows11的版本" class="headerlink" title="检查Windows11的版本"></a>检查Windows11的版本</h2><ul><li>先检查Windows11的版本，如果不是专业版的，那么就要在Windows11里面装一个虚拟机，在虚拟机上安装Docker。</li></ul><ol><li>先右键点击此电脑，再点击查看属性。</li><li>下划到Windows规格那一个框里面</li><li>查看Windows版本</li></ol><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%871-1701085559746-5.png" alt="Docker安装图片1"></p><ul><li>由于博主的Windows规格不是专业版，所以不能在该系统上安装Docker，除非去花钱激活专业版。</li><li>不是Windows专业版，在其上面安装Docker，server跑不起来。</li></ul><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><ul><li>先下载VMware，在官网中下载</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</span><br></pre></td></tr></table></figure><ul><li>下载完成后进行安装，安装过程中需要秘钥，秘钥去网上搜索</li><li>再去清华大学开源软件镜像网站去下载Ubuntu（虚拟机系统）</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/</span><br></pre></td></tr></table></figure><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%872.png" alt="Docker安装图片2"></p><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%873.png" alt="Docker安装图片3"></p><ul><li>安装完成Ubuntu和VMware后点击启动VMware并且在界面中点击创建新的虚拟机</li></ul><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%874-1701087911400-11.png" alt="Docker安装图片4"></p><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%875.png" alt="Docker安装图片5"></p><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%876.png" alt="Docker安装图片6"></p><ul><li>选择在清华大学镜像源里面下载的Ubuntu.ios文件，点击下一步进行安装</li></ul><h1 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h1><ul><li>在VMware中安装好Ubuntu后，进入Ubuntu进行Docker的安装。</li></ul><h2 id="环境查看"><a href="#环境查看" class="headerlink" title="环境查看"></a>环境查看</h2><ul><li>查看系统的内核</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入指令：uname -r</span><br><span class="line">6.2.0-37-generic</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>查看系统版本</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">输入指令： cat /etc/os-release</span><br><span class="line"></span><br><span class="line">PRETTY_NAME=&quot;Ubuntu 22.04.3 LTS&quot;</span><br><span class="line">NAME=&quot;Ubuntu&quot;</span><br><span class="line">VERSION_ID=&quot;22.04&quot;</span><br><span class="line">VERSION=&quot;22.04.3 LTS (Jammy Jellyfish)&quot;</span><br><span class="line">VERSION_CODENAME=jammy</span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">HOME_URL=&quot;https://www.ubuntu.com/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://help.ubuntu.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.launchpad.net/ubuntu/&quot;</span><br><span class="line">PRIVACY_POLICY_URL=&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span><br><span class="line">UBUNTU_CODENAME=jammy</span><br></pre></td></tr></table></figure><ul><li>在安装的过程中，查看帮助文档</li></ul><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%878.png" alt="Docker安装图片8"></p><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%879.png" alt="Docker安装图片9"></p><ul><li><p>如果是在Mac系统上安装Docker就点击苹果，在Windows pro 版本就点击中间的，在Linux安装就点击第三个</p></li><li><p>注意：博主是在Windows虚拟机Ubuntu中安装的Docker，Ubuntu是属于Linux内核开发的操作系统，故点击第三个</p></li></ul><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%8710.png" alt="Docker安装图片10"></p><p>点击之后就会出现在Ubuntu中安装Docker的一系列指令。</p><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%8711.jpg" alt="Docker安装图片11"></p><p>该红色方框的内容告知安装Docker，电脑的需求配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">要求拥有64位版本的最新LTS版本（Ubuntu jammy jellyfish 22.04）</span><br><span class="line">或当前的非LTS版本（Ubuntu Mantic Minotaur 23.10）</span><br><span class="line">Docker Desktop支持x86_64(或amd64)架构</span><br></pre></td></tr></table></figure><p>对于该条件博主在查看虚拟机版本时已经确认</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第六行 VERSION=<span class="string">&quot;22.04.3 LTS (Jammy Jellyfish)&quot;</span></span></span><br></pre></td></tr></table></figure><h2 id="查看帮助文档"><a href="#查看帮助文档" class="headerlink" title="查看帮助文档"></a>查看帮助文档</h2><ul><li>查看Docker的Doc帮助文档</li><li>Docker 的版本<ul><li>docker-ce社区版   docker-ee企业版    (推荐安装社区版)</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1、查看Ubuntu的桌面系统类型是否是gnome</span></span><br><span class="line">echo $XDG_CURRENT_DESKTOP</span><br><span class="line">ubuntu:GNOME</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果不是gnome系统需要安装gnome终端</span></span><br><span class="line">sudo apt install gnome-terminal</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2、卸载Ubuntu自带的旧版的Docker Desktop</span></span><br><span class="line">sudo apt remove docker-desktop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3、完全清理旧版配置和数据文件</span></span><br><span class="line">rm -r $HOME/.docker/desktop</span><br><span class="line">sudo rm /usr/local/bin/com.docker.cli</span><br><span class="line">sudo apt purge docker-desktop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">4、使用apt安装包</span></span><br><span class="line">sudo apt-get update</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装最新版本的Docker如下：</span></span><br><span class="line">sudo apt-get install </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装指定版本的Docker如下：</span></span><br><span class="line">docker-desktop-&lt;version&gt;-&lt;arch&gt;.deb</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装完之后出现如下提示错误信息忽略即可</span></span><br><span class="line">N: Download is performed unsandboxed as root, as file &#x27;/home/user/Downloads/docker-desktop.deb&#x27; couldn&#x27;t be accessed by user &#x27;_apt&#x27;. - pkgAcquire::Run (13: Permission denied)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5、设置镜像的仓库（网上搜索）</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">6、启动Docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">7、检查Docker是否成功启动</span></span><br><span class="line">docker version  #查看docker版本</span><br></pre></td></tr></table></figure><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%8712.png" alt="Docker安装图片12"></p><h2 id="测试Docker能否运行"><a href="#测试Docker能否运行" class="headerlink" title="测试Docker能否运行"></a>测试Docker能否运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%8713.png" alt="Docker安装图片13"></p><p>查看hello-world这个镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>了解：卸载Docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. 卸载依赖</span></span><br><span class="line">remove docker-re docker-re-cli containerd.io</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 删除资源</span></span><br><span class="line">rm -rf/var/lib/docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/var/lib/docker   docker的默认工作路径</span></span><br></pre></td></tr></table></figure><h2 id="阿里云镜像加速"><a href="#阿里云镜像加速" class="headerlink" title="阿里云镜像加速"></a>阿里云镜像加速</h2><ul><li>进入阿里云的官方网站，并注册</li><li>先点击左上角的产品，再点击容器，最后再点击，容器镜像产品ACR</li><li>找到镜像加速地址</li><li>根据官方给出的配置教程进行镜像加速的配置</li></ul><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%8714.png" alt="Docker安装图片14"></p><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%8715.png" alt="Docker安装图片15"></p><h2 id="回顾hello-world流程"><a href="#回顾hello-world流程" class="headerlink" title="回顾hello-world流程"></a>回顾hello-world流程</h2><p><img src="/2023/11/27/Docker%E5%AE%89%E8%A3%85/Docker%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%8713-1701446853754-5.png" alt="Docker安装图片13"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">1. Docker会在本机寻找镜像。判断本机是否存在该镜像，如果有该镜像直接运行即可.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">2. 如果本机不存在该镜像，就会显示输入指令后第一行信息,</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">并会在Docker Hub上下载</span></span><br><span class="line">Unable to find image &#x27;hello-world:latest&#x27; locally</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">3. 如果Docker Hub上有，那么就从下载到本地，并在本地运行</span></span><br></pre></td></tr></table></figure><ul><li>这里要注意，博主的电脑在Windows系统上是打开不了Docker Hub</li><li>这是因为Docker Hub配置不在Windows上而在虚拟机Ubuntu上</li><li>所以要在Ubuntu上的浏览器去访问Docker Hub</li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言指针草稿</title>
      <link href="/2023/11/06/%E6%8C%87%E9%92%88%E8%8D%89%E7%A8%BF/"/>
      <url>/2023/11/06/%E6%8C%87%E9%92%88%E8%8D%89%E7%A8%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="指针笔记草稿"><a href="#指针笔记草稿" class="headerlink" title="指针笔记草稿"></a>指针笔记草稿</h1><ol><li>在C中，指针加1指的是增加一个存储单元。对于数组而言，这意味着把加1后的地址是下一个元素的地址，而不是下一个字节的地址</li><li>指针的值是它所指向对象的地址。地址的表示方式依赖于计算机内部的硬件。大多数计算机都是按字节编址。一个较大对象的地址（如double类型的变量占8个字节）通常是该对象第一个字节的地址</li><li>在指针前面使用*运算符可以得到该指针所指向对象的值</li><li>指针加1，指针的值递增它所指向类型的大小（以字节为单位）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dates + <span class="number">2</span> == &amp;datas[<span class="number">2</span>]  <span class="comment">// 相同的地址</span></span><br><span class="line">*(dates + <span class="number">2</span>) == dates[<span class="number">2</span>] <span class="comment">// 相同的值</span></span><br></pre></td></tr></table></figure><p>以上体现了指针与数组的关系非常密切，datas不仅是数组名，还可以表示该数组的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C语言在描述数组时确实运用到了指针。</span></span><br><span class="line"></span><br><span class="line">ar[n] <span class="comment">// 该数组的定义意思就是*（ar + n)</span></span><br><span class="line">     <span class="comment">//即到内存的ar位置，然后移动n个单元，检索储存在那里的值 </span></span><br></pre></td></tr></table></figure><ul><li>注：指针中有个容易混淆的点</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*(dates+<span class="number">2</span>) <span class="comment">// dates第3个元素的值</span></span><br><span class="line">*dates+<span class="number">2</span> <span class="comment">// 相当于*（dates）+2     dates第1个元素的值加2</span></span><br><span class="line"><span class="comment">// 这里的间接运算符（*）的优先级高于+，</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样在编写程序的时候就可以适时使用指针表示法或者数组表示法。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> days[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针表示法       //数组表示法</span></span><br><span class="line">*(days + <span class="number">2</span>)；       days[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>明白了指针和数组是互通的，那么看看下面代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> days[<span class="number">6</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p, *q;</span><br><span class="line"></span><br><span class="line">p = &amp;days[<span class="number">1</span>]</span><br><span class="line">*q = p[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *q);</span><br><span class="line"><span class="comment">//此时*q的值应该为days[4]中元素的值</span></span><br><span class="line"><span class="comment">//p = &amp;days[1] 等价于 p = days + 1</span></span><br><span class="line"><span class="comment">//*q = p[2]    等价于 *q = *(p + 2)</span></span><br><span class="line"><span class="comment">//即*q = *(days + 1 + 2)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>C保证在给数组分配空间时，指向数组后面第一个位置的指针仍是有效的指针。这使得while循环的测试条件是有效的，因为start在循环中最后的值是end。注意，使用这种“越界”指针的函数调用更为简洁</p></li><li><p>虽然C保证了marbles + SIZE有效，但是对marbles[SIZE] (即储存在该位置上的值)未作任何保证，所以程序不能访问该位置。</p></li><li><p>注意：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">total += *start++;</span><br><span class="line"><span class="comment">//一元运算符*和++的优先级相同，但是结合律是从右往左</span></span><br><span class="line"><span class="comment">//所以start++先求值，然后才是*start</span></span><br></pre></td></tr></table></figure><p>ar[i]  和 *（ar +i）这俩个表达式都是等价的，只有当ar是指针变量时，才能使用ar++；</p><h2 id="指针的操作"><a href="#指针的操作" class="headerlink" title="指针的操作"></a>指针的操作</h2><h3 id="指针的公共功能"><a href="#指针的公共功能" class="headerlink" title="指针的公共功能"></a>指针的公共功能</h3><h4 id="指针赋值"><a href="#指针赋值" class="headerlink" title="指针赋值"></a>指针赋值</h4><p>可以把地址赋给指针。</p><p>注意：地址应该和指针类型兼容，一个声明为int类型的指针不能指向存储double类型数据的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> urn[<span class="number">5</span>] = &#123; <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;;</span><br><span class="line">    <span class="type">int</span> * ptr1, *ptr2, *ptr3;</span><br><span class="line">    </span><br><span class="line">    ptr1 = urn; <span class="comment">//把数组urn[0]的地址赋值给指针ptr1</span></span><br><span class="line">    ptr2 = &amp;urn[<span class="number">2</span>];  <span class="comment">//把urn[2]的地址赋值给指针ptr2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针解引用"><a href="#指针解引用" class="headerlink" title="指针解引用"></a>指针解引用</h4><p>*运算符给出指针指向地址上储存的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> urn[<span class="number">5</span>] = &#123; <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *ptr1;</span><br><span class="line">    </span><br><span class="line">    ptr1 = urn; <span class="comment">//把数组urn[0]的地址赋给指针ptr1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;*ptr1 = %d&quot;</span>, *ptr1) <span class="comment">//此时输出的值为100</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针取址"><a href="#指针取址" class="headerlink" title="指针取址"></a>指针取址</h4><p>指针也是变量，自然也会有相应的地址。用&amp;运算符给出指针本身的地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> urn[<span class="number">5</span>] = &#123; <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *ptr1, *ptr2;</span><br><span class="line">    </span><br><span class="line">    ptr1 = urn;  <span class="comment">//把数组urn[0]的地址赋给指针ptr1</span></span><br><span class="line">    ptr2 = &amp;ptr1；<span class="comment">//把指针变量ptr1的地址赋值给ptr2</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针与整数相加、减"><a href="#指针与整数相加、减" class="headerlink" title="指针与整数相加、减"></a>指针与整数相加、减</h4><p>可以使用+运算符把指针与整数相加，或整数与指针相加。</p><p>但是并不是将指针与整数直接相加，这与声明指针时的数据类型有关。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> urn[<span class="number">5</span>] = &#123; <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *ptr1, *ptr2;</span><br><span class="line">    </span><br><span class="line">    ptr1 = urn <span class="comment">//把数组urn[0]的地址赋给指针ptr1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr1 = %p&quot;</span>, ptr1);</span><br><span class="line">    <span class="comment">//ptr1 = 000000000065FE00</span></span><br><span class="line">    <span class="comment">//假设本系统的int类型是4字节</span></span><br><span class="line">    ptr1 = ptr1 + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr = %p&quot;</span>, ptr2);</span><br><span class="line">    <span class="comment">//ptr1 = 000000000065FE04</span></span><br><span class="line">    <span class="comment">//此时ptr1指向urn[1]</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//同样的</span></span><br><span class="line">    ptr1 = ptr1 - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//此时ptr1指向urn[0]</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>指针与整数相加并不是单纯加上该数，而是指针的值+整数*数据类型所占的字节。</p></li><li><p>指针与整数相加的意思就是指向下一个相同类型变量的地址</p></li><li><p>注：指针减一个整数时，指针只能是被减数，整数要做减数</p></li></ul><h4 id="指针递增、减"><a href="#指针递增、减" class="headerlink" title="指针递增、减"></a>指针递增、减</h4><p>与其他基本数据类型一样，指针也可以使用递增运算符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> urn[<span class="number">5</span>] = &#123; <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>&#125;;</span><br><span class="line">    <span class="type">int</span> *ptr1, *ptr2;</span><br><span class="line">    </span><br><span class="line">    ptr1 = urn <span class="comment">//把数组urn[0]的地址赋给指针ptr1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr1 = %p&quot;</span>, ptr1);</span><br><span class="line">    <span class="comment">//ptr1 = 000000000065FE00</span></span><br><span class="line">    <span class="comment">//假设本系统的int类型是4字节</span></span><br><span class="line">    ptr1++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr = %p&quot;</span>, ptr2);</span><br><span class="line">    <span class="comment">//ptr1 = 000000000065FE04</span></span><br><span class="line">    <span class="comment">//此时ptr1指向urn[1]</span></span><br><span class="line">    </span><br><span class="line">    ptr--;</span><br><span class="line">    <span class="comment">//ptr1 = 000000000065FE00</span></span><br><span class="line">    <span class="comment">//此时ptr1又指向原来的urn[0]    </span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针求差"><a href="#指针求差" class="headerlink" title="指针求差"></a>指针求差</h4><p>可以将两个指针相减。通常求差的指针分别指向同一数组的不同元素。</p><p>通过相减可以求出两个元素之间的距离。</p><p>差值的单位与数组类型的单位相同。</p><p>两个不同数组类型的指针相减会出错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> urn[<span class="number">5</span>] = &#123; <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span> &#125;;</span><br><span class="line"><span class="type">int</span> * ptr1, *ptr2, *ptr3;</span><br><span class="line"></span><br><span class="line">ptr1 = urn;   <span class="comment">// 把一个地址赋给指针</span></span><br><span class="line">ptr2 = &amp;urn[<span class="number">2</span>]; <span class="comment">// 把一个地址赋给指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;ptr2 - ptr1 = %td&quot;</span>, ptr2 - ptr1);</span><br><span class="line">    <span class="comment">//ptr2 - ptr1 = 2</span></span><br><span class="line">    <span class="comment">//注意2并不是2字节，而是2个int类型</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="指针比较"><a href="#指针比较" class="headerlink" title="指针比较"></a>指针比较</h4><p>使用关系运算符可以比较两个指针的值，但是前提是两个指针都指向相同类型的对象。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> urn[<span class="number">5</span>] = &#123; <span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span> &#125;;</span><br><span class="line"><span class="type">int</span> * ptr1, *ptr2, *ptr3, a;</span><br><span class="line">    </span><br><span class="line">    ptr1 = urn;</span><br><span class="line">ptr2 = &amp;urn[<span class="number">2</span>];</span><br><span class="line">    a = (ptr2 &gt; ptr1);</span><br><span class="line">    <span class="comment">// 比较为真a的值为1</span></span><br><span class="line">    a = (ptr2 == ptr1)</span><br><span class="line">    <span class="comment">// 比较为假a的值为0</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言数组与指针</title>
      <link href="/2023/11/05/%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88/"/>
      <url>/2023/11/05/%E6%95%B0%E7%BB%84%E4%B8%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>数组的基本介绍</li><li>一维数组</li><li>二维数组</li><li>多维数组</li></ul><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><h3 id="一、数组的基本介绍"><a href="#一、数组的基本介绍" class="headerlink" title="一、数组的基本介绍"></a>一、数组的基本介绍</h3><h4 id="1-数组的概念"><a href="#1-数组的概念" class="headerlink" title="1.数组的概念"></a>1.数组的概念</h4><p>数组由数据类型相同的一系列元素组成。</p><p>它是按照一定的顺序储存的，而不是随机分配到内存地址中。</p><p>顺序储存：这就意味着数组可以索引。</p><h4 id="2-数组的表示与声明"><a href="#2-数组的表示与声明" class="headerlink" title="2.数组的表示与声明"></a>2.数组的表示与声明</h4><ul><li>数组的表示</li></ul><p>数组的表示，数组可以由变量名后面跟一个方括号（[ ]）。</p><p>方括号里面输入一个整数表示该数组可以储存多少个类型相同的值。</p><p>例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">candy[<span class="number">10</span>]</span><br></pre></td></tr></table></figure><p>这就是数组的表示，但并不是声明数组，这两者有区别。</p><p>candy便是数组的变量名，而方括号里面的10则表示数组可以储存10个相同的数据。</p><p>注：这里可能会有个误区：candy是数组名而不是变量名（错）。数组名称即为变量名，声明candy后便不可再使用candy作为变量名。</p><ul><li>数组的声明</li></ul><p>声明数组，格式：数据类型 + 数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> n[<span class="number">10</span>]; <span class="comment">/* 内含10个int类型元素的数组 */</span></span><br><span class="line"><span class="type">char</span> ch[<span class="number">10</span>];<span class="comment">/* 内含10个char类型元素的数组 */</span></span><br><span class="line"><span class="type">float</span> f[<span class="number">10</span>];<span class="comment">/* 内含10个float类型元素的数组 */</span></span><br><span class="line"><span class="comment">//值得注意的是在声明数组中声明10个元素</span></span><br><span class="line"><span class="comment">//实际上第一个元素会被放在n[0]中，第10个元素会被放在n[9]中</span></span><br></pre></td></tr></table></figure><p>以上声明了整型的数组，字符类型的数组和浮点型的数组。</p><h4 id="3-初始化数组"><a href="#3-初始化数组" class="headerlink" title="3.初始化数组"></a>3.初始化数组</h4><p>初始化数组：按照一定的顺序将相同类型的数据放入数组中。</p><h5 id="直接初始化"><a href="#直接初始化" class="headerlink" title="直接初始化"></a>直接初始化</h5><p>直接在声明中把相同值赋值给数组元素，但是与普通赋值略有不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 8</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>; <span class="comment">//这是普通变量的赋值</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> power[SIZE] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">16</span>,<span class="number">32</span>,<span class="number">64</span>&#125;;</span><br><span class="line">    <span class="comment">//这是数组变量的赋值</span></span><br><span class="line">    <span class="comment">//要使用花括号将常量按顺序赋值给数组中的元素</span></span><br><span class="line">    <span class="comment">//此时power[0]的值就为1</span></span><br><span class="line">   <span class="comment">//这里还运用了符号常量来表示数组的大小</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以省略方括号中的数组，让编译器自动匹配数组大小和花括号中的项数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> power[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据类型1</title>
      <link href="/2023/11/04/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B1/"/>
      <url>/2023/11/04/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B1/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型1"><a href="#数据类型1" class="headerlink" title="数据类型1"></a>数据类型1</h1><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><ul><li>整型</li><li>布尔类型</li><li>字符串</li></ul><h2 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h2><ul><li>每种数据类型都有自己的特点及应用场景，以后的开发中需要根据实际的开发情况选择合适的数据类型。</li><li>结构相似的一些数据，有一些共同特征的数据的集合就是数据类型</li><li>每种数据类型按照以下4个维度<ol><li>定义（怎么样的数据），叫哪一类数据类型</li><li>独有功能（这些数据类型具有的独有功能）</li><li>公共功能（这些数据类型共同具有的功能）</li><li>类型转换（怎样把一个数据类型，转换成另一个数据类型）</li><li>其他</li></ol></li></ul><h2 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><p>整型其实就是十进制整数的统称，比如：1、68、999都属于整型。它一般都用于表示年龄、序号等。</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number = <span class="number">10</span></span><br><span class="line">age = <span class="number">99</span></span><br></pre></td></tr></table></figure><h4 id="独有功能"><a href="#独有功能" class="headerlink" title="独有功能"></a>独有功能</h4><ul><li>获取一个整型变量的二进制表示有多少位组成</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result1 = v1.bit_length()</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(v1))  <span class="comment"># 0b101 3位</span></span><br><span class="line"><span class="comment"># 调用v1 （int）独有功能，获取v1的二进制表示有多少个位组成。</span></span><br><span class="line">result1 = v1.bit_length()</span><br><span class="line"><span class="built_in">print</span>(result1)   <span class="comment"># 3   这就意味着v1有3个二进制位</span></span><br><span class="line"></span><br><span class="line">v2 = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">10</span>))  <span class="comment"># 0b1010</span></span><br><span class="line"><span class="comment"># 调用v2 （int）独有功能，获取v2的二进制表示有多少个位组成。</span></span><br><span class="line">result2 = v2.bit_length()</span><br><span class="line"><span class="built_in">print</span>(result2)   <span class="comment"># 4   这就意味着v1有4个二进制位</span></span><br></pre></td></tr></table></figure><ul><li>注：该独有功能看看就行，实际运用的意义并不大</li></ul><h4 id="公共功能"><a href="#公共功能" class="headerlink" title="公共功能"></a>公共功能</h4><ul><li>加减乘除</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v2 = <span class="number">8</span></span><br><span class="line">v3 = v1 + v2</span><br><span class="line"><span class="built_in">print</span>(v3)  <span class="comment"># 12</span></span><br></pre></td></tr></table></figure><h4 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h4><ul><li>在项目开发和面试题中经常会出现一些“字符串”和布尔值转换为整型的情况。</li></ul><ol><li>布尔值转换为整型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">n1 = <span class="built_in">int</span>(<span class="literal">True</span>)  <span class="comment"># True转换为整数 1</span></span><br><span class="line">n2 = <span class="built_in">int</span>（<span class="literal">False</span>）<span class="comment"># False转换为整数 0</span></span><br></pre></td></tr></table></figure><ol start="2"><li>字符串转整型</li></ol><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">int</span>(<span class="string">&quot;186&quot;</span>,base=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 把字符串看成十进制的值，然后再转换为十进制整数，结果：v1 = 186</span></span><br><span class="line"><span class="comment"># 这里的base=10可以省略，base=其他数就不能省略</span></span><br><span class="line"></span><br><span class="line">v2 = <span class="built_in">int</span>(<span class="string">&quot;0b1001&quot;</span>,base=<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 把字符串看成二进制的值，然后再转换为十进制整数，结果：v2 = 9（0b表示二进制）</span></span><br><span class="line"></span><br><span class="line">v3 = <span class="built_in">int</span>(<span class="string">&quot;0o144&quot;</span>,base=<span class="number">8</span>)</span><br><span class="line"><span class="comment"># 把字符串看成八进制的值，然后转换为十进制整数，结果：v3 = 100（0o表示八进制）</span></span><br><span class="line"></span><br><span class="line">v4 = <span class="built_in">int</span>(<span class="string">&quot;0x59&quot;</span>,base=<span class="number">16</span>)</span><br><span class="line"><span class="comment"># 把字符串看成十六进制的值，然后转换为十进制整数，结果：v4 = 89（0x表示十六进制）</span></span><br></pre></td></tr></table></figure><ol start="3"><li>浮点型转整型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="built_in">int</span>(<span class="number">8.7</span>)<span class="comment">#8</span></span><br></pre></td></tr></table></figure><p>注：这里浮点型转整型的取整规则是趋0取整</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h5 id="长整型"><a href="#长整型" class="headerlink" title="长整型"></a>长整型</h5><p>python3：整型（无限制）</p><p>python2：整型、长整型</p><p>在python2中跟整数相关的数据类型有两种：int（整型）、long（长整型），能表示的值范围不同。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="number">9223372036854775807</span></span><br><span class="line"><span class="comment">#9223372036854775807</span></span><br><span class="line"></span><br><span class="line">v2 = <span class="number">9223372036854775808</span></span><br><span class="line"><span class="comment">#9223372036854775808L</span></span><br><span class="line"><span class="comment">#long类型都以L结尾</span></span><br></pre></td></tr></table></figure><ul><li><p>注：</p><p>int,可表示的范围：-9223372036854775808~9223372036854775807</p></li></ul><p>​long，整数值超出int范围之后自动会转换为long类型（无限制）。</p><p>​在python3中去除了long只剩下：int（整型），并且int长度不再限制。</p><h5 id="地板除"><a href="#地板除" class="headerlink" title="地板除"></a>地板除</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#py3：</span></span><br><span class="line">v1 = <span class="number">9</span>/<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment">#4.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#py2：</span></span><br><span class="line">v1 = <span class="number">9</span>/<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment">#4</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>python2中两个值相除时，默认进行地板除，只保留整数位。（python3中默认会保留小数）。</p><h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><p>布尔值，其实就是“真”，“假”</p><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="literal">False</span></span><br><span class="line">alex_is_sb = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="独有功能-1"><a href="#独有功能-1" class="headerlink" title="独有功能"></a>独有功能</h4><p>无</p><h4 id="公共功能-1"><a href="#公共功能-1" class="headerlink" title="公共功能"></a>公共功能</h4><p>加减乘除</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="literal">True</span> + <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(v1) <span class="comment">#2</span></span><br></pre></td></tr></table></figure><p>注：没有实际意义看看就行</p><h4 id="转换-1"><a href="#转换-1" class="headerlink" title="转换"></a>转换</h4><ul><li>任何的数据类型都能转换成bool类型</li><li>在以后的项目开发中，会经常使用其他类型转换为布尔值的情景，此处只要记住一个规律即可</li><li>整数0、空字符串、空列表、空字典、转换为布尔值时均为False，其他均为True</li></ul><h4 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h4><h5 id="做条件自动转换"><a href="#做条件自动转换" class="headerlink" title="做条件自动转换"></a>做条件自动转换</h5><ul><li>如果在if 、while条件后面写一个值当做条件时，它会默认转换为布尔类型，然后再做条件判断。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>  <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;太六了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">999</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;武沛齐&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;alex&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你是傻逼？&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你是逗比？&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注：计算机会将if后面的语句转换为bool类型，如果为True就执行if冒号下面的语句，如果为False就执行else下面的语句</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="number">1</span> &gt; <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> 值:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> 值:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><p>字符串，我们平时会用它来表示文本信息。例如：姓名、地址、自我介绍等。</p><h4 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;包治百病&quot;</span></span><br><span class="line">v2 = <span class="string">&#x27;包治百病&#x27;</span></span><br><span class="line">v3 = <span class="string">&quot;&#x27;包‘治百病&quot;</span></span><br><span class="line">v4 = <span class="string">&#x27;&quot;包&quot;治百病&#x27;</span></span><br><span class="line">v5 = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">吵架都是我的错</span></span><br><span class="line"><span class="string">因为大家打不过</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三个引号，可以支持多行/换行表示一个字符串，其他的都是只能在一行中表示一个字符串</span></span><br></pre></td></tr></table></figure><h4 id="独有功能（18-48）"><a href="#独有功能（18-48）" class="headerlink" title="独有功能（18&#x2F;48）"></a>独有功能（18&#x2F;48）</h4><p>基本格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式一：</span></span><br><span class="line"><span class="string">&quot;xxxxx&quot;</span>.功能(...)</span><br><span class="line"><span class="comment"># 括号里可以有东西，也可以没有东西</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式二：</span></span><br><span class="line">v1 = <span class="string">&quot;xxxxx&quot;</span></span><br><span class="line">v1.功能(...)</span><br></pre></td></tr></table></figure><h5 id="判断字符串开头"><a href="#判断字符串开头" class="headerlink" title="判断字符串开头"></a>判断字符串开头</h5><p>判断一个字符串是否以xx开头，得到一个布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;叨逼叨的一天，烦死了&quot;</span></span><br><span class="line"></span><br><span class="line">result = v1.startswith(<span class="string">&quot;叨逼&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 值为True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line">v1 = <span class="built_in">input</span>(<span class="string">&quot;请输入住址：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v1.startswith(<span class="string">&quot;北京市&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;北京人口&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;非北京人口&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="判断字符串结尾"><a href="#判断字符串结尾" class="headerlink" title="判断字符串结尾"></a>判断字符串结尾</h5><p>判断一个字符串是否以xx结尾，得到一个布尔值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;叨逼叨的一天，烦死了&quot;</span></span><br><span class="line"></span><br><span class="line">result1 = v1.endswith(<span class="string">&quot;烦死&quot;</span>)</span><br><span class="line">result2 = v1.endswith(<span class="string">&quot;烦死了&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result1)  <span class="comment"># 值为False</span></span><br><span class="line"><span class="built_in">print</span>(result2)  <span class="comment"># 值为True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line">address = <span class="built_in">input</span>(<span class="string">&quot;请输入地址：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> address.endswith(<span class="string">&#x27;村&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;农业户口&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;非农户口&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="判断字符串为十进制数"><a href="#判断字符串为十进制数" class="headerlink" title="判断字符串为十进制数"></a>判断字符串为十进制数</h5><p>判断字符串是否为一个十进制数，得到一个布尔值</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> = <span class="string">&quot;1238871&quot;</span></span><br><span class="line">result = v1.isdecimal()</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例，两个数相加</span></span><br><span class="line"></span><br><span class="line">v1 = <span class="built_in">input</span>(<span class="string">&quot;请输入值：&quot;</span>)   <span class="comment"># &quot;666&quot;</span></span><br><span class="line">v2 = <span class="built_in">input</span>(<span class="string">&quot;请输入值：&quot;</span>)   <span class="comment"># &quot;999&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> v1.isdecimal() <span class="keyword">and</span> v2.isdecimal():</span><br><span class="line">    data = <span class="built_in">int</span>(v1) + <span class="built_in">int</span>(v2)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;请正确输入数字&quot;</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#.isdecimal()  与  .isdigit() 的区别</span></span><br><span class="line">v1 = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(v1.isdecimal()) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">v2 = <span class="string">&quot;①&quot;</span></span><br><span class="line"><span class="built_in">print</span>(v2.isdecimal()) <span class="comment">#False</span></span><br><span class="line"></span><br><span class="line">v1 = <span class="string">&quot;123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(v1.isdigit()) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line">v2 = <span class="string">&quot;①&quot;</span></span><br><span class="line"><span class="built_in">print</span>(v2.isdigit()) <span class="comment">#True</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="去除字符串两边字符"><a href="#去除字符串两边字符" class="headerlink" title="去除字符串两边字符"></a>去除字符串两边字符</h5><p>去除字符串两边的 空格、换行符、制表符，得到一个新的字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="built_in">input</span>(<span class="string">&quot;请输入内容：&quot;</span>)<span class="comment">#   武沛齐   ，武沛齐</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>去除两边空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&quot; H e ll o啊，树哥 &quot;</span></span><br><span class="line">data = msg.strip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)<span class="comment"># 将msg两边的空白去掉，得到“H e ll o啊，树哥”</span></span><br></pre></td></tr></table></figure><p>去除左边空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&quot; H e ll o啊，树哥 &quot;</span></span><br><span class="line">data = msg.lstrip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)<span class="comment"># 将msg左边的空白去掉，得到“H e ll o啊，树哥 ”</span></span><br></pre></td></tr></table></figure><p>去除右边空格：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&quot; H e ll o啊，树哥 &quot;</span></span><br><span class="line">data = msg.rstrip()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)<span class="comment"># 将msg右边的空白去掉，得到“  H e ll o啊，树哥”</span></span><br></pre></td></tr></table></figure><ul><li>补充：strip也可以去除 空格、换行符、制表符。</li></ul><p>换行符（\n）：该符号输入进程序，会自动换行。</p><p>制表符（Tap键，\t）：输入之后会默认加入一个制表符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例</span></span><br><span class="line">code = <span class="built_in">input</span>(<span class="string">&quot;请输入4位验证码：&quot;</span>) <span class="comment">#  FB87</span></span><br><span class="line">data = code.strip()</span><br><span class="line"><span class="keyword">if</span> data == <span class="string">&quot;FB87&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;验证码正确&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;验证码错误&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>再补充：strip还可以去除字符串两边指定的内容</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&quot;哥H e ll o啊，树哥&quot;</span></span><br><span class="line">data = msg.strip(<span class="string">&quot;哥&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)<span class="comment"># 将msg两边的哥去掉，得到“H e ll o啊，树”</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">&quot;哥H e ll o啊，树哥&quot;</span></span><br><span class="line">data = msg.lstrip(<span class="string">&quot;哥&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)<span class="comment"># 将msg左边的哥去掉，得到“H e ll o啊，树哥”</span></span><br><span class="line"></span><br><span class="line">msg = <span class="string">&quot;哥H e ll o啊，树哥&quot;</span></span><br><span class="line">data = msg.rstrip(<span class="string">&quot;哥&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data)<span class="comment"># 将msg右边的哥去掉，得到“哥H e ll o啊，树”</span></span><br></pre></td></tr></table></figure><h5 id="字符串变大写"><a href="#字符串变大写" class="headerlink" title="字符串变大写"></a>字符串变大写</h5><p>字符串变大写，得到一个新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">msg = <span class="string">&quot;my name is oliver queen&quot;</span></span><br><span class="line">data = msg.upper()</span><br><span class="line"><span class="built_in">print</span>(msg)  <span class="comment"># my name is oliver queen</span></span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># 输出为：MY NAME IS OLIVER QUEEN</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注意：.upper()只是创建新的变量把大写后的值赋给新变量，而原变量不变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 案例</span></span><br><span class="line">code = <span class="built_in">input</span>(<span class="string">&quot;请输入4位验证码：&quot;</span>)  <span class="comment"># FB88  fb88</span></span><br><span class="line">value = code.upper()  <span class="comment"># FB88</span></span><br><span class="line">data = value.strip()  <span class="comment">#FB88</span></span><br><span class="line"><span class="keyword">if</span> data == <span class="string">&quot;FB87&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;验证码正确&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;验证码错误&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意事项</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">code的值”fb88 “</span></span><br><span class="line"><span class="string">value的值”FB88 “</span></span><br><span class="line"><span class="string">data的值”FB88“</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="字符串变小写"><a href="#字符串变小写" class="headerlink" title="字符串变小写"></a>字符串变小写</h5><p>字符串变小写，得到一个新字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;你是个好人，但是好人不合适我&quot;</span></span><br><span class="line">value = data.replace(<span class="string">&quot;好人&quot;</span>,<span class="string">&quot;贱人&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># &quot;你是个好人，但是好人不合适我&quot;</span></span><br><span class="line"><span class="built_in">print</span>(value)  <span class="comment"># &quot;你是个贱人，但是贱人不合适我”</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line">video_file_name = <span class="string">&quot;高清无码爱情动作片.mp4&quot;</span></span><br><span class="line"></span><br><span class="line">new_file_name = video_file_name.replace(<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;avi&quot;</span>)  <span class="comment">#  &quot;高清无码爱情动作片.avi&quot;</span></span><br><span class="line"></span><br><span class="line">final_file_name = new_file_name.replace(<span class="string">&quot;无码&quot;</span>,<span class="string">&quot;步兵&quot;</span>) <span class="comment"># &quot;高清步兵爱情动作片.avi&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(final_file_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line">video_file_name = <span class="string">&quot;高清无码爱情动作片.mp4&quot;</span></span><br><span class="line"></span><br><span class="line">new_file_name = video_file_name.replace(<span class="string">&quot;mp4&quot;</span>,<span class="string">&quot;avi&quot;</span>)  <span class="comment">#  &quot;高清无码爱情动作片.avi&quot;</span></span><br><span class="line"></span><br><span class="line">final_file_name = video_file_name.replace(<span class="string">&quot;无码&quot;</span>,<span class="string">&quot;步兵&quot;</span>)  <span class="comment">#  &quot;高清步兵爱情动作片.mp4&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(final_file_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例</span></span><br><span class="line">content = <span class="built_in">input</span>(<span class="string">&quot;请输入评论信息&quot;</span>) <span class="comment"># alex是个草包</span></span><br><span class="line"></span><br><span class="line">content = content.replace(<span class="string">&quot;草&quot;</span>,<span class="string">&quot;**&quot;</span>)  <span class="comment"># alex是一个**包</span></span><br><span class="line">content = content.replace(<span class="string">&quot;泥马&quot;</span>,<span class="string">&quot;***&quot;</span>)  <span class="comment"># alex是一个**包</span></span><br><span class="line"><span class="built_in">print</span>(content)  <span class="comment">#  alex是一个**包</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注：每次都赋值给content变量，是为了节省变量的使用</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> 案例</span><br><span class="line">char_list = [<span class="string">&quot;草拟吗&quot;</span>,<span class="string">&quot;逗逼&quot;</span>,<span class="string">&quot;二蛋&quot;</span>,<span class="string">&quot;钢球&quot;</span>]</span><br><span class="line"></span><br><span class="line">content = <span class="built_in">input</span>(<span class="string">&quot;请输入评论信息&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> char_list:</span><br><span class="line">    <span class="comment"># item=&quot;草泥吗&quot;</span></span><br><span class="line">    content = content.replace(item,<span class="string">&quot;**&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="字符串切割"><a href="#字符串切割" class="headerlink" title="字符串切割"></a>字符串切割</h5><p>字符串切割，得到一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;武沛齐|root|wupeiqi@qq.com&quot;</span></span><br><span class="line">result = data.split(<span class="string">&#x27;|&#x27;</span>)   <span class="comment">#  切割完之后是列表类型的数据</span></span><br><span class="line"><span class="built_in">print</span>(data) <span class="comment"># &quot;武沛齐|root|wupeiqi@qq.com&quot;</span></span><br><span class="line"><span class="built_in">print</span>(result) </span><br><span class="line"><span class="comment"># 输出[&#x27;武沛齐&#x27;, &#x27;root&#x27;, &#x27;wupeiqi@qq.com&#x27;]</span></span><br><span class="line"><span class="comment"># 根据特定字符切开之后保存至列表中,方便以后的操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 案例:判断用户名密码是否正确</span></span><br><span class="line">info = <span class="string">&quot;武沛齐,root&quot;</span></span><br><span class="line"><span class="comment"># 备注：字符串中存储了一个用户名和密码</span></span><br><span class="line">user_list = info.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="comment"># 得到一个包含了2个元素的列表[&quot;武沛齐&quot;,&quot;root&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#user_list[0]  获取列表的第一个元素</span></span><br><span class="line"><span class="comment">#user_list[1]  获取列表的第二个元素</span></span><br><span class="line"></span><br><span class="line">user = <span class="built_in">input</span>(<span class="string">&quot;请输入用户名：&quot;</span>)</span><br><span class="line">pwd = <span class="built_in">input</span>(<span class="string">&quot;请输入密码&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较输入的用户名和密码是否与列表中的相同</span></span><br><span class="line"><span class="keyword">if</span> user == user_list[<span class="number">0</span>] <span class="keyword">and</span> pwd == user_list[<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;用户名或密码错误&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制切割次数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;武沛齐|root|wupeiqi@qq.com&quot;</span></span><br><span class="line">v1 = data.split(<span class="string">&quot;|&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"><span class="comment">#  [&#x27;武沛齐&#x27;, &#x27;root&#x27;, &#x27;wupeiqi@qq.com&#x27;]</span></span><br><span class="line"></span><br><span class="line">v2 = data.split(<span class="string">&quot;|&quot;</span>,<span class="number">1</span>)  <span class="comment"># 1表示从左到右切几个</span></span><br><span class="line"><span class="built_in">print</span>(v2)</span><br><span class="line"><span class="comment">#  [&#x27;武沛齐&#x27;, &#x27;root|wupeiqi@qq.com&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再拓展：</p><p>切割的方向从右往左切割</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;武沛齐,root,wupeiqi@qq.com&quot;</span></span><br><span class="line"></span><br><span class="line">v1 = data.rsplit(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)</span><br><span class="line"><span class="comment">#  [&#x27;武沛齐&#x27;, &#x27;root&#x27;, &#x27;wupeiqi@qq.com&#x27;]</span></span><br><span class="line"></span><br><span class="line">v2 = data.rsplit(<span class="string">&#x27;,&#x27;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(v2)</span><br><span class="line"><span class="comment">#  [&#x27;武沛齐,root&#x27;, &#x27;wupeiqi@qq.com&#x27;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>应用场景：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">file_path = <span class="string">&quot;xxx/xxxx/xx.xx/xxx.mp4&quot;</span></span><br><span class="line"><span class="comment">#  要求找到该文件的后缀名</span></span><br><span class="line"><span class="comment">#  这时就可以通过</span></span><br><span class="line">data_list = file_path.rsplit(<span class="string">&quot;.&quot;</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># [&quot;xxx/xxxx/xx.xx/xxx&quot;,&quot;mp4&quot;]</span></span><br><span class="line">data_list[<span class="number">0</span>]</span><br><span class="line">data_list[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h5 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h5><p>字符串拼接，得到一个新的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data_list = [<span class="string">&quot;alex&quot;</span>,<span class="string">&quot;是&quot;</span>,<span class="string">&quot;大烧饼&quot;</span>]</span><br><span class="line"><span class="comment"># 将字符串拼接起来，形成一个整体的大字符串</span></span><br><span class="line">v1 = <span class="string">&quot;*&quot;</span>.join(data_list) <span class="comment">#  alex*是*大烧饼</span></span><br><span class="line"><span class="built_in">print</span>(v1)</span><br></pre></td></tr></table></figure><h5 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h5><p>格式化字符串，得到新的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;&#123;0&#125;的喜欢干很多行业，例如有：&#123;1&#125;、&#123;2&#125;等&quot;</span></span><br><span class="line">data = name.<span class="built_in">format</span>(<span class="string">&quot;老王&quot;</span>,<span class="string">&quot;护士&quot;</span>,<span class="string">&quot;嫩模&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># &quot;老王的喜欢干很多行业，例如有：护士、嫩模等&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name)  <span class="comment"># &quot;&#123;0&#125;的喜欢干很多行业，例如有：&#123;1&#125;、&#123;2&#125;等&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;&#123;&#125;的喜欢干很多行业，例如有：&#123;&#125;、&#123;&#125;等&quot;</span></span><br><span class="line">data = name.<span class="built_in">format</span>(<span class="string">&quot;老王&quot;</span>,<span class="string">&quot;护士&quot;</span>,<span class="string">&quot;嫩模&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># 老王的喜欢干很多行业，例如有：护士、嫩模等</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="string">&quot;&#123;name&#125;的喜欢干很多行业，例如有：&#123;h1&#125;、&#123;h2&#125;等&quot;</span></span><br><span class="line">data = name.<span class="built_in">format</span>(name=<span class="string">&quot;老王&quot;</span>,h1=<span class="string">&quot;护士&quot;</span>,h2=<span class="string">&quot;嫩模&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># 老王的喜欢干很多行业，例如有：护士、嫩模 等</span></span><br></pre></td></tr></table></figure><h5 id="字符串转字节类型"><a href="#字符串转字节类型" class="headerlink" title="字符串转字节类型"></a>字符串转字节类型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;嫂子&quot;</span>  <span class="comment"># Unicode，字符串类型</span></span><br><span class="line"><span class="comment"># 如果你想将这个字符串写入文件，或者通过网络进行传输</span></span><br><span class="line"><span class="comment"># 一般要转换成gbk的编码或者utf-8的编码</span></span><br><span class="line">v1 = data.encode(<span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># utf-8，字节类型</span></span><br><span class="line"><span class="comment"># 相当于把字符串“嫂子”内部的编码方式</span></span><br><span class="line"><span class="comment"># 压缩或者转换成utf-8的编码格式</span></span><br><span class="line">v2 = data.encode(<span class="string">&quot;gbk&quot;</span>)  <span class="comment"># gbk,字节类型</span></span><br><span class="line"><span class="comment"># 可以去打印v1和v2</span></span><br><span class="line"><span class="comment"># 输出v1和v2时</span></span><br><span class="line"><span class="comment"># 是按照每个字节并且是十六进制的方式输出的</span></span><br><span class="line"><span class="built_in">print</span>(v1)  <span class="comment"># b&#x27;\xe5\xab\x82 \xe5\xad\x90&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(v2)  <span class="comment"># b&#x27;\xc9\xa9 \xd7\xd3&#x27;</span></span><br><span class="line"><span class="comment"># v1输出的前三字节表示“嫂”，后三个表示“子”</span></span><br><span class="line"><span class="comment"># 每个字节用斜杠隔开</span></span><br><span class="line"><span class="comment"># v2输出的前二字节表示“嫂”，后二个表示“子”</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>延伸：字节类型转换回字符串类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s1 = v1.decode(<span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># 嫂子</span></span><br><span class="line">s2 = v2.decode(<span class="string">&quot;gbk&quot;</span>)  <span class="comment"># 嫂子</span></span><br><span class="line"><span class="comment"># 用什么字节类型的编码方式，就在括号内输入什么</span></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"><span class="built_in">print</span>(s2)</span><br></pre></td></tr></table></figure><h5 id="字符串居左、中、右"><a href="#字符串居左、中、右" class="headerlink" title="字符串居左、中、右"></a>字符串居左、中、右</h5><p>居中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;王老汉&quot;</span></span><br><span class="line"></span><br><span class="line">data = v1.center(<span class="number">20</span>,<span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="comment"># 让王老汗放在输出的中间</span></span><br><span class="line"><span class="comment"># 并让其前面用*号占位，后面用*号占位</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># 输出结果：********王老汉*********</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>居左：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;王老汉&quot;</span></span><br><span class="line"></span><br><span class="line">data = v1.ljust(<span class="number">21</span>,<span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="comment"># 让王老汗放在输出的左边</span></span><br><span class="line"><span class="comment"># 并让后面用-号占位</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># 输出结果：王老汉------------------</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>居右：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;王老汉&quot;</span></span><br><span class="line"></span><br><span class="line">data = v1.rjust(<span class="number">21</span>,<span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="comment"># 让王老汗放在输出的右边</span></span><br><span class="line"><span class="comment"># 并让前面用-号占位</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># 输出结果：------------------王老汉</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="字符串输出填充"><a href="#字符串输出填充" class="headerlink" title="字符串输出填充"></a>字符串输出填充</h5><p>Zfill （帮助你填充0）类似于居左、中、右，但居左、中、右这更灵活</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;alex&quot;</span></span><br><span class="line">v1 = data.zfill(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)  <span class="comment"># 000000alex</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用场景：处理二进制数据</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;101&quot;</span></span><br><span class="line">v1 = data.zfill(<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(v1)  <span class="comment"># ”00000101“</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="了解更多独有功能"><a href="#了解更多独有功能" class="headerlink" title="了解更多独有功能"></a>了解更多独有功能</h5><p>更多的字符穿独有功能，可以通过pycharm中python的源码区了解</p><p>打开pycharm中python源码的操作步骤</p><ol><li>在pycharm中输入str</li><li>按住键盘的一个按键</li></ol><p>​Windows用户按：ctrl键</p><p>​Mac用户按：cmd键</p><ol start="3"><li>之后把鼠标放在str上（此时鼠标会变成一个小手）</li><li>点击鼠标左键（此时就跳转到了python的源码中）</li></ol><h4 id="公共功能-2"><a href="#公共功能-2" class="headerlink" title="公共功能"></a>公共功能</h4><h5 id="相加"><a href="#相加" class="headerlink" title="相加"></a>相加</h5><p>字符串+字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">&quot;alex&quot;</span> + <span class="string">&quot;大sb&quot;</span></span><br><span class="line"><span class="built_in">print</span>(v1)  <span class="comment"># alex大sb</span></span><br></pre></td></tr></table></figure><h5 id="相乘"><a href="#相乘" class="headerlink" title="相乘"></a>相乘</h5><p>字符串*整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;嫂子&quot;</span> * <span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># 嫂子嫂子嫂子</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>求长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = <span class="string">&quot;嫂子满身大汉&quot;</span></span><br><span class="line"></span><br><span class="line">value = <span class="built_in">len</span>(data)  <span class="comment"># 计算字符串&quot;嫂子满身大汉&quot;的长度</span></span><br><span class="line"><span class="built_in">print</span>(value)  <span class="comment"># 6</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;dasdasd&quot;</span></span><br><span class="line">value = <span class="built_in">len</span>(data)</span><br><span class="line"><span class="built_in">print</span>(value)  <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><h5 id="获取字符、索引"><a href="#获取字符、索引" class="headerlink" title="获取字符、索引"></a>获取字符、索引</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line"><span class="comment"># 正着取    0 1 2345 6 7</span></span><br><span class="line"><span class="comment"># 倒着取       ...-3-2 -1</span></span><br><span class="line"><span class="built_in">print</span>(message[<span class="number">0</span>])  <span class="comment"># &#x27;来&#x27;  # 在计算机中，第一个字的序号是0</span></span><br><span class="line"><span class="built_in">print</span>(message[<span class="number">1</span>])  <span class="comment"># &#x27;做&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(message[<span class="number">2</span>])  <span class="comment"># &#x27;点&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(message[-<span class="number">1</span>])  <span class="comment"># 呀</span></span><br><span class="line"><span class="built_in">print</span>(message[-<span class="number">2</span>])  <span class="comment"># 易</span></span><br><span class="line"><span class="built_in">print</span>(message[-<span class="number">3</span>])  <span class="comment"># 交</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：字符串只能通过索引来取值，无法修改值。【字符串在内部存储时不允许对内部元素修改，想修改只能重新创建。】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">message[<span class="number">0</span>] = <span class="string">&quot;去&quot;</span>  <span class="comment"># 这是不可以的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 索引的应用</span></span><br><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(message):</span><br><span class="line">    value = message[index]</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line"><span class="comment"># 如果索引的数字大于字符串的长度，那么程序就会直接报错</span></span><br><span class="line"><span class="comment"># 并不会跳出循环</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 倒序的索引</span></span><br><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line">index = <span class="built_in">len</span>(message) - <span class="number">1</span></span><br><span class="line"><span class="comment"># 索引是从零开始，而字符串的长度是从1开始</span></span><br><span class="line"><span class="comment"># 所以算出长度后要减去1</span></span><br><span class="line"><span class="keyword">while</span> index &gt;= <span class="number">0</span>:</span><br><span class="line">    value = message[index]</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    index -= <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="获取字符串中的子序列、切片"><a href="#获取字符串中的子序列、切片" class="headerlink" title="获取字符串中的子序列、切片"></a>获取字符串中的子序列、切片</h5><p>获取字符串中的子序列、切片（与索引相似，只不过索引是获取里面的某个字符，切片获取的是这里面的某些字符）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line"></span><br><span class="line">text = message[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 把从第零个位置（包含第零个）到第二个序号的位置（不包含第二个）</span></span><br><span class="line"><span class="comment"># 类似于数学上的左闭又开区间</span></span><br><span class="line"><span class="built_in">print</span>(text)  <span class="comment"># 来做</span></span><br><span class="line"><span class="built_in">print</span>(message[<span class="number">3</span>:<span class="number">7</span>])  <span class="comment"># py交易</span></span><br><span class="line"><span class="built_in">print</span>(message[<span class="number">3</span>:])  <span class="comment"># py交易呀</span></span><br><span class="line"><span class="comment"># 后面不加：从三开始取到最后</span></span><br><span class="line"><span class="built_in">print</span>(message[:<span class="number">5</span>])  <span class="comment"># 来做点py</span></span><br><span class="line"><span class="comment"># 前面不加：从头开始取到后面数字的前一位序号</span></span><br><span class="line"><span class="comment"># 右边依然是开区间</span></span><br><span class="line"><span class="built_in">print</span>(message[<span class="number">4</span>:-<span class="number">1</span>])  <span class="comment"># y交易</span></span><br><span class="line"><span class="comment"># 右边依然不包含，顺序是从第四位取到第六位的序号</span></span><br><span class="line"><span class="built_in">print</span>(message[<span class="number">4</span>:-<span class="number">2</span>])  <span class="comment"># y交</span></span><br><span class="line"><span class="comment"># 与len结合使用</span></span><br><span class="line"><span class="built_in">print</span>(message[<span class="number">4</span>:<span class="built_in">len</span>(message)])  <span class="comment"># y交易呀</span></span><br><span class="line"><span class="comment"># 注意message的长度是8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>注：字符串中的切片只能读取数据，无法修改数据。【字符串在内部存储时不允许对内部元素修改，想修改只能重新创建。】</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message[<span class="number">0</span>:<span class="number">2</span>] = <span class="string">&quot;去搞&quot;</span>  <span class="comment"># 程序会报错</span></span><br><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line">value = message[:<span class="number">3</span>] + <span class="string">&quot;python&quot;</span> + message[<span class="number">5</span>:]</span><br><span class="line"><span class="built_in">print</span>(value)  <span class="comment"># 来做点python交易呀</span></span><br></pre></td></tr></table></figure><h5 id="跳跃取字符串内容"><a href="#跳跃取字符串内容" class="headerlink" title="跳跃取字符串内容"></a>跳跃取字符串内容</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;生活不是电影，生活比电影苦&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">0</span>:<span class="number">5</span>:<span class="number">2</span>])  <span class="comment"># 输出：生不电</span></span><br><span class="line"><span class="comment"># 前两个值表示区间范围，最后一个值表示步长</span></span><br><span class="line"><span class="comment"># 如个最后一个值不写那么就会逐一依次从小到大的序号取</span></span><br><span class="line"><span class="built_in">print</span>(name[:<span class="number">8</span>:<span class="number">2</span>])  <span class="comment"># 输出：生不电，</span></span><br><span class="line"><span class="comment"># 区间范围的前面不写则表示起始范围为0开始</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">2</span>::<span class="number">3</span>])  <span class="comment"># 输出：不影活影</span></span><br><span class="line"><span class="comment"># 区间范围的后面不写则表示结束范围为最后</span></span><br><span class="line"><span class="built_in">print</span>(name[::<span class="number">2</span>])  <span class="comment"># 输出：生不电，活电苦</span></span><br><span class="line"><span class="comment"># 区间范围不写表示整个字符串</span></span><br><span class="line"><span class="built_in">print</span>(name[<span class="number">8</span>:<span class="number">1</span>:-<span class="number">1</span>])  <span class="comment"># 输出：活生，影电是不</span></span><br><span class="line"><span class="comment"># 倒序</span></span><br><span class="line"><span class="comment"># 依然还是前取后不取</span></span><br><span class="line"><span class="comment"># 面试题：给你一个字符串，请将这个字符串翻转。</span></span><br><span class="line">value = name[::-<span class="number">1</span>]</span><br><span class="line">value = name[-<span class="number">1</span>::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(value)  <span class="comment"># 苦影电比活生，影电是不活生</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h5><ul><li>while循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> index &lt; <span class="built_in">len</span>(message):</span><br><span class="line">    value = message[index]</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">    index += <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>for循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">    <span class="built_in">print</span>(char)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>range：帮助我们创建一系列的数字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">10</span>)  <span class="comment"># [0,1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)  <span class="comment"># [1,2,3,4,5,6,7,8,9]</span></span><br><span class="line"><span class="comment"># 依旧遵循”前取后不取“原则</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)  <span class="comment"># [1,3,5,7,9]</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">10</span>,<span class="number">1</span>,-<span class="number">1</span>)  <span class="comment"># [10,9,8,7,6,5,4,3,2]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>for+range</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):  <span class="comment"># [0,1,2,3,4]</span></span><br><span class="line">    message[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message)):  <span class="comment"># [0,1,2,3,4,5,6,7]</span></span><br><span class="line">    <span class="built_in">print</span>(message[i])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>索引除了以上两种还可以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">    <span class="built_in">print</span>(char)</span><br></pre></td></tr></table></figure><ul><li><p>注：与while循环相比，for循环更简洁，但并不意味着for循环可以代替while循环</p><p>以下是while循环的应用场景</p></li><li><p>while，一般在做无限制（未知）循环次数时使用</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户输入一个值，如果不是整数则一直输入，直到是整数了才结束</span></span><br><span class="line">num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    data = <span class="built_in">input</span>(<span class="string">&quot;请输入内容：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> data.isdecimal():</span><br><span class="line">        num = <span class="built_in">int</span>(data)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;输入错误，请重新输入！&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>for循环，一般应用在已知的循环数量的场景</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">    <span class="built_in">print</span>(char)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    <span class="built_in">print</span>(message[i])</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>break和continue关键字</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">    <span class="keyword">if</span> char == <span class="string">&quot;p&quot;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="built_in">print</span>(char)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">来</span><br><span class="line">做</span><br><span class="line">点</span><br><span class="line">y</span><br><span class="line">交</span><br><span class="line">易</span><br><span class="line">呀</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;来做点py交易呀&quot;</span></span><br><span class="line"><span class="keyword">for</span> char <span class="keyword">in</span> message:</span><br><span class="line">    <span class="keyword">if</span> char == <span class="string">&quot;p&quot;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(char)</span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line">来</span><br><span class="line">做</span><br><span class="line">点</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>嵌套</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 0 1 2 3 4</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="built_in">print</span>(j) <span class="comment"># 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 </span></span><br></pre></td></tr></table></figure><p>如果在内循环出现了break 和 continue只影响当前循环，不影响外面循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># 0 1 2 3 4</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="built_in">print</span>(j) <span class="comment"># 该输出函数不会输出</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="转换-2"><a href="#转换-2" class="headerlink" title="转换"></a>转换</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">999</span></span><br><span class="line">data = <span class="built_in">str</span>(num)</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># &quot;999&quot;</span></span><br><span class="line"></span><br><span class="line">data_list = [<span class="string">&quot;alex&quot;</span>,<span class="string">&quot;eric&quot;</span>,<span class="number">999</span>]</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">str</span>(data_list)</span><br><span class="line"><span class="built_in">print</span>(data)  <span class="comment"># &quot;[&quot;alex&quot;,&quot;eric&quot;,999]&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一般情况下，只有整型转字符串才常用</p><h4 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a>其他</h4><h5 id="字符串不可被修改"><a href="#字符串不可被修改" class="headerlink" title="字符串不可被修改"></a>字符串不可被修改</h5><p>字符串在创建之后不能被修改，我们所见到的是：修改好的字符串，去创建一个新的内存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">&quot;武沛齐&quot;</span> </span><br><span class="line"></span><br><span class="line">name[<span class="number">1</span>]</span><br><span class="line">name[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>索引或者切片并不是从字符串里面拿字符串，而是新创建了一个字符串，可以认为与原字符串没有关系</p><ul><li>而列表的元素是允许被修改的：</li></ul><p>num_list &#x3D; [11,22,33]</p><p> num_list[0] # 把11取出来<br> num_list[0] &#x3D; 666<br> # 把列表里此位置的元素即11修改成666</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>整型在Python2和Python3中的区别？</li><li>进制之间的转换。</li><li>其他类型转换为布尔类型时，空和0为False，其他均为Tr</li><li>条件语句中可自动化转换布尔类型来做判断</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;武沛齐&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">666</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">999</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>字符串中常见的独有功能</li><li>字符串中常见的公共功能</li><li>字符串创建之后是不可以被修改的</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
